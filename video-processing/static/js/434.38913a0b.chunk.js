/*! For license information please see 434.38913a0b.chunk.js.LICENSE.txt */
(globalThis.webpackChunkvideo_processing=globalThis.webpackChunkvideo_processing||[]).push([[434],{4200:(e,t,n)=>{"use strict";function r(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}n.d(t,{Z:()=>u});let a=0,s=0;const o=[];let i=!document||!document.hidden;class u{constructor(){let{backgroundThrottling:e}=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{backgroundThrottling:!0};this.active=!0,this.runner=function(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0];const t=()=>e||i,n=new Map,r=e=>{n.delete(e)};return document.addEventListener("visibilitychange",(()=>{i=!document||!document.hidden,t()||n.forEach(((e,t)=>{e(),r(t)}))})),{requestAnimationFrame:e=>t()?window.requestAnimationFrame(e):(e=>{if(0===o.length){const e=performance.now(),t=Math.max(0,16.666666666666668-(e-a));a=t+e,setTimeout((()=>{const e=o.slice(0);o.length=0;for(let t=0;t<e.length;t++)if(!e[t].cancelled)try{e[t].callback(a)}catch(e){setTimeout((()=>{throw e}),0)}}),Math.round(t))}return s+=1,o.push({handle:s,cancelled:!1,callback:e}),s})(e),cancelAnimationFrame:e=>{window.cancelAnimationFrame(e),(e=>{for(let t=0;t<o.length;t++)o[t].handle===e&&(o[t].cancelled=!0)})(e)},whenRestarted:(e,t)=>{n.set(e,t)},offRestart:r}}(e)}run(e){let t=arguments.length>2?arguments[2]:void 0;const n=1e3/(arguments.length>1&&void 0!==arguments[1]?arguments[1]:60);let r=0,a=0;const s=o=>{if(t&&a>=t)return;this.request(s);const i=o-r;i>n&&(r=o-i%n,a+=1,e(o))};this.cancelRequest(),this.request(s)}runAsync(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:60,n=arguments.length>2?arguments[2]:void 0;return r(this,void 0,void 0,(function*(){const a=1e3/t;let s=0,o=0;const i=t=>r(this,void 0,void 0,(function*(){if(n&&o>=n)return;const r=t-s;r>a&&(s=t-r%a,o+=1,yield e(t)),this.request(i)}));this.cancelRequest(),this.request(i)}))}request(e){this.requestID&&this.runner.offRestart(this.requestID),this.active&&(this.requestID=this.runner.requestAnimationFrame(e),this.runner.whenRestarted(this.requestID,(()=>{this.cancelRequest(),this.requestID=this.runner.requestAnimationFrame(e)})))}cancelRequest(){this.requestID&&(this.runner.cancelAnimationFrame(this.requestID),this.runner.offRestart(this.requestID))}activate(){this.cancelRequest(),this.active=!0}deactivate(){this.cancelRequest(),this.active=!1}}},1627:(e,t,n)=>{"use strict";n.d(t,{N7:()=>Xe,oV:()=>We,wX:()=>Ye});var r=n(37),a=n(1393),s=n(8741),o=function(e,t){return o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},o(e,t)};function i(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var u=function(){return u=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},u.apply(this,arguments)};function l(e,t,n,r){return new(n||(n=Promise))((function(a,s){function o(e){try{u(r.next(e))}catch(e){s(e)}}function i(e){try{u(r.throw(e))}catch(e){s(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,i)}u((r=r.apply(e,t||[])).next())}))}function c(e,t){var n,r,a,s,o={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return s={next:i(0),throw:i(1),return:i(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function i(s){return function(i){return function(s){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(a=2&s[0]?r.return:s[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,s[1])).done)return a;switch(r=0,a&&(s=[2&s[0],a.value]),s[0]){case 0:case 1:a=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,r=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((a=(a=o.trys).length>0&&a[a.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!a||s[1]>a[0]&&s[1]<a[3])){o.label=s[1];break}if(6===s[0]&&o.label<a[1]){o.label=a[1],a=s;break}if(a&&o.label<a[2]){o.label=a[2],o.ops.push(s);break}a[2]&&o.ops.pop(),o.trys.pop();continue}s=t.call(e,o)}catch(e){s=[6,e],r=0}finally{n=a=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,i])}}}function d(e){return e instanceof SVGAnimatedLength?e.baseVal.value:e}function p(e){return l(this,void 0,void 0,(function(){var t,n;return c(this,(function(a){switch(a.label){case 0:return t=document.createElement("canvas"),e instanceof r.Tensor?[4,r.browser.toPixels(e,t)]:[3,2];case 1:return a.sent(),[3,3];case 2:t.width=d(e.width),t.height=d(e.height),n=t.getContext("2d"),e instanceof ImageData?n.putImageData(e,0,0):n.drawImage(e,0,0),a.label=3;case 3:return[2,t]}}))}))}function h(e){return l(this,void 0,void 0,(function(){var t,n,a,s,o,i;return c(this,(function(u){switch(u.label){case 0:return e instanceof r.Tensor?(t=e.shape.slice(0,2),n=t[0],a=t[1],s=ImageData.bind,[4,r.browser.toPixels(e)]):[3,2];case 1:return[2,new(s.apply(ImageData,[void 0,u.sent(),a,n]))];case 2:return o=document.createElement("canvas"),i=o.getContext("2d"),o.width=d(e.width),o.height=d(e.height),i.drawImage(e,0,0),[2,i.getImageData(0,0,o.width,o.height)]}}))}))}function f(e){return l(this,void 0,void 0,(function(){var t,n;return c(this,(function(a){switch(a.label){case 0:return e instanceof SVGImageElement||e instanceof OffscreenCanvas?[4,p(e)]:[3,2];case 1:return n=a.sent(),[3,3];case 2:n=e,a.label=3;case 3:return t=n,[2,r.browser.fromPixels(t,4)]}}))}))}function m(e){if(e<0||e>=256)throw new Error("Mask value must be in range [0, 255] but got "+e);if(!Number.isInteger(e))throw new Error("Mask value must be an integer but got "+e)}function g(e){var t=e.shape[2],n=(0,r.argMax)(e,2),a=(0,r.reshape)(n,[-1]);return(0,r.oneHot)(a,t)}function y(e,t){return(0,r.tidy)((function(){return(0,r.cast)((0,r.greater)(e,(0,r.scalar)(t)),"int32")}))}function x(e,t){var n=t.shape,a=n[0],s=n[1],o=n[2];return(0,r.tidy)((function(){var n=g(t),i=(0,r.expandDims)((0,r.range)(0,o,1,"int32"),1),u=(0,r.cast)((0,r.matMul)(n,i),"int32"),l=(0,r.reshape)(u,[a,s]),c=(0,r.add)(l,(0,r.scalar)(1,"int32"));return(0,r.sub)(function(e,t){return(0,r.mul)(e,t)}(c,e),(0,r.scalar)(1,"int32"))}))}var b=function(){function e(e,t){this.model=e,this.outputStride=t;var n=this.model.inputs[0].shape;r.util.assert(-1===n[1]&&-1===n[2],(function(){return"Input shape ["+n[1]+", "+n[2]+"] must both be equal to or -1"}))}return e.prototype.predict=function(e){var t=this;return(0,r.tidy)((function(){var n=t.preprocessInput((0,r.cast)(e,"float32")),a=(0,r.expandDims)(n,0),s=t.model.predict(a).map((function(e){return(0,r.squeeze)(e,[0])})),o=t.nameOutputResults(s);return{heatmapScores:(0,r.sigmoid)(o.heatmap),offsets:o.offsets,displacementFwd:o.displacementFwd,displacementBwd:o.displacementBwd,segmentation:o.segmentation,partHeatmaps:o.partHeatmaps,longOffsets:o.longOffsets,partOffsets:o.partOffsets}}))},e.prototype.dispose=function(){this.model.dispose()},e}(),v=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.preprocessInput=function(e){return(0,r.tidy)((function(){return(0,r.sub)((0,r.div)(e,127.5),1)}))},t.prototype.nameOutputResults=function(e){return{offsets:e[0],segmentation:e[1],partHeatmaps:e[2],longOffsets:e[3],heatmap:e[4],displacementFwd:e[5],displacementBwd:e[6],partOffsets:e[7]}},t}(b),w=["nose","leftEye","rightEye","leftEar","rightEar","leftShoulder","rightShoulder","leftElbow","rightElbow","leftWrist","rightWrist","leftHip","rightHip","leftKnee","rightKnee","leftAnkle","rightAnkle"],k=w.length,S=w.reduce((function(e,t,n){return e[t]=n,e}),{});function N(e,t,n){var r=e[0],a=e[1],s=t[0],o=t[1],i=n.top,u=n.bottom;return[o/(n.left+n.right+a),s/(i+u+r)]}function T(e,t,n,r){return{y:r.get(e,t,n),x:r.get(e,t,n+k)}}function I(e,t,n){var r=T(e.heatmapY,e.heatmapX,e.id,n),a=r.y,s=r.x;return{x:e.heatmapX*t+s,y:e.heatmapY*t+a}}function $(e,t,n){return e<t?t:e>n?n:e}function C(e,t){return{x:e.x+t.x,y:e.y+t.y}}function E(e,t,n){void 0===n&&(n=.3);for(var r=0,a=0,s=0;s<e.length;s++)t.keypoints[s].score>n&&(a+=1,r+=Math.pow(e[s].x-t.keypoints[s].position.x,2)+Math.pow(e[s].y-t.keypoints[s].position.y,2));return 0===a?r=1/0:r/=a,r}function _(e,t,n,r,a,s,o){for(var i=o[0],u=o[1],l=n(e),c=l.y*r+l.x,d=a[k*(2*c)+t],p=a[k*(2*c+1)+t],h=e.y+d,f=e.x+p,m=0;m<s;m++){h=Math.min(h,i-1);var g=n({x:f=Math.min(f,u-1),y:h}),y=g.y*r+g.x;h+=d=a[k*(2*y)+t],f+=p=a[k*(2*y+1)+t]}return{x:f,y:h}}function R(e,t,n,r,a,s,o,i,u,l){for(var c=a[0],d=a[1],p=s[0],h=s[1],f=i[0],m=i[1],g=[],y=function(e){return function(e,t,n,r){var a=t[0],s=t[1],o=n[0],i=n[1],u=Math.round(((a+e.y+1)*i-1)/r);return{x:Math.round(((s+e.x+1)*o-1)/r),y:u}}(e,[c,d],[p,h],u)},x=0;x<r;x++){var b=_(e,x,y,o,t,l,[f,m]);g.push(b)}for(var v=-1,w=1/0,k=0;k<n.length;k++){var S=E(g,n[k]);S<w&&(v=k,w=S)}return v}function A(e,t){var n=e[0],r=e[1];return[Math.round((r-1)/t+1),Math.round((n-1)/t+1)]}function O(e,t,n,a,s,o,i,u,l,c,d){for(var p=i[0],h=i[1],f=e.shape,m=f[0],g=f[1],y=t.shape.slice(0,2),x=y[0],b=y[1],v=(0,r.reshape)(t,[x,b,2,k]),w=new Float32Array(d*k*3).fill(0),S=0;S<n.length;S++)for(var T=S*k*3,I=n[S],$=0;$<k;$++){var C=I.keypoints[$],E=T+3*$;w[E]=C.score,w[E+1]=C.position.y,w[E+2]=C.position.x}var _=N([a,s],[p,h],u),R=_[0],A=_[1],O=(0,r.tensor)(w,[d,k,3]),D=u.top,F=u.left,B={variableNames:["segmentation","longOffsets","poses"],outputShape:[m,g],userCode:"\n    int convertToPositionInOutput(int pos, int pad, float scale, int stride) {\n      return round(((float(pos + pad) + 1.0) * scale - 1.0) / float(stride));\n    }\n\n    float convertToPositionInOutputFloat(\n        int pos, int pad, float scale, int stride) {\n      return ((float(pos + pad) + 1.0) * scale - 1.0) / float(stride);\n    }\n\n    float dist(float x1, float y1, float x2, float y2) {\n      return pow(x1 - x2, 2.0) + pow(y1 - y2, 2.0);\n    }\n\n    float sampleLongOffsets(float h, float w, int d, int k) {\n      float fh = fract(h);\n      float fw = fract(w);\n      int clH = int(ceil(h));\n      int clW = int(ceil(w));\n      int flH = int(floor(h));\n      int flW = int(floor(w));\n      float o11 = getLongOffsets(flH, flW, d, k);\n      float o12 = getLongOffsets(flH, clW, d, k);\n      float o21 = getLongOffsets(clH, flW, d, k);\n      float o22 = getLongOffsets(clH, clW, d, k);\n      float o1 = mix(o11, o12, fw);\n      float o2 = mix(o21, o22, fw);\n      return mix(o1, o2, fh);\n    }\n\n    int findNearestPose(int h, int w) {\n      float prob = getSegmentation(h, w);\n      if (prob < 1.0) {\n        return -1;\n      }\n\n      // Done(Tyler): convert from output space h/w to strided space.\n      float stridedH = convertToPositionInOutputFloat(\n        h, "+D+", "+A+", "+o+");\n      float stridedW = convertToPositionInOutputFloat(\n        w, "+F+", "+R+", "+o+");\n\n      float minDist = 1000000.0;\n      int iMin = -1;\n      for (int i = 0; i < "+d+"; i++) {\n        float curDistSum = 0.0;\n        int numKpt = 0;\n        for (int k = 0; k < "+k+"; k++) {\n          float dy = sampleLongOffsets(stridedH, stridedW, 0, k);\n          float dx = sampleLongOffsets(stridedH, stridedW, 1, k);\n\n          float y = float(h) + dy;\n          float x = float(w) + dx;\n\n          for (int s = 0; s < "+l+"; s++) {\n            int yRounded = round(min(y, float("+(a-1)+")));\n            int xRounded = round(min(x, float("+(s-1)+")));\n\n            float yStrided = convertToPositionInOutputFloat(\n              yRounded, "+D+", "+A+", "+o+");\n            float xStrided = convertToPositionInOutputFloat(\n              xRounded, "+F+", "+R+", "+o+");\n\n            float dy = sampleLongOffsets(yStrided, xStrided, 0, k);\n            float dx = sampleLongOffsets(yStrided, xStrided, 1, k);\n\n            y = y + dy;\n            x = x + dx;\n          }\n\n          float poseScore = getPoses(i, k, 0);\n          float poseY = getPoses(i, k, 1);\n          float poseX = getPoses(i, k, 2);\n          if (poseScore > "+c+") {\n            numKpt = numKpt + 1;\n            curDistSum = curDistSum + dist(x, y, poseX, poseY);\n          }\n        }\n        if (numKpt > 0 && curDistSum / float(numKpt) < minDist) {\n          minDist = curDistSum / float(numKpt);\n          iMin = i;\n        }\n      }\n      return iMin;\n    }\n\n    void main() {\n        ivec2 coords = getOutputCoords();\n        int nearestPose = findNearestPose(coords[0], coords[1]);\n        setOutput(float(nearestPose));\n      }\n  "};return(0,r.backend)().compileAndRun(B,[e,v,O])}function D(){return"webgl"===(0,r.getBackend)()}function F(e,t,n,a,s,o,i,u,d,p,h,f){var m=i[0],g=i[1];return void 0===d&&(d=.2),void 0===p&&(p=8),void 0===h&&(h=.3),void 0===f&&(f=10),l(this,void 0,void 0,(function(){var i,l,y,x,b;return c(this,(function(c){switch(c.label){case 0:return i=n.filter((function(e){return e.score>=d})),D()?(y=(0,r.tidy)((function(){var n=O(e,t,i,a,s,o,[m,g],u,p,h,f),l=(0,r.engine)().makeTensorFromDataId(n.dataId,n.shape,n.dtype);return i.map((function(e,t){return function(e,t){return(0,r.tidy)((function(){return(0,r.cast)((0,r.equal)(e,(0,r.scalar)(t)),"int32")}))}(l,t)}))})),[4,Promise.all(y.map((function(e){return e.data()})))]):[3,2];case 1:return l=c.sent(),y.forEach((function(e){return e.dispose()})),[3,5];case 2:return[4,e.data()];case 3:return x=c.sent(),[4,t.data()];case 4:b=c.sent(),l=function(e,t,n,r,a,s,o,i,u,l){var c=o[0],d=o[1];void 0===l&&(l=5);for(var p=n.map((function(e){return new Uint8Array(r*a).fill(0)})),h=i.top,f=i.left,m=N([r,a],[c,d],i),g=m[0],y=m[1],x=A([c,d],s)[0],b=0;b<r;b+=1)for(var v=0;v<a;v+=1){var w=b*a+v;if(1===e[w]){var k=R({x:v,y:b},t,n,l,[h,f],[g,y],x,[r,a],s,u);k>=0&&(p[k][w]=1)}}return p}(x,b,i,a,s,o,[m,g],u,p),c.label=5;case 5:return[2,l.map((function(e,t){return{data:e,pose:i[t],width:s,height:a}}))]}}))}))}function B(e,t,n,a,s,o,i,u,d,p,h,f,m){var g=u[0],y=u[1];return void 0===p&&(p=.2),void 0===h&&(h=8),void 0===f&&(f=.3),void 0===m&&(m=10),l(this,void 0,void 0,(function(){var u,l,x,b,v,w;return c(this,(function(c){switch(c.label){case 0:return u=a.filter((function(e){return e.score>=p})),D()?(x=(0,r.tidy)((function(){var a=O(e,t,u,s,o,i,[g,y],d,h,f,m),l=(0,r.engine)().makeTensorFromDataId(a.dataId,a.shape,a.dtype);return u.map((function(e,t){return function(e,t,n){return(0,r.tidy)((function(){return(0,r.sub)((0,r.mul)((0,r.cast)((0,r.equal)(e,(0,r.scalar)(n)),"int32"),(0,r.add)(t,1)),1)}))}(l,n,t)}))})),[4,Promise.all(x.map((function(e){return e.data()})))]):[3,2];case 1:return l=c.sent(),x.forEach((function(e){return e.dispose()})),[3,6];case 2:return[4,e.data()];case 3:return b=c.sent(),[4,t.data()];case 4:return v=c.sent(),[4,n.data()];case 5:w=c.sent(),l=function(e,t,n,r,a,s,o,i,u,l,c){var d=i[0],p=i[1];void 0===c&&(c=5);for(var h=r.map((function(e){return new Int32Array(a*s).fill(-1)})),f=u.top,m=u.left,g=N([a,s],[d,p],u),y=g[0],x=g[1],b=A([d,p],o)[0],v=0;v<a;v+=1)for(var w=0;w<s;w+=1){var k=v*s+w;if(1===e[k]){var S=R({x:w,y:v},t,r,c,[f,m],[y,x],b,[a,s],o,l);S>=0&&(h[S][k]=n[k])}}return h}(b,v,w,u,s,o,i,[g,y],d,h),c.label=6;case 6:return[2,l.map((function(e,t){return{pose:u[t],data:e,height:s,width:o}}))]}}))}))}function M(e){return Math.floor(e/2)}[["leftHip","leftShoulder"],["leftElbow","leftShoulder"],["leftElbow","leftWrist"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["rightHip","rightShoulder"],["rightElbow","rightShoulder"],["rightElbow","rightWrist"],["rightHip","rightKnee"],["rightKnee","rightAnkle"],["leftShoulder","rightShoulder"],["leftHip","rightHip"]].map((function(e){var t=e[0],n=e[1];return[S[t],S[n]]}));var P=function(){function e(e,t){this.priorityQueue=new Array(e),this.numberOfElements=-1,this.getElementValue=t}return e.prototype.enqueue=function(e){this.priorityQueue[++this.numberOfElements]=e,this.swim(this.numberOfElements)},e.prototype.dequeue=function(){var e=this.priorityQueue[0];return this.exchange(0,this.numberOfElements--),this.sink(0),this.priorityQueue[this.numberOfElements+1]=null,e},e.prototype.empty=function(){return-1===this.numberOfElements},e.prototype.size=function(){return this.numberOfElements+1},e.prototype.all=function(){return this.priorityQueue.slice(0,this.numberOfElements+1)},e.prototype.max=function(){return this.priorityQueue[0]},e.prototype.swim=function(e){for(;e>0&&this.less(M(e),e);)this.exchange(e,M(e)),e=M(e)},e.prototype.sink=function(e){for(;2*e<=this.numberOfElements;){var t=2*e;if(t<this.numberOfElements&&this.less(t,t+1)&&t++,!this.less(e,t))break;this.exchange(e,t),e=t}},e.prototype.getValueAt=function(e){return this.getElementValue(this.priorityQueue[e])},e.prototype.less=function(e,t){return this.getValueAt(e)<this.getValueAt(t)},e.prototype.exchange=function(e,t){var n=this.priorityQueue[e];this.priorityQueue[e]=this.priorityQueue[t],this.priorityQueue[t]=n},e}();function L(e,t,n,r,a,s){for(var o=s.shape,i=o[0],u=o[1],l=!0,c=Math.max(n-a,0),d=Math.min(n+a+1,i),p=c;p<d;++p){for(var h=Math.max(r-a,0),f=Math.min(r+a+1,u),m=h;m<f;++m)if(s.get(p,m,e)>t){l=!1;break}if(!l)break}return l}var V=[["nose","leftEye"],["leftEye","leftEar"],["nose","rightEye"],["rightEye","rightEar"],["nose","leftShoulder"],["leftShoulder","leftElbow"],["leftElbow","leftWrist"],["leftShoulder","leftHip"],["leftHip","leftKnee"],["leftKnee","leftAnkle"],["nose","rightShoulder"],["rightShoulder","rightElbow"],["rightElbow","rightWrist"],["rightShoulder","rightHip"],["rightHip","rightKnee"],["rightKnee","rightAnkle"]].map((function(e){var t=e[0],n=e[1];return[S[t],S[n]]})),z=V.map((function(e){return e[1]})),U=V.map((function(e){return e[0]}));function W(e,t,n,r){return{y:$(Math.round(e.y/t),0,n-1),x:$(Math.round(e.x/t),0,r-1)}}function G(e,t,n,r,a,s,o,i){void 0===i&&(i=2);for(var u=r.shape,l=u[0],c=u[1],d=function(e,t,n){var r=n.shape[2]/2;return{y:n.get(t.y,t.x,e),x:n.get(t.y,t.x,r+e)}}(e,W(t.position,s,l,c),o),p=C(t.position,d),h=0;h<i;h++){var f=W(p,s,l,c),m=T(f.y,f.x,n,a);p=C({x:f.x*s,y:f.y*s},{x:m.x,y:m.y})}var g=W(p,s,l,c),y=r.get(g.y,g.x,n);return{position:p,part:w[n],score:y}}function H(e,t,n,r,a,s){var o=t.shape[2],i=z.length,u=new Array(o),l=e.part,c=e.score,d=I(l,r,n);u[l.id]={score:c,part:w[l.id],position:d};for(var p=i-1;p>=0;--p){var h=z[p],f=U[p];u[h]&&!u[f]&&(u[f]=G(p,u[h],f,t,n,r,s))}for(p=0;p<i;++p)h=U[p],f=z[p],u[h]&&!u[f]&&(u[f]=G(p,u[h],f,t,n,r,a));return u}function q(e,t,n,r){var a=n.x,s=n.y;return e.some((function(e){var n,o,i,u,l=e.keypoints[r].position;return n=s,o=a,(i=l.y-n)*i+(u=l.x-o)*u<=t}))}function X(e,t,n){var r=n.reduce((function(n,r,a){var s=r.position,o=r.score;return q(e,t,s,a)||(n+=o),n}),0);return r/n.length}function K(e,t,n,r,a,s,o,i){void 0===o&&(o=.5),void 0===i&&(i=20);for(var u=[],l=function(e,t,n){for(var r=n.shape,a=r[0],s=r[1],o=r[2],i=new P(a*s*o,(function(e){return e.score})),u=0;u<a;++u)for(var l=0;l<s;++l)for(var c=0;c<o;++c){var d=n.get(u,l,c);d<e||L(c,d,u,l,1,n)&&i.enqueue({score:d,part:{heatmapY:u,heatmapX:l,id:c}})}return i}(o,0,e),c=i*i;u.length<s&&!l.empty();){var d=l.dequeue();if(!q(u,c,I(d.part,a,t),d.part.id)){var p=H(d,e,t,a,n,r),h=X(u,c,p);u.push({keypoints:p,score:h})}}return u}var j,Y=[-123.15,-115.9,-103.06],Q=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return i(t,e),t.prototype.preprocessInput=function(e){return(0,r.add)(e,Y)},t.prototype.nameOutputResults=function(e){var t=e[0],n=e[1],r=e[2],a=e[3],s=e[4],o=e[5];return{offsets:s,segmentation:e[6],partHeatmaps:o,longOffsets:a,heatmap:r,displacementFwd:n,displacementBwd:t,partOffsets:e[7]}},t}(b),Z="https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/resnet50/",J="https://storage.googleapis.com/tfjs-models/savedmodel/bodypix/mobilenet/";function ee(e){if("undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas||"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement)return function(e){if("offsetHeight"in e&&0!==e.offsetHeight&&"offsetWidth"in e&&0!==e.offsetWidth)return[e.offsetHeight,e.offsetWidth];if(null!=e.height&&null!=e.width)return[e.height,e.width];throw new Error("HTMLImageElement must have height and width attributes set.")}(e);if("undefined"!=typeof ImageData&&e instanceof ImageData)return[e.height,e.width];if("undefined"!=typeof HTMLVideoElement&&e instanceof HTMLVideoElement)return function(e){return e.hasAttribute("height")&&e.hasAttribute("width")?[e.height,e.width]:[e.videoHeight,e.videoWidth]}(e);if(e instanceof r.Tensor)return[e.shape[0],e.shape[1]];throw new Error("error: Unknown input type: "+e+".")}function te(e,t){return function(e,t){return(e-1)%t==0}(e,t)?e:Math.floor(e/t)*t+1}var ne={low:"low",medium:"medium",high:"high",full:"full"},re=((j={})[ne.low]=.25,j[ne.medium]=.5,j[ne.high]=.75,j[ne.full]=1,j);function ae(e,t,n){var a=n[0],s=n[1],o=function(e){if("string"==typeof e){var t=re[e];return r.util.assert("number"==typeof t,(function(){return"string value of inputResolution must be one of "+Object.values(ne).join(",")+" but was "+e+"."})),t}return r.util.assert("number"==typeof e&&e<=2&&e>=.1,(function(){return"inputResolution must be a string or number between 0.1 and 2, but was "+e})),e}(e);return[te(a*o,t),te(s*o,t)]}function se(e,t,n,a,s){var o=t[0],i=t[1],u=n[0],l=n[1],c=a[0],d=c[0],p=c[1],h=a[1],f=h[0],m=h[1];return void 0===s&&(s=!1),(0,r.tidy)((function(){var t=r.image.resizeBilinear(e,[u,l],!0);return s&&(t=(0,r.sigmoid)(t)),function(e,t,n){var a=t[0],s=t[1],o=n[0],i=o[0],u=o[1],l=n[1],c=l[0],d=l[1];return(0,r.tidy)((function(){var t=(0,r.expandDims)(e);return(0,r.squeeze)(r.image.cropAndResize(t,[[i/(a+i+u-1),c/(s+c+d-1),(i+a-1)/(a+i+u-1),(c+s-1)/(s+c+d-1)]],[0],[a,s]),[0])}))}(t,[o,i],[[d,p],[f,m]])}))}function oe(e,t){var n=t[0],a=t[1],s=ee(e),o=s[0],i=s[1],u=a/n,l=[0,0,0,0],c=l[0],d=l[1],p=l[2],h=l[3];i/o<u?(c=0,d=0,p=Math.round(.5*(u*o-i)),h=Math.round(.5*(u*o-i))):(c=Math.round(.5*(1/u*i-o)),d=Math.round(.5*(1/u*i-o)),p=0,h=0);var f=(0,r.tidy)((function(){var t=function(e){return e instanceof r.Tensor?e:r.browser.fromPixels(e)}(e);return t=(0,r.pad3d)(t,[[c,d],[p,h],[0,0]]),r.image.resizeBilinear(t,[n,a])}));return{resized:f,padding:{top:c,left:p,right:h,bottom:d}}}function ie(e){return l(this,void 0,void 0,(function(){return c(this,(function(t){return[2,Promise.all(e.map((function(e){return e.buffer()})))]}))}))}function ue(e,t,n,r,a){var s=t[0],o=t[1],i=n[0],u=n[1],l=function(e,t,n,r,a){return void 0===r&&(r=0),void 0===a&&(a=0),1===n&&1===t&&0===r&&0===a?e:e.map((function(e){return function(e,t,n,r,a){return void 0===r&&(r=0),void 0===a&&(a=0),{score:e.score,keypoints:e.keypoints.map((function(e){var s=e.score,o=e.part,i=e.position;return{score:s,part:o,position:{x:i.x*n+a,y:i.y*t+r}}}))}}(e,t,n,r,a)}))}(e,(s+r.top+r.bottom)/i,(o+r.left+r.right)/u,-r.top,-r.left);return a?function(e,t){return t<=0?e:e.map((function(e){return function(e,t){return{score:e.score,keypoints:e.keypoints.map((function(e){var n=e.score,r=e.part,a=e.position;return{score:n,part:r,position:{x:t-1-a.x,y:a.y}}}))}}(e,t)}))}(l,o):l}var le={architecture:"MobileNetV1",outputStride:16,quantBytes:4,multiplier:.75},ce=["MobileNetV1","ResNet50"],de={MobileNetV1:[8,16,32],ResNet50:[32,16]},pe={MobileNetV1:[.5,.75,1],ResNet50:[1]},he=[1,2,4],fe={flipHorizontal:!1,internalResolution:"medium",segmentationThreshold:.7,maxDetections:10,scoreThreshold:.4,nmsRadius:20},me={flipHorizontal:!1,internalResolution:"medium",segmentationThreshold:.7,maxDetections:10,scoreThreshold:.4,nmsRadius:20,minKeypointScore:.3,refineSteps:10};function ge(e){var t=e.segmentationThreshold,n=e.maxDetections,r=e.scoreThreshold,a=e.nmsRadius;if(t<0||t>1)throw new Error("segmentationThreshold "+t+". Should be in range [0.0, 1.0]");if(n<=0)throw new Error("Invalid maxDetections "+n+". Should be > 0");if(r<0||r>1)throw new Error("Invalid scoreThreshold "+r+". Should be in range [0.0, 1.0]");if(a<=0)throw new Error("Invalid nmsRadius "+a+".")}function ye(e){var t=e.segmentationThreshold,n=e.maxDetections,r=e.scoreThreshold,a=e.nmsRadius,s=e.minKeypointScore,o=e.refineSteps;if(t<0||t>1)throw new Error("segmentationThreshold "+t+". Should be in range [0.0, 1.0]");if(n<=0)throw new Error("Invalid maxDetections "+n+". Should be > 0");if(r<0||r>1)throw new Error("Invalid scoreThreshold "+r+". Should be in range [0.0, 1.0]");if(a<=0)throw new Error("Invalid nmsRadius "+a+".");if(s<0||s>1)throw new Error("Invalid minKeypointScore "+s+".Should be in range [0.0, 1.0]");if(o<=0||o>20)throw new Error("Invalid refineSteps "+o+".Should be in range [1, 20]")}var xe=function(){function e(e){this.baseModel=e}return e.prototype.predictForPersonSegmentation=function(e){var t=this.baseModel.predict(e);return{segmentLogits:t.segmentation,heatmapScores:t.heatmapScores,offsets:t.offsets,displacementFwd:t.displacementFwd,displacementBwd:t.displacementBwd}},e.prototype.predictForPersonSegmentationAndPart=function(e){var t=this.baseModel.predict(e);return{segmentLogits:t.segmentation,partHeatmapLogits:t.partHeatmaps,heatmapScores:t.heatmapScores,offsets:t.offsets,displacementFwd:t.displacementFwd,displacementBwd:t.displacementBwd}},e.prototype.predictForMultiPersonInstanceSegmentationAndPart=function(e){var t=this.baseModel.predict(e);return{segmentLogits:t.segmentation,longOffsets:t.longOffsets,heatmapScores:t.heatmapScores,offsets:t.offsets,displacementFwd:t.displacementFwd,displacementBwd:t.displacementBwd,partHeatmaps:t.partHeatmaps}},e.prototype.segmentPersonActivation=function(e,t,n){var a=this;void 0===n&&(n=.5);var s=ee(e),o=s[0],i=s[1],u=ae(t,this.baseModel.outputStride,[o,i]),l=oe(e,u),c=l.resized,d=l.padding,p=(0,r.tidy)((function(){var e=a.predictForPersonSegmentation(c),t=e.segmentLogits,s=e.heatmapScores,u=e.offsets,l=e.displacementFwd,p=e.displacementBwd,h=c.shape,f=h[0],m=h[1],g=se(t,[o,i],[f,m],[[d.top,d.bottom],[d.left,d.right]],!0);return{segmentation:y((0,r.squeeze)(g),n),heatmapScores:s,offsets:u,displacementFwd:l,displacementBwd:p}})),h=p.segmentation,f=p.heatmapScores,m=p.offsets,g=p.displacementFwd,x=p.displacementBwd;return c.dispose(),{segmentation:h,heatmapScores:f,offsets:m,displacementFwd:g,displacementBwd:x,padding:d,internalResolutionHeightAndWidth:u}},e.prototype.segmentPerson=function(e,t){return void 0===t&&(t=fe),l(this,void 0,void 0,(function(){var n,r,a,s,o,i,l,d,p,h,f,m,g,y,x,b,v,w;return c(this,(function(c){switch(c.label){case 0:return ge(t=u(u({},fe),t)),n=this.segmentPersonActivation(e,t.internalResolution,t.segmentationThreshold),r=n.segmentation,a=n.heatmapScores,s=n.offsets,o=n.displacementFwd,i=n.displacementBwd,l=n.padding,d=n.internalResolutionHeightAndWidth,p=r.shape,h=p[0],f=p[1],[4,r.data()];case 1:return m=c.sent(),r.dispose(),[4,ie([a,s,o,i])];case 2:return g=c.sent(),y=g[0],x=g[1],b=g[2],v=g[3],w=ue(w=K(y,x,b,v,this.baseModel.outputStride,t.maxDetections,t.scoreThreshold,t.nmsRadius),[h,f],d,l,!1),a.dispose(),s.dispose(),o.dispose(),i.dispose(),[2,{height:h,width:f,data:m,allPoses:w}]}}))}))},e.prototype.segmentMultiPerson=function(e,t){return void 0===t&&(t=me),l(this,void 0,void 0,(function(){var n,a,s,o,i,l,d,p,h,f,m,g,x,b,v,w,k,S,N,T,I,$=this;return c(this,(function(c){switch(c.label){case 0:return ye(t=u(u({},me),t)),n=ee(e),a=n[0],s=n[1],o=ae(t.internalResolution,this.baseModel.outputStride,[a,s]),i=oe(e,o),l=i.resized,d=i.padding,p=(0,r.tidy)((function(){var e,n=$.predictForMultiPersonInstanceSegmentationAndPart(l),i=n.segmentLogits,u=n.longOffsets,c=n.heatmapScores,p=n.offsets,h=n.displacementFwd,f=n.displacementBwd,m=se(i,[a,s],o,[[d.top,d.bottom],[d.left,d.right]],!0);return e=u,{segmentation:y((0,r.squeeze)(m),t.segmentationThreshold),longOffsets:e,heatmapScoresRaw:c,offsetsRaw:p,displacementFwdRaw:h,displacementBwdRaw:f}})),h=p.segmentation,f=p.longOffsets,m=p.heatmapScoresRaw,g=p.offsetsRaw,x=p.displacementFwdRaw,b=p.displacementBwdRaw,[4,ie([m,g,x,b])];case 1:return v=c.sent(),w=v[0],k=v[1],S=v[2],N=v[3],T=ue(T=K(w,k,S,N,this.baseModel.outputStride,t.maxDetections,t.scoreThreshold,t.nmsRadius),[a,s],o,d,!1),[4,F(h,f,T,a,s,this.baseModel.outputStride,o,d,t.scoreThreshold,t.refineSteps,t.minKeypointScore,t.maxDetections)];case 2:return I=c.sent(),l.dispose(),h.dispose(),f.dispose(),m.dispose(),g.dispose(),x.dispose(),b.dispose(),[2,I]}}))}))},e.prototype.segmentPersonPartsActivation=function(e,t,n){var a=this;void 0===n&&(n=.5);var s=ee(e),o=s[0],i=s[1],u=ae(t,this.baseModel.outputStride,[o,i]),l=oe(e,u),c=l.resized,d=l.padding,p=(0,r.tidy)((function(){var e=a.predictForPersonSegmentationAndPart(c),t=e.segmentLogits,s=e.partHeatmapLogits,u=e.heatmapScores,l=e.offsets,p=e.displacementFwd,h=e.displacementBwd,f=c.shape,m=f[0],g=f[1],b=se(t,[o,i],[m,g],[[d.top,d.bottom],[d.left,d.right]],!0),v=se(s,[o,i],[m,g],[[d.top,d.bottom],[d.left,d.right]],!0);return{partSegmentation:x(y((0,r.squeeze)(b),n),v),heatmapScores:u,offsets:l,displacementFwd:p,displacementBwd:h}})),h=p.partSegmentation,f=p.heatmapScores,m=p.offsets,g=p.displacementFwd,b=p.displacementBwd;return c.dispose(),{partSegmentation:h,heatmapScores:f,offsets:m,displacementFwd:g,displacementBwd:b,padding:d,internalResolutionHeightAndWidth:u}},e.prototype.segmentPersonParts=function(e,t){return void 0===t&&(t=fe),l(this,void 0,void 0,(function(){var n,r,a,s,o,i,l,d,p,h,f,m,g,y,x,b,v,w;return c(this,(function(c){switch(c.label){case 0:return ge(t=u(u({},fe),t)),n=this.segmentPersonPartsActivation(e,t.internalResolution,t.segmentationThreshold),r=n.partSegmentation,a=n.heatmapScores,s=n.offsets,o=n.displacementFwd,i=n.displacementBwd,l=n.padding,d=n.internalResolutionHeightAndWidth,p=r.shape,h=p[0],f=p[1],[4,r.data()];case 1:return m=c.sent(),r.dispose(),[4,ie([a,s,o,i])];case 2:return g=c.sent(),y=g[0],x=g[1],b=g[2],v=g[3],w=ue(w=K(y,x,b,v,this.baseModel.outputStride,t.maxDetections,t.scoreThreshold,t.nmsRadius),[h,f],d,l,!1),a.dispose(),s.dispose(),o.dispose(),i.dispose(),[2,{height:h,width:f,data:m,allPoses:w}]}}))}))},e.prototype.segmentMultiPersonParts=function(e,t){return void 0===t&&(t=me),l(this,void 0,void 0,(function(){var n,a,s,o,i,l,d,p,h,f,m,x,b,v,w,k,S,N,T,I,$,C,E=this;return c(this,(function(c){switch(c.label){case 0:return ye(t=u(u({},me),t)),n=ee(e),a=n[0],s=n[1],o=ae(t.internalResolution,this.baseModel.outputStride,[a,s]),i=oe(e,o),l=i.resized,d=i.padding,p=(0,r.tidy)((function(){var e=E.predictForMultiPersonInstanceSegmentationAndPart(l),n=e.segmentLogits,i=e.longOffsets,u=e.heatmapScores,c=e.offsets,p=e.displacementFwd,h=e.displacementBwd,f=e.partHeatmaps,m=se(n,[a,s],o,[[d.top,d.bottom],[d.left,d.right]],!0),x=se(f,[a,s],o,[[d.top,d.bottom],[d.left,d.right]],!0),b=i,v=y((0,r.squeeze)(m),t.segmentationThreshold),w=function(e){var t=e.shape,n=t[0],a=t[1],s=t[2];return(0,r.tidy)((function(){var t=g(e),o=(0,r.expandDims)((0,r.range)(0,s,1,"int32"),1),i=(0,r.cast)((0,r.matMul)(t,o),"int32");return(0,r.reshape)(i,[n,a])}))}(x);return{segmentation:v,longOffsets:b,heatmapScoresRaw:u,offsetsRaw:c,displacementFwdRaw:p,displacementBwdRaw:h,partSegmentation:w}})),h=p.segmentation,f=p.longOffsets,m=p.heatmapScoresRaw,x=p.offsetsRaw,b=p.displacementFwdRaw,v=p.displacementBwdRaw,w=p.partSegmentation,[4,ie([m,x,b,v])];case 1:return k=c.sent(),S=k[0],N=k[1],T=k[2],I=k[3],$=ue($=K(S,N,T,I,this.baseModel.outputStride,t.maxDetections,t.scoreThreshold,t.nmsRadius),[a,s],o,d,!1),[4,B(h,f,w,$,a,s,this.baseModel.outputStride,o,d,t.scoreThreshold,t.refineSteps,t.minKeypointScore,t.maxDetections)];case 2:return C=c.sent(),l.dispose(),h.dispose(),f.dispose(),m.dispose(),x.dispose(),b.dispose(),v.dispose(),w.dispose(),[2,C]}}))}))},e.prototype.dispose=function(){this.baseModel.dispose()},e}();function be(e){return l(this,void 0,void 0,(function(){var t,n,s,o,i,u;return c(this,(function(l){switch(l.label){case 0:if(t=e.outputStride,n=e.quantBytes,s=e.multiplier,null==r)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return o=function(e,t,n){var r={1:"100",.75:"075",.5:"050"},a="model-stride"+e+".json";return 4===n?J+"float/"+r[t]+"/"+a:J+"quant"+n+"/"+r[t]+"/"+a}(t,s,n),[4,(0,a.YL)(e.modelUrl||o)];case 1:return i=l.sent(),u=new v(i,t),[2,new xe(u)]}}))}))}function ve(e){return l(this,void 0,void 0,(function(){var t,n,s,o,i;return c(this,(function(u){switch(u.label){case 0:if(t=e.outputStride,n=e.quantBytes,null==r)throw new Error("Cannot find TensorFlow.js. If you are using a <script> tag, please also include @tensorflow/tfjs on the page before using this\n        model.");return s=function(e,t){var n="model-stride"+e+".json";return 4===t?Z+"float/"+n:Z+"quant"+t+"/"+n}(t,n),[4,(0,a.YL)(e.modelUrl||s)];case 1:return o=u.sent(),i=new Q(o,t),[2,new xe(i)]}}))}))}function we(e){return void 0===e&&(e=le),l(this,void 0,void 0,(function(){return c(this,(function(t){return"ResNet50"===(e=function(e){if(null==(e=e||le).architecture&&(e.architecture="MobileNetV1"),ce.indexOf(e.architecture)<0)throw new Error("Invalid architecture "+e.architecture+". Should be one of "+ce);if(null==e.outputStride&&(e.outputStride=16),de[e.architecture].indexOf(e.outputStride)<0)throw new Error("Invalid outputStride "+e.outputStride+". Should be one of "+de[e.architecture]+" for architecture "+e.architecture+".");if(null==e.multiplier&&(e.multiplier=1),pe[e.architecture].indexOf(e.multiplier)<0)throw new Error("Invalid multiplier "+e.multiplier+". Should be one of "+pe[e.architecture]+" for architecture "+e.architecture+".");if(null==e.quantBytes&&(e.quantBytes=4),he.indexOf(e.quantBytes)<0)throw new Error("Invalid quantBytes "+e.quantBytes+". Should be one of "+he+" for architecture "+e.architecture+".");return e}(e)).architecture?[2,ve(e)]:"MobileNetV1"===e.architecture?[2,be(e)]:[2,null]}))}))}var ke=["left_face","right_face","left_upper_arm_front","left_upper_arm_back","right_upper_arm_front","right_upper_arm_back","left_lower_arm_front","left_lower_arm_back","right_lower_arm_front","right_lower_arm_back","left_hand","right_hand","torso_front","torso_back","left_upper_leg_front","left_upper_leg_back","right_upper_leg_front","right_upper_leg_back","left_lower_leg_front","left_lower_leg_back","right_lower_leg_front","right_lower_leg_back","left_feet","right_feet"],Se=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,p(this.mask)]}))}))},e.prototype.toImageData=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.mask]}))}))},e.prototype.toTensor=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,f(this.mask)]}))}))},e.prototype.getUnderlyingType=function(){return"imagedata"},e}();function Ne(e){if(m(e),255!==e)throw new Error("Foreground id must be 255 but got "+e);return"person"}function Te(e){if(m(e),e>=ke.length)throw new Error("Invalid body part value "+e);return ke[e]}var Ie=function(){function e(e){this.bodyPixModel=e}return e.prototype.segmentPeople=function(e,t){return l(this,void 0,void 0,(function(){var n,r,a,s;return c(this,(function(o){switch(o.label){case 0:return e instanceof ImageBitmap&&((n=document.createElement("canvas")).getContext("2d").drawImage(e,0,0),e=n),t.segmentBodyParts?t.multiSegmentation?[4,this.bodyPixModel.segmentMultiPersonParts(e,t)]:[3,2]:[3,5];case 1:return a=o.sent(),[3,4];case 2:return[4,this.bodyPixModel.segmentPersonParts(e,t)];case 3:a=[o.sent()],o.label=4;case 4:return r=a.map((function(e){var t=e.data,n=e.width,r=e.height,a=new Uint8ClampedArray(n*r*4).fill(0);return t.forEach((function(e,t){-1===e?(a[4*t]=ke.length,a[4*t+3]=0):(a[4*t]=e,a[4*t+3]=255)})),{maskValueToLabel:Te,mask:new Se(new ImageData(a,n,r))}})),[3,10];case 5:return t.multiSegmentation?[4,this.bodyPixModel.segmentMultiPerson(e,t)]:[3,7];case 6:return s=o.sent(),[3,9];case 7:return[4,this.bodyPixModel.segmentPerson(e,t)];case 8:s=[o.sent()],o.label=9;case 9:r=s.map((function(e){var t=e.data,n=e.width,r=e.height,a=new Uint8ClampedArray(n*r*4).fill(0);return t.forEach((function(e,t){0===e?(a[4*t]=0,a[4*t+3]=0):(a[4*t]=255,a[4*t+3]=255)})),{maskValueToLabel:Ne,mask:new Se(new ImageData(a,n,r))}})),o.label=10;case 10:return[2,r]}}))}))},e.prototype.dispose=function(){this.bodyPixModel.dispose()},e.prototype.reset=function(){},e}();function $e(e){return l(this,void 0,void 0,(function(){return c(this,(function(t){return[2,we(e).then((function(e){return new Ie(e)}))]}))}))}var Ce={runtime:"mediapipe",modelType:"general"},Ee=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.mask]}))}))},e.prototype.toImageData=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,h(this.mask)]}))}))},e.prototype.toTensor=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,f(this.mask)]}))}))},e.prototype.getUnderlyingType=function(){return"canvasimagesource"},e}();function _e(e){return m(e),"person"}var Re=function(){function e(e){var t,n=this;this.selfieMode=!1,this.selfieSegmentationSolution=new s.SelfieSegmentation({locateFile:function(t,n){return e.solutionPath?e.solutionPath.replace(/\/+$/,"")+"/"+t:n+"/"+t}}),t="landscape"===e.modelType?1:0,this.selfieSegmentationSolution.setOptions({modelSelection:t,selfieMode:this.selfieMode}),this.selfieSegmentationSolution.onResults((function(e){n.segmentation=[{maskValueToLabel:_e,mask:new Ee(e.segmentationMask)}]}))}return e.prototype.segmentPeople=function(e,t){return l(this,void 0,void 0,(function(){var n,a;return c(this,(function(s){switch(s.label){case 0:return t&&t.flipHorizontal&&t.flipHorizontal!==this.selfieMode&&(this.selfieMode=t.flipHorizontal,this.selfieSegmentationSolution.setOptions({selfieMode:this.selfieMode})),e instanceof r.Tensor?(a=ImageData.bind,[4,r.browser.toPixels(e)]):[3,2];case 1:return n=new(a.apply(ImageData,[void 0,s.sent(),e.shape[1],e.shape[0]])),[3,3];case 2:n=e,s.label=3;case 3:return e=n,[4,this.selfieSegmentationSolution.send({image:e})];case 4:return s.sent(),[2,this.segmentation]}}))}))},e.prototype.dispose=function(){this.selfieSegmentationSolution.close()},e.prototype.reset=function(){this.selfieSegmentationSolution.reset(),this.segmentation=null,this.selfieMode=!1},e.prototype.initialize=function(){return this.selfieSegmentationSolution.initialize()},e}();function Ae(e){return l(this,void 0,void 0,(function(){var t,n;return c(this,(function(r){switch(r.label){case 0:return t=function(e){if(null==e)return u({},Ce);var t=u({},e);return t.runtime="mediapipe",null==t.modelType&&(t.modelType=Ce.modelType),t}(e),[4,(n=new Re(t)).initialize()];case 1:return r.sent(),[2,n]}}))}))}function Oe(e){return e instanceof r.Tensor?{height:e.shape[0],width:e.shape[1]}:{height:e.height,width:e.width}}function De(e,t){r.util.assert(0!==e.width,(function(){return t+" width cannot be 0."})),r.util.assert(0!==e.height,(function(){return t+" height cannot be 0."}))}function Fe(e,t,n){var a=t.outputTensorSize,s=t.keepAspectRatio,o=t.borderMode,i=t.outputTensorFloatRange,u=Oe(e),l=function(e,t){return t?{xCenter:t.xCenter*e.width,yCenter:t.yCenter*e.height,width:t.width*e.width,height:t.height*e.height,rotation:t.rotation}:{xCenter:.5*e.width,yCenter:.5*e.height,width:e.width,height:e.height,rotation:0}}(u,n),c=function(e,t,n){if(void 0===n&&(n=!1),!n)return{top:0,left:0,right:0,bottom:0};var r=t.height,a=t.width;De(t,"targetSize"),De(e,"roi");var s,o,i=r/a,u=e.height/e.width,l=0,c=0;return i>u?(s=e.width,o=e.width*i,c=(1-u/i)/2):(s=e.height/i,o=e.height,l=(1-i/u)/2),e.width=s,e.height=o,{top:c,left:l,right:l,bottom:c}}(l,a,s),d=function(e,t,n,r){var a=e.width,s=e.height,o=r?-1:1,i=Math.cos(e.rotation),u=Math.sin(e.rotation),l=e.xCenter,c=e.yCenter,d=1/t,p=1/n,h=new Array(16);return h[0]=a*i*o*d,h[1]=-s*u*d,h[2]=0,h[3]=(-.5*a*i*o+.5*s*u+l)*d,h[4]=a*u*o*p,h[5]=s*i*p,h[6]=0,h[7]=(-.5*s*i-.5*a*u*o+c)*p,h[8]=0,h[9]=0,h[10]=a*d,h[11]=0,h[12]=0,h[13]=0,h[14]=0,h[15]=1,function(e){if(16!==e.length)throw new Error("Array length must be 16 but got "+e.length);return[[e[0],e[1],e[2],e[3]],[e[4],e[5],e[6],e[7]],[e[8],e[9],e[10],e[11]],[e[12],e[13],e[14],e[15]]]}(h)}(l,u.width,u.height,!1),p=(0,r.tidy)((function(){var t,n=(t=e)instanceof r.Tensor?t:r.browser.fromPixels(t),s=(0,r.tensor2d)(function(e,t,n){return De(n,"inputResolution"),[1/n.width*e[0][0]*t.width,1/n.height*e[0][1]*t.width,e[0][3]*t.width,1/n.width*e[1][0]*t.height,1/n.height*e[1][1]*t.height,e[1][3]*t.height,0,0]}(d,u,a),[1,8]),l="zero"===o?"constant":"nearest",c=r.image.transform((0,r.expandDims)((0,r.cast)(n,"float32")),s,"bilinear",l,0,[a.height,a.width]);return null!=i?function(e,t){var n=function(e,t,n,r){var a=(r-n)/255;return{scale:a,offset:n-0*a}}(0,0,t[0],t[1]);return(0,r.tidy)((function(){return(0,r.add)((0,r.mul)(e,n.scale),n.offset)}))}(c,i):c}));return{imageTensor:p,padding:c,transformationMatrix:d}}var Be={runtime:"tfjs",modelType:"general",modelUrl:"https://tfhub.dev/mediapipe/tfjs-model/selfie_segmentation/general/1"},Me={flipHorizontal:!1},Pe={outputTensorSize:{width:256,height:256},keepAspectRatio:!1,borderMode:"zero",outputTensorFloatRange:[0,1]},Le={outputTensorSize:{width:256,height:144},keepAspectRatio:!1,borderMode:"zero",outputTensorFloatRange:[0,1]},Ve={activation:"none"},ze=function(){function e(e){this.mask=e}return e.prototype.toCanvasImageSource=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,p(this.mask)]}))}))},e.prototype.toImageData=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,h(this.mask)]}))}))},e.prototype.toTensor=function(){return l(this,void 0,void 0,(function(){return c(this,(function(e){return[2,this.mask]}))}))},e.prototype.getUnderlyingType=function(){return"tensor"},e}();function Ue(e){return m(e),"person"}var We,Ge,He=function(){function e(e,t){this.modelType=e,this.model=t}return e.prototype.segmentPeople=function(e,t){return l(this,void 0,void 0,(function(){var n,a=this;return c(this,(function(s){return t=function(e){if(null==e)return u({},Me);var t=u({},e);return null==t.flipHorizontal&&(t.flipHorizontal=Me.flipHorizontal),t}(t),null==e?(this.reset(),[2,[]]):(n=(0,r.tidy)((function(){var t=Fe(e,"general"===a.modelType?Pe:Le).imageTensor,n=(0,r.slice)(a.model.predict(t),[0,0,0,1],-1),s=Oe(e),o=function(e,t,n){return(0,r.tidy)((function(){var a=(0,r.squeeze)(e,[0]),s=a.shape[2];if(1===s){var o=a;switch(t.activation){case"none":break;case"sigmoid":o=(0,r.sigmoid)(o);break;case"softmax":throw new Error("Softmax activation requires two channels.");default:throw new Error("Activation not supported ("+t.activation+")")}var i=n?r.image.resizeBilinear(o,[n.height,n.width]):o;return(0,r.squeeze)(i,[2])}throw new Error("Unsupported number of tensor channels "+s)}))}(n,Ve,s),i=(0,r.expandDims)(o,2),u=(0,r.pad)(i,[[0,0],[0,0],[0,1]]);return(0,r.mirrorPad)(u,[[0,0],[0,0],[0,2]],"symmetric")})),[2,[{maskValueToLabel:Ue,mask:new ze(n)}]])}))}))},e.prototype.dispose=function(){this.model.dispose()},e.prototype.reset=function(){},e}();function qe(e){return l(this,void 0,void 0,(function(){var t,n,r;return c(this,(function(s){switch(s.label){case 0:return t=function(e){if(null==e)return u({},Be);var t=u({},e);if(t.runtime="tfjs",null==t.modelType&&(t.modelType=Be.modelType),"general"!==t.modelType&&"landscape"!==t.modelType)throw new Error("Model type must be one of general or landscape, but got "+t.modelType);return null==t.modelUrl&&("general"===t.modelType?t.modelUrl="https://tfhub.dev/mediapipe/tfjs-model/selfie_segmentation/general/1":t.modelUrl="https://tfhub.dev/mediapipe/tfjs-model/selfie_segmentation/landscape/1"),t}(e),n="string"==typeof t.modelUrl&&t.modelUrl.indexOf("https://tfhub.dev")>-1,[4,(0,a.YL)(t.modelUrl,{fromTFHub:n})];case 1:return r=s.sent(),[2,new He(t.modelType,r)]}}))}))}function Xe(e,t){return l(this,void 0,void 0,(function(){var n,r;return c(this,(function(a){switch(e){case We.MediaPipeSelfieSegmentation:if(n=void 0,null!=(r=t)){if("tfjs"===r.runtime)return[2,qe(r)];if("mediapipe"===r.runtime)return[2,Ae(r)];n=r.runtime}throw new Error("Expect modelConfig.runtime to be either 'tfjs' or 'mediapipe', but got "+n);case We.BodyPix:return[2,$e(r=t)];default:throw new Error(e+" is not a supported model name.")}}))}))}(Ge=We||(We={})).BodyPix="BodyPix",Ge.MediaPipeSelfieSegmentation="MediaPipeSelfieSegmentation";function Ke(e,t,n,r,a,s){void 0===s&&(s={r:0,g:255,b:255,a:255});for(var o=-a;o<=a;o++)for(var i=-a;i<=a;i++)if(0!==o&&0!==i){var u=(t+o)*r+(n+i);e[4*u+0]=s.r,e[4*u+1]=s.g,e[4*u+2]=s.b,e[4*u+3]=s.a}}function je(e,t,n,r,a,s,o){void 0===o&&(o=1);for(var i=0,u=-o;u<=o;u++)for(var l=-o;l<=o;l++)if(0!==u&&0!==l){var c=(t+u)*r+(n+l);(!a[e[4*c]]||e[4*c+3]<s)&&(i+=1)}return i>0}function Ye(e,t,n,r,a,s){return void 0===t&&(t={r:0,g:0,b:0,a:0}),void 0===n&&(n={r:0,g:0,b:0,a:255}),void 0===r&&(r=!1),void 0===a&&(a=.5),void 0===s&&(s=Array.from(Array(256).keys())),l(this,void 0,void 0,(function(){var o,i,u,l,d,p,h,f,m,g,y,x,b,v;return c(this,(function(c){switch(c.label){case 0:return 0===(o=Array.isArray(e)?e:[e]).length?[2,null]:[4,Promise.all(o.map((function(e){return e.mask.toImageData()})))];case 1:for(i=c.sent(),u=i[0],l=u.width,d=u.height,p=new Uint8ClampedArray(l*d*4),h=Math.round(255*a),f=new Array(256).fill(!1),s.forEach((function(e){return f[e]=!0})),m=0;m<d;m++)for(g=0;g<l;g++)for(p[4*(y=m*l+g)+0]=n.r,p[4*y+1]=n.g,p[4*y+2]=n.b,p[4*y+3]=n.a,x=0,b=i;x<b.length;x++)v=b[x],f[v.data[4*y]]&&v.data[4*y+3]>=h&&(p[4*y]=t.r,p[4*y+1]=t.g,p[4*y+2]=t.b,p[4*y+3]=t.a,r&&m-1>=0&&m+1<d&&g-1>=0&&g+1<l&&je(v.data,m,g,l,f,h)&&Ke(p,m,g,l,1));return[2,new ImageData(p,l,d)]}}))}))}},5439:(e,t,n)=>{"use strict";var r={};n.r(r),n.d(r,{addImpl:()=>Ke,bincountImpl:()=>Ye,bincountReduceImpl:()=>Qe,ceilImpl:()=>tt,concatImpl:()=>nt,equalImpl:()=>rt,expImpl:()=>at,expm1Impl:()=>st,floorImpl:()=>ot,gatherNdImpl:()=>it,gatherV2Impl:()=>ut,greaterEqualImpl:()=>ct,greaterImpl:()=>lt,lessEqualImpl:()=>pt,lessImpl:()=>dt,linSpaceImpl:()=>ht,logImpl:()=>ft,maxImpl:()=>mt,maximumImpl:()=>gt,minimumImpl:()=>yt,multiplyImpl:()=>xt,negImpl:()=>vt,notEqualImpl:()=>wt,prodImpl:()=>St,rangeImpl:()=>Nt,rsqrtImpl:()=>Tt,scatterImpl:()=>It,sigmoidImpl:()=>$t,simpleAbsImpl:()=>Le,sliceImpl:()=>Ct,sparseFillEmptyRowsImpl:()=>Et,sparseReshapeImpl:()=>_t,sparseSegmentReductionImpl:()=>Rt,sqrtImpl:()=>At,squaredDifferenceImpl:()=>Ot,stridedSliceImpl:()=>Dt,stringNGramsImpl:()=>Bt,stringSplitImpl:()=>Pt,stringToHashBucketFastImpl:()=>Lt,subImpl:()=>Vt,tileImpl:()=>Ut,topKImpl:()=>Ht,transposeImpl:()=>kt,uniqueImpl:()=>qt});var a=n(37);const s={},o={alpha:!1,antialias:!1,premultipliedAlpha:!1,preserveDrawingBuffer:!1,depth:!1,stencil:!1,failIfMajorPerformanceCaveat:!0};function i(e,t){if(!(e in s)||null!=t){const n=function(e,t){if(1!==e&&2!==e)throw new Error("Cannot get WebGL rendering context, WebGL is disabled.");const n=null==t?function(e){if("undefined"!==typeof OffscreenCanvas&&2===e)return new OffscreenCanvas(300,150);if("undefined"!==typeof document)return document.createElement("canvas");throw new Error("Cannot create a canvas in this context")}(e):t;if(n.addEventListener("webglcontextlost",(t=>{t.preventDefault(),delete s[e]}),!1),1===e)return n.getContext("webgl",o)||n.getContext("experimental-webgl",o);return n.getContext("webgl2",o)}(e,t);if(null===n)return console.log("Could not get context for WebGL version",e),null;s[e]=n}const n=s[e];return null==n||n.isContextLost()?(delete s[e],i(e)):(n.disable(n.DEPTH_TEST),n.disable(n.STENCIL_TEST),n.disable(n.BLEND),n.disable(n.DITHER),n.disable(n.POLYGON_OFFSET_FILL),n.disable(n.SAMPLE_COVERAGE),n.enable(n.SCISSOR_TEST),n.enable(n.CULL_FACE),n.cullFace(n.BACK),s[e])}var u,l,c;function d(e,t){return[t,e]}function p(e){const t=a.util.sizeFromShape(e),n=Math.ceil(t/4);return a.util.sizeToSquarishShape(n)}function h(e,t){return[Math.max(1,Math.ceil(t/2)),Math.max(1,Math.ceil(e/2))]}function f(e,t){const n=e;let r,s,o,i,u,l,c,d,p,h;return 2===(0,a.env)().getNumber("WEBGL_VERSION")?(r=n.R32F,s=n.R16F,o=n.RGBA16F,i=n.RGBA32F,u=n.RED,c=4,d=1,p=n.HALF_FLOAT,h=n.FLOAT,l=n.RGBA8):(r=e.RGBA,s=e.RGBA,o=e.RGBA,i=n.RGBA,u=e.RGBA,c=4,d=4,p=null!=t?t.HALF_FLOAT_OES:null,h=e.FLOAT,l=e.RGBA),{internalFormatFloat:r,internalFormatHalfFloat:s,internalFormatPackedHalfFloat:o,internalFormatPackedFloat:i,textureFormatFloat:u,downloadTextureFormat:l,downloadUnpackNumChannels:c,defaultNumChannels:d,textureTypeHalfFloat:p,textureTypeFloat:h}}function m(e,t){const n=t();return(0,a.env)().getBool("DEBUG")&&function(e){const t=e.getError();if(t!==e.NO_ERROR)throw new Error("WebGL Error: "+function(e,t){switch(t){case e.NO_ERROR:return"NO_ERROR";case e.INVALID_ENUM:return"INVALID_ENUM";case e.INVALID_VALUE:return"INVALID_VALUE";case e.INVALID_OPERATION:return"INVALID_OPERATION";case e.INVALID_FRAMEBUFFER_OPERATION:return"INVALID_FRAMEBUFFER_OPERATION";case e.OUT_OF_MEMORY:return"OUT_OF_MEMORY";case e.CONTEXT_LOST_WEBGL:return"CONTEXT_LOST_WEBGL";default:return`Unknown error code ${t}`}}(e,t))}(e),n}!function(e){e[e.DENSE=0]="DENSE",e[e.SHARED_BATCH=1]="SHARED_BATCH"}(u||(u={})),function(e){e[e.RENDER=0]="RENDER",e[e.UPLOAD=1]="UPLOAD",e[e.PIXELS=2]="PIXELS",e[e.DOWNLOAD=3]="DOWNLOAD"}(l||(l={})),function(e){e[e.UNPACKED_FLOAT16=0]="UNPACKED_FLOAT16",e[e.UNPACKED_FLOAT32=1]="UNPACKED_FLOAT32",e[e.PACKED_4X1_UNSIGNED_BYTE=2]="PACKED_4X1_UNSIGNED_BYTE",e[e.PACKED_2X2_FLOAT32=3]="PACKED_2X2_FLOAT32",e[e.PACKED_2X2_FLOAT16=4]="PACKED_2X2_FLOAT16"}(c||(c={}));function g(e){return!!((0,a.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")||0===e||5.96e-8<Math.abs(e)&&Math.abs(e)<65504)}function y(e,t){return I(e,(()=>e.getExtension(t)),'Extension "'+t+'" not supported on this browser.')}const x=/ERROR: [0-9]+:([0-9]+):/g;function b(e,t){const n=x.exec(t);if(null==n)return console.log(`Couldn't parse line number in error: ${t}`),void console.log(e);const r=+n[1],s=e.split("\n"),o=s.length.toString().length+2,i=s.map(((e,t)=>a.util.rightPad((t+1).toString(),o)+e));let u=0;for(let a=0;a<i.length;a++)u=Math.max(i[a].length,u);const l=i.slice(0,r-1),c=i.slice(r-1,r),d=i.slice(r);console.log(l.join("\n")),console.log(t.split("\n")[0]),console.log(`%c ${a.util.rightPad(c[0],u)}`,"border:1px solid red; background-color:#e3d2d2; color:#a61717"),console.log(d.join("\n"))}function v(e,t){if(m(e,(()=>e.validateProgram(t))),!1===e.getProgramParameter(t,e.VALIDATE_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Shader program validation failed.")}function w(e,t,n,r,a,s,o){const i=e.getAttribLocation(t,n);return-1!==i&&(m(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,r))),m(e,(()=>e.vertexAttribPointer(i,a,e.FLOAT,!1,s,o))),m(e,(()=>e.enableVertexAttribArray(i))),!0)}function k(e,t,n,r){m(e,(()=>function(e,t,n){$(e,n),m(e,(()=>e.activeTexture(e.TEXTURE0+n))),m(e,(()=>e.bindTexture(e.TEXTURE_2D,t)))}(e,t,r))),m(e,(()=>e.uniform1i(n,r)))}function S(e,t,n){m(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,n))),m(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0)))}function N(e,t){m(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,t))),m(e,(()=>e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,null,0)))}function T(e){const t=e.checkFramebufferStatus(e.FRAMEBUFFER);if(t!==e.FRAMEBUFFER_COMPLETE)throw new Error("Error binding framebuffer: "+function(e,t){switch(t){case e.FRAMEBUFFER_INCOMPLETE_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:return"FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT";case e.FRAMEBUFFER_INCOMPLETE_DIMENSIONS:return"FRAMEBUFFER_INCOMPLETE_DIMENSIONS";case e.FRAMEBUFFER_UNSUPPORTED:return"FRAMEBUFFER_UNSUPPORTED";default:return`unknown error ${t}`}}(e,t))}function I(e,t,n){const r=m(e,(()=>t()));if(null==r)throw new Error(n);return r}function $(e,t){const n=e.MAX_COMBINED_TEXTURE_IMAGE_UNITS-1,r=t+e.TEXTURE0;if(r<e.TEXTURE0||r>n){throw new Error(`textureUnit must be in ${`[gl.TEXTURE0, gl.TEXTURE${n}]`}.`)}}function C(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:2;return a.util.sizeFromShape(e.slice(0,e.length-t))}function E(e){if(0===e.length)throw Error("Cannot get rows and columns of an empty shape array.");return[e.length>1?e[e.length-2]:1,e[e.length-1]]}function _(e){let t=[1,1,1];return 0===e.length||1===e.length&&1===e[0]||(t=[C(e),...E(e)]),t}function R(e){return e%2===0}function A(e,t){if(e=e.slice(-2),t=t.slice(-2),a.util.arraysEqual(e,t))return!0;if(!e.length||!t.length)return!0;if(0===e[0]||0===e[1]||0===t[0]||0===t[1])return!0;if(e.length!==t.length){const n=e.slice(-1)[0],r=t.slice(-1)[0];if(n===r)return!0;if(R(n)&&R(r)&&(1===e[0]||1===t[0]))return!0}return e[1]===t[1]&&R(e[0])&&R(t[0])}let O,D;function F(e,t){return null!=e.getExtension(t)}function B(e){try{if(null!=i(e))return!0}catch(t){return console.log("Error when getting WebGL context: ",t),!1}return!1}function M(e){if(0===e)return!1;const t=i(e);if(1!==e){if(F(t,"EXT_color_buffer_float"))return P(t);const e="EXT_color_buffer_half_float";if(F(t,e)){const n=t.getExtension(e);return function(e,t){const n=f(e,t),r=e.createTexture();e.bindTexture(e.TEXTURE_2D,r);const a=1,s=1;e.texImage2D(e.TEXTURE_2D,0,n.internalFormatHalfFloat,a,s,0,n.textureFormatFloat,n.textureTypeHalfFloat,null);const o=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,o),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,r,0);const i=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(r),e.deleteFramebuffer(o),i}(t,n)}return!1}if(!F(t,"OES_texture_float"))return!1;if(!F(t,"WEBGL_color_buffer_float"))return!1;return P(t)}function P(e){const t=f(e),n=e.createTexture();e.bindTexture(e.TEXTURE_2D,n);e.texImage2D(e.TEXTURE_2D,0,t.internalFormatFloat,1,1,0,t.textureFormatFloat,t.textureTypeFloat,null);const r=e.createFramebuffer();e.bindFramebuffer(e.FRAMEBUFFER,r),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,n,0);const a=e.checkFramebufferStatus(e.FRAMEBUFFER)===e.FRAMEBUFFER_COMPLETE;return e.bindTexture(e.TEXTURE_2D,null),e.bindFramebuffer(e.FRAMEBUFFER,null),e.deleteTexture(n),e.deleteFramebuffer(r),a}function L(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&a.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the WebGL backend.`))}))}const V=(0,a.env)();function z(){let e,t,n,r,s,o,i,u,l,c;return 2===(0,a.env)().getNumber("WEBGL_VERSION")?(e="#version 300 es",t="in",n="out",r="in",s="texture",o="outputColor",i="out vec4 outputColor;",u="\n      bool isnan_custom(float val) {\n        uint floatToUint = floatBitsToUint(val);\n        return (floatToUint & 0x7fffffffu) > 0x7f800000u;\n      }\n\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan_custom(val.x),\n          isnan_custom(val.y), isnan_custom(val.z), isnan_custom(val.w));\n      }\n\n      #define isnan(value) isnan_custom(value)\n    ",l="",c="\n      #define round(value) newRound(value)\n      int newRound(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 newRound(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "):(e="",t="attribute",n="varying",r="varying",s="texture2D",o="gl_FragColor",i="",u="\n      #define isnan(value) isnan_custom(value)\n      bool isnan_custom(float val) {\n        return (val > 0. || val < 1. || val == 0.) ? false : true;\n      }\n      bvec4 isnan_custom(vec4 val) {\n        return bvec4(isnan(val.x), isnan(val.y), isnan(val.z), isnan(val.w));\n      }\n    ",l="\n      uniform float INFINITY;\n\n      bool isinf(float val) {\n        return abs(val) == INFINITY;\n      }\n      bvec4 isinf(vec4 val) {\n        return equal(abs(val), vec4(INFINITY));\n      }\n    ",c="\n      int round(float value) {\n        return int(floor(value + 0.5));\n      }\n\n      ivec4 round(vec4 value) {\n        return ivec4(floor(value + vec4(0.5)));\n      }\n    "),{version:e,attribute:t,varyingVs:n,varyingFs:r,texture2D:s,output:o,defineOutput:i,defineSpecialNaN:u,defineSpecialInf:l,defineRound:c}}function U(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const r=a.util.computeStrides(t);return r.map(((t,a)=>`${`int ${e[a]} = ${n} / ${t}`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${t}`:`index -= ${e[a]} * ${t}`};`)).join("")}function W(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const r=a.util.computeStrides(t);return r.map(((t,a)=>`${`int ${e[a]} = ${n} / outShapeStrides[${a}]`}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * outShapeStrides[${a}]`:`index -= ${e[a]} * outShapeStrides[${a}]`};`)).join("")}function G(e,t){const n=e.length,r=e.map((e=>`${t}[${e}]`)),a=new Array(n-1);a[n-2]=r[n-1];for(let s=n-3;s>=0;--s)a[s]=`(${a[s+1]} * ${r[s+1]})`;return a}function H(e){const t=a.util.computeStrides(e).map((e=>e.toString()));return`\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${t[0]} + coords.y * ${t[1]} + coords.z;\n  }\n`}V.registerFlag("HAS_WEBGL",(()=>V.getNumber("WEBGL_VERSION")>0)),V.registerFlag("WEBGL_VERSION",(()=>B(2)?2:B(1)?1:0)),V.registerFlag("WEBGL_CHECK_NUMERICAL_PROBLEMS",(()=>!1)),V.registerFlag("WEBGL_BUFFER_SUPPORTED",(()=>2===V.get("WEBGL_VERSION"))),V.registerFlag("WEBGL_CPU_FORWARD",(()=>!0)),V.registerFlag("WEBGL_FORCE_F16_TEXTURES",(()=>!1)),V.registerFlag("WEBGL_PACK",(()=>V.getBool("HAS_WEBGL"))),V.registerFlag("WEBGL_PACK_NORMALIZATION",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_PACK_CLIP",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_PACK_DEPTHWISECONV",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_PACK_BINARY_OPERATIONS",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_PACK_UNARY_OPERATIONS",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_PACK_ARRAY_OPERATIONS",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_PACK_IMAGE_OPERATIONS",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_PACK_REDUCE",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_LAZILY_UNPACK",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_CONV_IM2COL",(()=>V.getBool("WEBGL_PACK"))),V.registerFlag("WEBGL_MAX_TEXTURE_SIZE",(()=>function(e){if(null==O){const t=i(e);O=t.getParameter(t.MAX_TEXTURE_SIZE)}return O}(V.getNumber("WEBGL_VERSION")))),V.registerFlag("WEBGL_MAX_TEXTURES_IN_SHADER",(()=>function(e){if(null==D){const t=i(e);D=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS)}return Math.min(16,D)}(V.getNumber("WEBGL_VERSION")))),V.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION",(()=>{const e=V.getNumber("WEBGL_VERSION");return 0===e?0:function(e){if(0===e)return 0;let t;const n=i(e);return t=F(n,"EXT_disjoint_timer_query_webgl2")&&2===e?2:F(n,"EXT_disjoint_timer_query")?1:0,t}(e)})),V.registerFlag("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE",(()=>V.getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0&&!a.device_util.isMobile())),V.registerFlag("WEBGL_RENDER_FLOAT32_CAPABLE",(()=>function(e){if(0===e)return!1;const t=i(e);if(1===e){if(!F(t,"OES_texture_float"))return!1}else if(!F(t,"EXT_color_buffer_float"))return!1;return P(t)}(V.getNumber("WEBGL_VERSION")))),V.registerFlag("WEBGL_RENDER_FLOAT32_ENABLED",(()=>!V.getBool("WEBGL_FORCE_F16_TEXTURES")&&V.getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))),V.registerFlag("WEBGL_DOWNLOAD_FLOAT_ENABLED",(()=>M(V.getNumber("WEBGL_VERSION")))),V.registerFlag("WEBGL_FENCE_API_ENABLED",(()=>{return 2===(e=V.getNumber("WEBGL_VERSION"))&&null!=i(e).fenceSync;var e})),V.registerFlag("WEBGL_SIZE_UPLOAD_UNIFORM",(()=>V.getBool("WEBGL_RENDER_FLOAT32_ENABLED")?4:0)),V.registerFlag("WEBGL_DELETE_TEXTURE_THRESHOLD",(()=>-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_DELETE_TEXTURE_THRESHOLD must be -1 (indicating never delete) or at least 0, but got ${e}.`)})),V.registerFlag("WEBGL_FLUSH_THRESHOLD",(()=>a.device_util.isMobile()?1:-1),(e=>{if(e<0&&-1!==e)throw new Error(`WEBGL_FLUSH_THRESHOLD must be -1 (indicating never manual flush) or at least 0, but got ${e}.`)})),V.registerFlag("CPU_HANDOFF_SIZE_THRESHOLD",(()=>128)),V.registerFlag("WEBGL_USE_SHAPES_UNIFORMS",(()=>!1)),V.registerFlag("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD",(()=>1e5)),V.registerFlag("TOPK_K_CPU_HANDOFF_THRESHOLD",(()=>128));const q="\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n",{getBroadcastDims:X}=a.backend_util;function K(e,t,n){const r=[];if(e.forEach((e=>{const t=a.util.sizeFromShape(e.shapeInfo.logicalShape);if(e.shapeInfo.isUniform?r.push(`uniform float ${e.name}${t>1?`[${t}]`:""};`):(r.push(`uniform sampler2D ${e.name};`),r.push(`uniform int offset${e.name};`)),n.enableShapeUniforms){const{uniformShape:t}=fe(n.packedInputs,e.shapeInfo.logicalShape,e.shapeInfo.texShape);switch(t.length){case 1:r.push(`uniform int ${e.name}Shape;`);break;case 2:r.push(`uniform ivec2 ${e.name}Shape;`);break;case 3:r.push(`uniform ivec3 ${e.name}Shape;`);break;case 4:r.push(`uniform ivec4 ${e.name}Shape;`)}r.push(`uniform ivec2 ${e.name}TexShape;`)}})),n.enableShapeUniforms){switch(t.logicalShape.length){case 1:r.push("uniform int outShape;");break;case 2:r.push("uniform ivec2 outShape;"),r.push("uniform int outShapeStrides;");break;case 3:r.push("uniform ivec3 outShape;"),r.push("uniform ivec2 outShapeStrides;");break;case 4:r.push("uniform ivec4 outShape;"),r.push("uniform ivec3 outShapeStrides;")}r.push("uniform ivec2 outTexShape;")}n.customUniforms&&n.customUniforms.forEach((e=>{r.push(`uniform ${e.type} ${e.name}${e.arrayIndex?`[${e.arrayIndex}]`:""};`)}));const s=r.join("\n"),o=e.map((e=>function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3?arguments[3]:void 0,a="";a+=n?Y(e,r):j(e,r);const s=e.shapeInfo.logicalShape,o=t.logicalShape;s.length<=o.length&&(a+=n?de(e,t):pe(e,t));return a}(e,t,n.packedInputs,n.enableShapeUniforms))).join("\n"),i=t.texShape,u=z(),l=function(e){return`\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${e.texture2D}(textureSampler, uv).r;\n    }\n  `}(u);let c,d,p=function(e){return`${e.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${e.varyingFs} vec2 resultUV;\n    ${e.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${e.defineSpecialNaN}\n    ${e.defineSpecialInf}\n    ${e.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${Q}\n    ${Z}\n    ${J}\n  `}(u);t.isPacked?(c=function(e,t,n){switch(e.length){case 0:return te();case 1:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(1===r[0])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${r[1]}.0);\n      }\n    `;if(1===r[1])return n?"\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    ":`\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${r[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      return 2 * (resTexRC.x * ${r[1]} + resTexRC.y);\n    }\n  `}(0,t,n);case 2:return function(e,t,n){const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)];if(a.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${r[0]}, ${r[1]}));\n      }\n    `;const s=Math.ceil(e[1]/2);if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n      int r = 2 * (index / ${s});\n      int c = imod(index, ${s}) * 2;\n\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n)return"\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[2]/2),s=a*Math.ceil(e[1]/2);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `}(e,t,n);default:return function(e,t,n){if(n)return"\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  ";const r=[Math.ceil(t[0]/2),Math.ceil(t[1]/2)],a=Math.ceil(e[e.length-1]/2),s=a*Math.ceil(e[e.length-2]/2);let o=s,i="",u="b, r, c";for(let l=2;l<e.length-1;l++)o*=e[e.length-l-1],i=`\n      int b${l} = index / ${o};\n      index -= b${l} * ${o};\n    `+i,u=`b${l}, `+u;return`\n    ivec${e.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${r[0]}, ${r[1]}));\n      int index = resTexRC.x * ${r[1]} + resTexRC.y;\n\n      ${i}\n\n      int b = index / ${s};\n      index -= b * ${s};\n\n      int r = 2 * (index / ${a});\n      int c = imod(index, ${a}) * 2;\n\n      return ivec${e.length}(${u});\n    }\n  `}(e,t,n)}}(t.logicalShape,i,n.enableShapeUniforms),d=function(e){return`\n    void setOutput(vec4 val) {\n      ${e.output} = val;\n    }\n  `}(u)):(c=function(e,t,n){switch(e.length){case 0:return te();case 1:return function(e,t,n){if(1===t[0])return n?"\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.x * ${t[1]}.0);\n      }\n    `;if(1===t[1])return n?"\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    ":`\n      int getOutputCoords() {\n        return int(resultUV.y * ${t[0]}.0);\n      }\n    `;if(n)return"\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  ";return`\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      return resTexRC.x * ${t[1]} + resTexRC.y;\n    }\n  `}(0,t,n);case 2:return function(e,t,n){if(a.util.arraysEqual(e,t))return n?"\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${t[0]}, ${t[1]}));\n      }\n    `;if(1===e[1])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;if(1===e[0])return n?"\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    ":`\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${t[0]}, ${t[1]}));\n        int index = resTexRC.x * ${t[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;if(n)return"\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  ";return`\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      int r = index / ${e[1]};\n      int c = index - r * ${e[1]};\n      return ivec2(r, c);\n    }\n  `}(e,t,n);case 3:return function(e,t,n){if(n){return`\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${W(["r","c","d"],e)}\n    return ivec3(r, c, d);\n  }\n`}const r=U(["r","c","d"],e);return`\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec3(r, c, d);\n    }\n  `}(e,t,n);case 4:return function(e,t,n){if(n){return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${W(["r","c","d","d2"],e)}\n      return ivec4(r, c, d, d2);\n    }\n  `}const r=U(["r","c","d","d2"],e);return`\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n      ${r}\n      return ivec4(r, c, d, d2);\n    }\n  `}(e,t,n);case 5:return function(e,t){const n=U(["r","c","d","d2","d3"],e);return`\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${t[0]},\n                             ${t[1]}));\n\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `}(e,t);case 6:return function(e,t){const n=U(["r","c","d","d2","d3","d4"],e);return`\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${t[0]}, ${t[1]}));\n      int index = resTexRC.x * ${t[1]} + resTexRC.y;\n\n      ${n}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `}(e,t);default:throw new Error(`${e.length}-D output sampling is not yet supported`)}}(t.logicalShape,i,n.enableShapeUniforms),d=function(e){return`\n    void setOutput(float val) {\n      ${e.output} = vec4(val, 0, 0, 0);\n    }\n  `}(u)),n.packedInputs&&(p+=ee);return[p,l,d,s,c,o,n.userCode].join("\n")}function j(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];const n=e.shapeInfo.logicalShape;switch(n.length){case 0:return re(e,t);case 1:return ae(e,t);case 2:return se(e,t);case 3:return oe(e,t);case 4:return ie(e,t);case 5:return ue(e);case 6:return le(e);default:throw new Error(`${n.length}-D input sampling is not yet supported`)}}function Y(e,t){switch(e.shapeInfo.logicalShape.length){case 0:return function(e){const t=e.name,n="get"+t.charAt(0).toUpperCase()+t.slice(1),r=z();return`\n    vec4 ${n}() {\n      return ${r.texture2D}(${t}, halfCR);\n    }\n  `}(e);case 1:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=e.shapeInfo.texShape,s=z();if(t)return`\n    vec4 ${r}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `;const o=[Math.ceil(a[0]/2),Math.ceil(a[1]/2)];return`\n    vec4 ${r}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${o[0]}, ${o[1]}, index);\n      return ${s.texture2D}(${n}, uv);\n    }\n  `}(e,t);case 2:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=e.shapeInfo.texShape,i=o[0],u=o[1],l=z();if(null!=o&&a.util.arraysEqual(n,o))return t?`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `:`\n      vec4 ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${u}.0, ${i}.0);\n\n        return ${l.texture2D}(${r}, uv);\n      }\n    `;if(t)return`\n    vec4 ${s}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `;const c=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)],d=Math.ceil(n[1]/2);return`\n    vec4 ${s}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${d}, ${c[0]}, ${c[1]}, row, col);\n      return ${l.texture2D}(${r}, uv);\n    }\n  `}(e,t);case 3:return function(e,t){const n=e.shapeInfo.logicalShape,r=e.name,a="get"+r.charAt(0).toUpperCase()+r.slice(1),s=e.shapeInfo.texShape,o=[Math.ceil(s[0]/2),Math.ceil(s[1]/2)];if(1===n[0]){const r=[1,2],s=["b","row","col"];return`\n        ${Y(me(e,n.slice(1)),t)}\n        vec4 ${a}(int b, int row, int col) {\n          return ${a}(${ge(s,r)});\n        }\n      `}const i=z();if(t)return`\n    vec4 ${a}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${r}TexShape[0]) / 2.0), ceil(float(${r}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${r}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${r}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `;const u=o[0],l=o[1],c=Math.ceil(n[2]/2),d=c*Math.ceil(n[1]/2);return`\n    vec4 ${a}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${u}, ${l}, ${d}, ${c}, b, row, col);\n      return ${i.texture2D}(${r}, uv);\n    }\n  `}(e,t);default:return function(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),a=z();if(t)return`\n    vec4 ${r}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${n}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${n}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${n}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${n}TexShape[0]) / 2.0), ceil(float(${n}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${a.texture2D}(${n}, uv);\n    }\n  `;const s=e.shapeInfo.logicalShape,o=s.length,i=e.shapeInfo.texShape,u=[Math.ceil(i[0]/2),Math.ceil(i[1]/2)],l=u[0],c=u[1],d=Math.ceil(s[o-1]/2);let p=d*Math.ceil(s[o-2]/2),h="int b, int row, int col",f=`b * ${p} + (row / 2) * ${d} + (col / 2)`;for(let m=2;m<o-1;m++)h=`int b${m}, `+h,p*=s[o-m-1],f=`b${m} * ${p} + `+f;return`\n    vec4 ${r}(${h}) {\n      int index = ${f};\n      int texR = index / ${c};\n      int texC = index - texR * ${c};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${c}, ${l});\n      return ${a.texture2D}(${n}, uv);\n    }\n  `}(e,t)}}const Q="\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",Z="\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",J="\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n",ee="\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n";function te(){return"\n    int getOutputCoords() {\n      return 0;\n    }\n  "}function ne(e){return`offset${e}`}function re(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`float ${r}() {return ${n};}`;const[a,s]=e.shapeInfo.texShape;if(1===a&&1===s)return`\n      float ${r}() {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const o=ne(n);if(t)return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `;const[i,u]=e.shapeInfo.texShape;return`\n    float ${r}() {\n      vec2 uv = uvFromFlat(${i}, ${u}, ${o});\n      return sampleTexture(${n}, uv);\n    }\n  `}function ae(e,t){const n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1);if(e.shapeInfo.isUniform)return`\n      float ${r}(int index) {\n        ${ce(e)}\n      }\n    `;const a=e.shapeInfo.texShape,s=a[0],o=a[1];if(1===o&&1===s)return`\n      float ${r}(int index) {\n        return sampleTexture(${n}, halfCR);\n      }\n    `;const i=ne(n);return 1===o?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / float(${n}TexShape[0]));\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${i}) + 0.5) / ${s}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `:1===s?t?`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / float(${n}TexShape[1]), 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:`\n      float ${r}(int index) {\n        vec2 uv = vec2((float(index + ${i}) + 0.5) / ${o}.0, 0.5);\n        return sampleTexture(${n}, uv);\n      }\n    `:t?`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${n}TexShape[0], ${n}TexShape[1], index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `:`\n    float ${r}(int index) {\n      vec2 uv = uvFromFlat(${s}, ${o}, index + ${i});\n      return sampleTexture(${n}, uv);\n    }\n  `}function se(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=e.shapeInfo.texShape;if(null!=o&&a.util.arraysEqual(n,o)){if(t)return`\n      float ${s}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `;const e=o[0];return`\n    float ${s}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${o[1]}.0, ${e}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `}const{newShape:i,keptDims:u}=a.util.squeezeShape(n),l=i;if(l.length<n.length){const n=["row","col"];return`\n      ${j(me(e,l),t)}\n      float ${s}(int row, int col) {\n        return ${s}(${ge(n,u)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${n[1]}, 1)));\n        ${ce(e)}\n      }\n    `;const c=o[0],d=o[1],p=ne(r);return 1===d?t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${r}TexShape[0]));\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${c}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `:1===c?t?`\n      float ${s}(int row, int col) {\n        float index = dot(vec3(row, col, ${p}), vec3(${r}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${r}TexShape[1]), 0.5);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col) {\n      float index = dot(vec3(row, col, ${p}), vec3(${n[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${d}.0, 0.5);\n      return sampleTexture(${r}, uv);\n    }\n  `:t?`\n      float ${s}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${r}Shape[1] + col + ${p};\n        vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n  float ${s}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${n[1]} + col + ${p};\n    vec2 uv = uvFromFlat(${c}, ${d}, index);\n    return sampleTexture(${r}, uv);\n  }\n`}function oe(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=n[1]*n[2],i=n[2],{newShape:u,keptDims:l}=a.util.squeezeShape(n),c=u;if(c.length<n.length){const n=["row","col","depth"];return`\n        ${j(me(e,c),t)}\n        float ${s}(int row, int col, int depth) {\n          return ${s}(${ge(n,l)});\n        }\n      `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${o}, ${i}, 1)));\n        ${ce(e)}\n      }\n    `;const d=e.shapeInfo.texShape,p=d[0],h=d[1],f=e.shapeInfo.flatOffset;if(h===o&&null==f)return t?`\n      float ${s}(int row, int col, int depth) {\n        int stride1 = ${r}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n        float ${s}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${i}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${h}.0, ${p}.0);\n          return sampleTexture(${r}, uv);\n        }\n      `;if(h===i&&null==f)return t?`\n      float ${s}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${r}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n    float ${s}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${n[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${h}.0, ${p}.0);\n      return sampleTexture(${r}, uv);\n    }\n  `;const m=ne(r);return t?`\n    float ${s}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${r}Shape[1] * ${r}Shape[2];\n      int stride1 = ${r}Shape[2];\n      int index = row * ${o} + col * ${i} + depth + ${m};\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index);\n      return sampleTexture(${r}, uv);\n    }\n    `:`\n      float ${s}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${o} + col * ${i} + depth + ${m};\n        vec2 uv = uvFromFlat(${p}, ${h}, index);\n        return sampleTexture(${r}, uv);\n      }\n  `}function ie(e,t){const n=e.shapeInfo.logicalShape,r=e.name,s="get"+r.charAt(0).toUpperCase()+r.slice(1),o=n[3],i=n[2]*o,u=n[1]*i,{newShape:l,keptDims:c}=a.util.squeezeShape(n);if(l.length<n.length){const n=["row","col","depth","depth2"];return`\n      ${j(me(e,l),t)}\n      float ${s}(int row, int col, int depth, int depth2) {\n        return ${s}(${ge(n,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${s}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${u}, ${i}, ${o}, 1)));\n        ${ce(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],f=p[1],m=`int stride2 = ${r}Shape[3];`,g=`int stride1 = ${r}Shape[2] * stride2;`,y=`int stride0 = ${r}Shape[1] * stride1;`;if(f===u&&null==d)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        ${m}\n        ${g}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${i}, ${o}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;if(f===o&&null==d)return t?`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${r}Shape[1] * ${r}Shape[2], ${r}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${r}TexShape[1], ${r}TexShape[0]);\n        return sampleTexture(${r}, uv);\n      }\n    `:`\n      float ${s}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${n[1]*n[2]}, ${n[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${r}, uv);\n      }\n    `;const x=ne(r);return t?`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${m}\n      ${g}\n      ${y}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${r}TexShape[0], ${r}TexShape[1], index + ${x});\n      return sampleTexture(${r}, uv);\n    }\n  `:`\n    float ${s}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} +\n          depth * ${o} + depth2;\n      vec2 uv = uvFromFlat(${h}, ${f}, index + ${x});\n      return sampleTexture(${r}, uv);\n    }\n  `}function ue(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),s=t[4],o=t[3]*s,i=t[2]*o,u=t[1]*i,{newShape:l,keptDims:c}=a.util.squeezeShape(t);if(l.length<t.length){const t=["row","col","depth","depth2","depth3"];return`\n      ${j(me(e,l))}\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        return ${r}(${ge(t,c)});\n      }\n    `}if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${u}, ${i}, ${o}, ${s})) +\n          depth3;\n        ${ce(e)}\n      }\n    `;const d=e.shapeInfo.flatOffset,p=e.shapeInfo.texShape,h=p[0],f=p[1];if(f===u&&null==d)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${i}, ${o}, ${s}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(f===s&&null==d)return`\n      float ${r}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]},\n               ${t[2]*t[3]}, ${t[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${f}.0, ${h}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${u} + col * ${i} + depth * ${o} +\n          depth2 * ${s} + depth3 + ${ne(n)};\n      vec2 uv = uvFromFlat(${h}, ${f}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}function le(e){const t=e.shapeInfo.logicalShape,n=e.name,r="get"+n.charAt(0).toUpperCase()+n.slice(1),{newShape:s,keptDims:o}=a.util.squeezeShape(t);if(s.length<t.length){const t=["row","col","depth","depth2","depth3","depth4"];return`\n      ${j(me(e,s))}\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${r}(${ge(t,o)});\n      }\n    `}const i=t[5],u=t[4]*i,l=t[3]*u,c=t[2]*l,d=t[1]*c;if(e.shapeInfo.isUniform)return`\n      float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${d}, ${c}, ${l}, ${u})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${i}, 1)));\n        ${ce(e)}\n      }\n    `;const p=e.shapeInfo.flatOffset,h=e.shapeInfo.texShape,f=h[0],m=h[1];if(m===d&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${c}, ${l}, ${u}, ${i})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;if(m===i&&null==p)return`\n      float ${r}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${t[1]*t[2]*t[3]*t[4]},\n               ${t[2]*t[3]*t[4]},\n               ${t[3]*t[4]},\n               ${t[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${m}.0, ${f}.0);\n        return sampleTexture(${n}, uv);\n      }\n    `;return`\n    float ${r}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${d} + col * ${c} + depth * ${l} +\n          depth2 * ${u} + depth3 * ${i} + depth4 + ${ne(n)};\n      vec2 uv = uvFromFlat(${f}, ${m}, index);\n      return sampleTexture(${n}, uv);\n    }\n  `}function ce(e){const t=e.name,n=a.util.sizeFromShape(e.shapeInfo.logicalShape);return n<2?`return ${t};`:`\n    for (int i = 0; i < ${n}; i++) {\n      if (i == index) {\n        return ${t}[i];\n      }\n    }\n  `}function de(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",o=e.shapeInfo.logicalShape.length,i=t.logicalShape.length,u=X(e.shapeInfo.logicalShape,t.logicalShape),l=he(i),c=i-o;let d;const p=["x","y","z","w","u","v"];d=0===o?"":i<2&&u.length>=1?"coords = 0;":u.map((e=>`coords.${p[e+c]} = 0;`)).join("\n");let h="";h=i<2&&o>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${p[t+c]}`)).join(", ");let f="return outputValue;";const m=1===a.util.sizeFromShape(e.shapeInfo.logicalShape),g=1===a.util.sizeFromShape(t.logicalShape);if(1!==o||m||g){if(m&&!g)f=1===i?"\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      ":"\n        return vec4(outputValue.x);\n      ";else if(u.length){const e=o-2,t=o-1;u.indexOf(e)>-1&&u.indexOf(t)>-1?f="return vec4(outputValue.x);":u.indexOf(e)>-1?f="return vec4(outputValue.x, outputValue.y, outputValue.x, outputValue.y);":u.indexOf(t)>-1&&(f="return vec4(outputValue.xx, outputValue.zz);")}}else f="\n      return vec4(outputValue.xy, outputValue.xy);\n    ";return`\n    vec4 ${s}() {\n      ${l} coords = getOutputCoords();\n      ${d}\n      vec4 outputValue = get${r}(${h});\n      ${f}\n    }\n  `}function pe(e,t){const n=e.name,r=n.charAt(0).toUpperCase()+n.slice(1),s="get"+r+"AtOutCoords",o=t.texShape,i=e.shapeInfo.texShape,u=e.shapeInfo.logicalShape.length,l=t.logicalShape.length;if(!e.shapeInfo.isUniform&&u===l&&null==e.shapeInfo.flatOffset&&a.util.arraysEqual(i,o))return`\n      float ${s}() {\n        return sampleTexture(${n}, resultUV);\n      }\n    `;const c=he(l),d=X(e.shapeInfo.logicalShape,t.logicalShape),p=l-u;let h;const f=["x","y","z","w","u","v"];h=0===u?"":l<2&&d.length>=1?"coords = 0;":d.map((e=>`coords.${f[e+p]} = 0;`)).join("\n");let m="";return m=l<2&&u>0?"coords":e.shapeInfo.logicalShape.map(((e,t)=>`coords.${f[t+p]}`)).join(", "),`\n    float ${s}() {\n      ${c} coords = getOutputCoords();\n      ${h}\n      return get${r}(${m});\n    }\n  `}function he(e){if(e<=1)return"int";if(2===e)return"ivec2";if(3===e)return"ivec3";if(4===e)return"ivec4";if(5===e)return"ivec5";if(6===e)return"ivec6";throw Error(`GPU for rank ${e} is not yet supported`)}function fe(e,t,n){const{newShape:r,keptDims:s}=a.util.squeezeShape(t),o=t.length,i=e&&3===o&&1===t[0],u=i?t.slice(1):r,l=!e&&o>1&&!a.util.arraysEqual(t,n)&&r.length<o||i;return{useSqueezeShape:l,uniformShape:l?u:t,keptDims:s}}function me(e,t){const n=JSON.parse(JSON.stringify(e));return n.shapeInfo.logicalShape=t,n}function ge(e,t){return t.map((t=>e[t])).join(", ")}function ye(e,t,n,r){const s=n.map(((e,n)=>{const r={logicalShape:e.shape,texShape:e.isUniform?null:e.texData.texShape,isUniform:e.isUniform,isPacked:!e.isUniform&&e.texData.isPacked,flatOffset:null};return null!=e.texData&&null!=e.texData.slice&&e.texData.slice.flatOffset>0&&(r.flatOffset=e.texData.slice.flatOffset),{name:t.variableNames[n],shapeInfo:r}})),o=s.map((e=>e.shapeInfo)),i={logicalShape:r.shape,texShape:r.texData.texShape,isUniform:!1,isPacked:r.texData.isPacked,flatOffset:null},u=K(s,i,t),l=function(e,t){const n=I(e,(()=>e.createShader(e.FRAGMENT_SHADER)),"Unable to create fragment WebGLShader.");if(m(e,(()=>e.shaderSource(n,t))),m(e,(()=>e.compileShader(n))),(0,a.env)().get("ENGINE_COMPILE_ONLY"))return n;if(!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw b(t,e.getShaderInfoLog(n)),new Error("Failed to compile fragment shader.");return n}(e.gl,u),c=e.createProgram(l);return(0,a.env)().get("ENGINE_COMPILE_ONLY")?{program:t,fragmentShader:l,source:u,webGLProgram:c,inShapeInfos:o,outShapeInfo:i,uniformLocations:null,customUniformLocations:null,infLoc:null,nanLoc:null,inShapesLocations:null,inTexShapesLocations:null,outShapeLocation:null,outShapeStridesLocation:null,outTexShapeLocation:null}:Object.assign({program:t,fragmentShader:l,source:u,webGLProgram:c,inShapeInfos:o,outShapeInfo:i},xe(e,t,c))}function xe(e,t,n){const r={},s={},o={},i=[];let u,l,c,d=null,p=null;p=e.getUniformLocation(n,"NAN",!1),1===(0,a.env)().getNumber("WEBGL_VERSION")&&(d=e.getUniformLocation(n,"INFINITY",!1));const h=!1;for(let a=0;a<t.variableNames.length;a++){const i=t.variableNames[a];r[i]=e.getUniformLocation(n,i,h),r[`offset${i}`]=e.getUniformLocation(n,`offset${i}`,h),t.enableShapeUniforms&&(s[`${i}Shape`]=e.getUniformLocation(n,`${i}Shape`,h),o[`${i}TexShape`]=e.getUniformLocation(n,`${i}TexShape`,h))}return t.enableShapeUniforms&&(u=e.getUniformLocation(n,"outShape",h),c=e.getUniformLocation(n,"outShapeStrides",h),l=e.getUniformLocation(n,"outTexShape",h)),t.customUniforms&&t.customUniforms.forEach(((t,r)=>{i[r]=e.getUniformLocation(n,t.name,h)})),{uniformLocations:r,customUniformLocations:i,infLoc:d,nanLoc:p,inShapesLocations:s,inTexShapesLocations:o,outShapeLocation:u,outShapeStridesLocation:c,outTexShapeLocation:l}}function be(e,t){if(e.length!==t.length)throw Error(`Binary was compiled with ${e.length} inputs, but was executed with ${t.length} inputs`);e.forEach(((e,n)=>{const r=e.logicalShape,s=t[n],o=s.shape;if(!a.util.arraysEqual(r,o))throw Error(`Binary was compiled with different shapes than the current args. Shapes ${r} and ${o} must match`);if(e.isUniform&&s.isUniform)return;const i=e.texShape,u=s.isUniform?null:s.texData.texShape;if(!a.util.arraysEqual(i,u))throw Error(`Binary was compiled with different texture shapes than the current args. Shape ${i} and ${u} must match`)}))}function ve(e){return(0,a.env)().getBool("WEBGL_USE_SHAPES_UNIFORMS")&&e<=4}class we{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outPackingScheme=u.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=z();this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?W(["r","c","d"],e):U(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getA(rc.x, rc.y, rc.z);\n        }\n\n        ${t.output} = result;\n      }\n    `}}class ke{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outPackingScheme=u.DENSE,this.customUniforms=[{name:"texShape",type:"ivec2"}];const t=z();this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length),this.userCode=`\n      ivec3 outCoordsFromFlatIndex(int index) {\n        ${this.enableShapeUniforms?W(["r","c","d"],e):U(["r","c","d"],e)}\n        return ivec3(r, c, d);\n      }\n\n      void main() {\n        ivec2 resTexRC = ivec2(resultUV.yx * vec2(texShape[0], texShape[1]));\n        int index = 4 * (resTexRC.x * texShape[1] + resTexRC.y);\n\n        vec4 result = vec4(0.);\n\n        for (int i=0; i<4; i++) {\n          int flatIndex = index + i;\n          ivec3 rc = outCoordsFromFlatIndex(flatIndex);\n          result[i] = getChannel(getA(rc.x, rc.y, rc.z), vec2(rc.y, rc.z));\n        }\n\n        ${t.output} = result;\n      }\n    `}}class Se{constructor(e){this.variableNames=["A"],this.outTexUsage=l.DOWNLOAD;const t=z();this.outputShape=e,this.userCode=`\n      ${q}\n\n      void main() {\n        float x = getAAtOutCoords();\n        ${t.output} = encode_float(x);\n      }\n    `}}class Ne{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outTexUsage=l.DOWNLOAD;const t=z();this.outputShape=e,this.userCode=`\n      ${q}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n        float x = getChannel(getAAtOutCoords(), vec2(coords.y, coords.z));\n        ${t.output} = encode_float(x);\n      }\n    `}}class Te{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.variableNames=["A"],this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=z();this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length);let r="result";t&&(r="floor(result * 255. + 0.5)"),this.userCode=`\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":H(e)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${n.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${n.output} = vec4(${r}, 0., 0., 0.);\n      }\n    `}}class Ie{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.customUniforms=[{name:"texShape",type:"ivec2"}];const n=z();this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length);let r="",a="result";t&&(a="floor(result * 255. + 0.5)");for(let s=0;s<=1;s++)for(let t=0;t<=1;t++){const a=2*s+t;r+=`\n          localCoords = coords;\n          if(localCoords[2] + ${t} < ${this.enableShapeUniforms?"outShape[2]":`${e[2]}`}) {\n          localCoords[2] += ${t};\n          if (localCoords[1] + ${s} < ${this.enableShapeUniforms?"outShape[1]":`${e[1]}`}) {\n            localCoords[1] += ${s};\n\n            flatIndex = getFlatIndex(localCoords);\n            offset = imod(flatIndex, 4);\n\n            flatIndex = idiv(flatIndex, 4, 1.);\n\n            int r = flatIndex / texShape[1];\n            int c = imod(flatIndex, texShape[1]);\n            vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n            values = ${n.texture2D}(A, uv);\n\n            if (offset == 0) {\n              result[${a}] = values[0];\n            } else if (offset == 1) {\n              result[${a}] = values[1];\n            } else if (offset == 2) {\n              result[${a}] = values[2];\n            } else {\n              result[${a}] = values[3];\n            }\n          }\n        }\n        `}this.userCode=`\n        ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":H(e)}\n\n        void main() {\n          ivec3 coords = getOutputCoords();\n\n          vec4 result = vec4(0.);\n          int flatIndex, r, c, offset;\n          ivec3 localCoords;\n          vec2 uv;\n          vec4 values;\n\n          ${r}\n\n          ${n.output} = ${a};\n        }\n    `}}function $e(e){const t=z();return function(e,t){const n=I(e,(()=>e.createShader(e.VERTEX_SHADER)),"Unable to create vertex WebGLShader.");if(m(e,(()=>e.shaderSource(n,t))),m(e,(()=>e.compileShader(n))),!1===e.getShaderParameter(n,e.COMPILE_STATUS))throw console.log(e.getShaderInfoLog(n)),new Error("Failed to compile vertex shader.");return n}(e,`${t.version}\n    precision highp float;\n    ${t.attribute} vec3 clipSpacePos;\n    ${t.attribute} vec2 uv;\n    ${t.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`)}function Ce(e){return function(e,t){const n=I(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return m(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),m(e,(()=>e.bufferData(e.ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Float32Array([-1,1,0,0,1,-1,-1,0,0,0,1,1,0,1,1,1,-1,0,1,0]))}function Ee(e){return function(e,t){const n=I(e,(()=>e.createBuffer()),"Unable to create WebGLBuffer");return m(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,n))),m(e,(()=>e.bufferData(e.ELEMENT_ARRAY_BUFFER,t,e.STATIC_DRAW))),n}(e,new Uint16Array([0,1,2,2,1,3]))}function _e(e,t,n,r,s,o){!function(e,t){const n=(0,a.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(e<=0||t<=0)throw new Error(`Requested texture size [${e}x${t}] is invalid.`);if(e>n||t>n)throw new Error(`Requested texture size [${e}x${t}] greater than WebGL maximum on this browser / GPU [${n}x${n}].`)}(t,n);const i=function(e){return I(e,(()=>e.createTexture()),"Unable to create WebGLTexture.")}(e),u=e.TEXTURE_2D;return m(e,(()=>e.bindTexture(u,i))),m(e,(()=>e.texParameteri(u,e.TEXTURE_WRAP_S,e.CLAMP_TO_EDGE))),m(e,(()=>e.texParameteri(u,e.TEXTURE_WRAP_T,e.CLAMP_TO_EDGE))),m(e,(()=>e.texParameteri(u,e.TEXTURE_MIN_FILTER,e.NEAREST))),m(e,(()=>e.texParameteri(u,e.TEXTURE_MAG_FILTER,e.NEAREST))),1===(0,a.env)().getNumber("WEBGL_VERSION")?m(e,(()=>e.texImage2D(u,0,r,t,n,0,s,o,null))):m(e,(()=>e.texStorage2D(u,1,r,t,n))),m(e,(()=>e.bindTexture(e.TEXTURE_2D,null))),{texture:i,texShape:[n,t]}}function Re(e){return e.internalFormatFloat}function Ae(e){return e.internalFormatHalfFloat}function Oe(e){return e.downloadTextureFormat}function De(e){return e.internalFormatPackedFloat}function Fe(e){return e.internalFormatPackedHalfFloat}function Be(e,t,n,r,a,s,o,i){const u=e,l=new Float32Array(function(e,t){const[n,r]=h(e,t);return n*r*4}(s,o));return u.bindBuffer(u.PIXEL_PACK_BUFFER,t),u.getBufferSubData(u.PIXEL_PACK_BUFFER,0,l),u.bindBuffer(u.PIXEL_PACK_BUFFER,null),l}class Me{constructor(e){this.outputTexture=null,this.program=null,this.disposed=!1,this.vertexAttrsAreBound=!1,this.itemsToPoll=[];const t=(0,a.env)().getNumber("WEBGL_VERSION");null!=e?(this.gl=e,function(e,t){s[e]=t}(t,e)):this.gl=i(t);let n="WEBGL_color_buffer_float";const r="EXT_color_buffer_half_float";if(this.parallelCompilationExtension=this.gl.getExtension("KHR_parallel_shader_compile"),1===(0,a.env)().getNumber("WEBGL_VERSION")){const e="OES_texture_float",t="OES_texture_half_float";if(this.textureFloatExtension=y(this.gl,e),F(this.gl,t))this.textureHalfFloatExtension=y(this.gl,t);else if((0,a.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support half float textures, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.");if(this.colorBufferFloatExtension=this.gl.getExtension(n),F(this.gl,r))this.colorBufferHalfFloatExtension=y(this.gl,r);else if((0,a.env)().get("WEBGL_FORCE_F16_TEXTURES"))throw new Error("GL context does not support color renderable half floats, yet the environment flag WEBGL_FORCE_F16_TEXTURES is set to true.")}else if(n="EXT_color_buffer_float",F(this.gl,n))this.colorBufferFloatExtension=this.gl.getExtension(n);else{if(!F(this.gl,r))throw new Error("GL context does not support color renderable floats");this.colorBufferHalfFloatExtension=this.gl.getExtension(r)}this.vertexBuffer=Ce(this.gl),this.indexBuffer=Ee(this.gl),this.framebuffer=function(e){return I(e,(()=>e.createFramebuffer()),"Unable to create WebGLFramebuffer.")}(this.gl),this.textureConfig=f(this.gl,this.textureHalfFloatExtension)}get debug(){return(0,a.env)().getBool("DEBUG")}dispose(){if(this.disposed)return;null!=this.program&&console.warn("Disposing a GPGPUContext that still has a bound WebGLProgram. This is probably a resource leak, delete the program with GPGPUContext.deleteProgram before disposing."),null!=this.outputTexture&&console.warn("Disposing a GPGPUContext that still has a bound output matrix texture.  This is probably a resource leak, delete the output matrix texture with GPGPUContext.deleteMatrixTexture before disposing.");const e=this.gl;m(e,(()=>e.finish())),m(e,(()=>e.bindFramebuffer(e.FRAMEBUFFER,null))),m(e,(()=>e.deleteFramebuffer(this.framebuffer))),m(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,null))),m(e,(()=>e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null))),m(e,(()=>e.deleteBuffer(this.indexBuffer))),this.disposed=!0}createFloat32MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=d(t,n);return _e(e,a,s,Re(r),r.textureFormatFloat,e.FLOAT)}(this.gl,e,t,this.textureConfig)}createFloat16MatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=d(t,n);return _e(e,a,s,Ae(r),r.textureFormatFloat,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createUnsignedBytesMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=d(t,n);return _e(e,a,s,Oe(r),e.RGBA,e.UNSIGNED_BYTE)}(this.gl,e,t,this.textureConfig)}uploadPixelDataToTexture(e,t){this.throwIfDisposed(),function(e,t,n){m(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),n.data instanceof Uint8Array?2===(0,a.env)().getNumber("WEBGL_VERSION")?m(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n.width,n.height,e.RGBA,e.UNSIGNED_BYTE,n.data))):m(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,n.width,n.height,0,e.RGBA,e.UNSIGNED_BYTE,n.data))):2===(0,a.env)().getNumber("WEBGL_VERSION")?m(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,e.RGBA,e.UNSIGNED_BYTE,n))):m(e,(()=>e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,n))),m(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t)}uploadDenseMatrixToTexture(e,t,n,r){this.throwIfDisposed(),function(e,t,n,r,s,o){let i,u,l;m(e,(()=>e.bindTexture(e.TEXTURE_2D,t))),s instanceof Uint8Array?(i=new Uint8Array(n*r*4),u=e.UNSIGNED_BYTE,l=e.RGBA):(i=new Float32Array(n*r*4),u=e.FLOAT,l=o.internalFormatPackedFloat),i.set(s),2===(0,a.env)().getNumber("WEBGL_VERSION")?m(e,(()=>e.texSubImage2D(e.TEXTURE_2D,0,0,0,n,r,e.RGBA,u,i))):m(e,(()=>e.texImage2D(e.TEXTURE_2D,0,l,n,r,0,e.RGBA,u,i))),m(e,(()=>e.bindTexture(e.TEXTURE_2D,null)))}(this.gl,e,t,n,r,this.textureConfig)}createFloat16PackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=h(t,n);return _e(e,a,s,Fe(r),e.RGBA,r.textureTypeHalfFloat)}(this.gl,e,t,this.textureConfig)}createPackedMatrixTexture(e,t){return this.throwIfDisposed(),function(e,t,n,r){const[a,s]=h(t,n);return _e(e,a,s,De(r),e.RGBA,e.FLOAT)}(this.gl,e,t,this.textureConfig)}deleteMatrixTexture(e){this.throwIfDisposed(),this.outputTexture===e&&(N(this.gl,this.framebuffer),this.outputTexture=null),m(this.gl,(()=>this.gl.deleteTexture(e)))}downloadByteEncodedFloatMatrixFromOutputTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n,r){const[a,s]=d(t,n),o=new Uint8Array(t*n*4);return m(e,(()=>e.readPixels(0,0,a,s,r.downloadTextureFormat,e.UNSIGNED_BYTE,o))),new Float32Array(o.buffer)}(this.gl,t,n,this.textureConfig)))}downloadPackedMatrixFromBuffer(e,t,n,r,a,s){return Be(this.gl,e,0,0,0,a,s,this.textureConfig)}downloadFloat32MatrixFromBuffer(e,t){return function(e,t,n){const r=e,a=new Float32Array(n);return r.bindBuffer(r.PIXEL_PACK_BUFFER,t),r.getBufferSubData(r.PIXEL_PACK_BUFFER,0,a),r.bindBuffer(r.PIXEL_PACK_BUFFER,null),a}(this.gl,e,t)}createBufferFromTexture(e,t,n){this.bindTextureToFrameBuffer(e);const r=function(e,t,n,r){const a=e.createBuffer();m(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,a)));const s=16*t*n;return m(e,(()=>e.bufferData(e.PIXEL_PACK_BUFFER,s,e.STREAM_READ))),m(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,0))),m(e,(()=>e.bindBuffer(e.PIXEL_PACK_BUFFER,null))),a}(this.gl,t,n,this.textureConfig);return this.unbindTextureToFrameBuffer(),r}createAndWaitForFence(){const e=this.createFence(this.gl);return this.pollFence(e)}createFence(e){let t,n;if((0,a.env)().getBool("WEBGL_FENCE_API_ENABLED")){const r=e,a=r.fenceSync(r.SYNC_GPU_COMMANDS_COMPLETE,0);e.flush(),n=()=>{const e=r.clientWaitSync(a,0,0);return e===r.ALREADY_SIGNALED||e===r.CONDITION_SATISFIED},t=a}else(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")>0?(t=this.beginQuery(),this.endQuery(),n=()=>this.isQueryAvailable(t,(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))):n=()=>!0;return{query:t,isFencePassed:n}}downloadMatrixFromPackedTexture(e,t,n){return this.downloadMatrixDriver(e,(()=>function(e,t,n){const r=new Float32Array(t*n*4);return m(e,(()=>e.readPixels(0,0,n,t,e.RGBA,e.FLOAT,r))),r}(this.gl,t,n)))}createProgram(e){this.throwIfDisposed();const t=this.gl;null==this.vertexShader&&(this.vertexShader=$e(t));const n=function(e){return I(e,(()=>e.createProgram()),"Unable to create WebGLProgram.")}(t);return m(t,(()=>t.attachShader(n,this.vertexShader))),m(t,(()=>t.attachShader(n,e))),function(e,t){if(m(e,(()=>e.linkProgram(t))),!(0,a.env)().get("ENGINE_COMPILE_ONLY")&&!1===e.getProgramParameter(t,e.LINK_STATUS))throw console.log(e.getProgramInfoLog(t)),new Error("Failed to link vertex and fragment shaders.")}(t,n),this.debug&&v(t,n),this.vertexAttrsAreBound||(this.setProgram(n),this.vertexAttrsAreBound=function(e,t,n){return m(e,(()=>e.bindBuffer(e.ARRAY_BUFFER,n))),w(e,t,"clipSpacePos",n,3,20,0)&&w(e,t,"uv",n,2,20,12)}(t,this.program,this.vertexBuffer)),n}deleteProgram(e){this.throwIfDisposed(),e===this.program&&(this.program=null),null!=e&&m(this.gl,(()=>this.gl.deleteProgram(e)))}setProgram(e){this.throwIfDisposed(),this.program=e,null!=this.program&&this.debug&&v(this.gl,this.program),m(this.gl,(()=>this.gl.useProgram(e)))}getUniformLocation(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];return this.throwIfDisposed(),n?function(e,t,n){return I(e,(()=>e.getUniformLocation(t,n)),'uniform "'+n+'" not present in program.')}(this.gl,e,t):function(e,t,n){return e.getUniformLocation(t,n)}(this.gl,e,t)}getAttributeLocation(e,t){return this.throwIfDisposed(),m(this.gl,(()=>this.gl.getAttribLocation(e,t)))}getUniformLocationNoThrow(e,t){return this.throwIfDisposed(),this.gl.getUniformLocation(e,t)}setInputMatrixTexture(e,t,n){this.throwIfDisposed(),this.throwIfNoProgram(),k(this.gl,e,t,n)}setOutputMatrixTexture(e,t,n){this.setOutputMatrixTextureDriver(e,n,t)}setOutputPackedMatrixTexture(e,t,n){this.throwIfDisposed();const[r,a]=h(t,n);this.setOutputMatrixTextureDriver(e,r,a)}setOutputMatrixWriteRegion(e,t,n,r){this.setOutputMatrixWriteRegionDriver(n,e,r,t)}setOutputPackedMatrixWriteRegion(e,t,n,r){throw new Error("setOutputPackedMatrixWriteRegion not implemented.")}debugValidate(){null!=this.program&&v(this.gl,this.program),T(this.gl)}executeProgram(){this.throwIfDisposed(),this.throwIfNoProgram();const e=this.gl;this.debug&&this.debugValidate(),m(e,(()=>e.drawElements(e.TRIANGLES,6,e.UNSIGNED_SHORT,0)))}blockUntilAllProgramsCompleted(){this.throwIfDisposed(),m(this.gl,(()=>this.gl.finish()))}getQueryTimerExtension(){return null==this.disjointQueryTimerExtension&&(this.disjointQueryTimerExtension=y(this.gl,2===(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")?"EXT_disjoint_timer_query_webgl2":"EXT_disjoint_timer_query")),this.disjointQueryTimerExtension}getQueryTimerExtensionWebGL2(){return this.getQueryTimerExtension()}getQueryTimerExtensionWebGL1(){return this.getQueryTimerExtension()}beginQuery(){if(2===(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2(),n=e.createQuery();return e.beginQuery(t.TIME_ELAPSED_EXT,n),n}const e=this.getQueryTimerExtensionWebGL1(),t=e.createQueryEXT();return e.beginQueryEXT(e.TIME_ELAPSED_EXT,t),t}endQuery(){if(2===(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")){const e=this.gl,t=this.getQueryTimerExtensionWebGL2();return void e.endQuery(t.TIME_ELAPSED_EXT)}const e=this.getQueryTimerExtensionWebGL1();e.endQueryEXT(e.TIME_ELAPSED_EXT)}async waitForQueryAndGetTime(e){return await a.util.repeatedTry((()=>this.disposed||this.isQueryAvailable(e,(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION")))),this.getQueryTime(e,(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_VERSION"))}getQueryTime(e,t){if(0===t)return null;if(2===t){const t=this.gl;return t.getQueryParameter(e,t.QUERY_RESULT)/1e6}{const t=this.getQueryTimerExtensionWebGL1();return t.getQueryObjectEXT(e,t.QUERY_RESULT_EXT)/1e6}}isQueryAvailable(e,t){if(0===t)return!0;if(2===t){const t=this.gl,n=this.getQueryTimerExtensionWebGL2(),r=t.getQueryParameter(e,t.QUERY_RESULT_AVAILABLE);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(n.GPU_DISJOINT_EXT)),r&&!this.disjoint}{const t=this.getQueryTimerExtensionWebGL1(),n=t.getQueryObjectEXT(e,t.QUERY_RESULT_AVAILABLE_EXT);return null==this.disjoint&&(this.disjoint=this.gl.getParameter(t.GPU_DISJOINT_EXT)),n&&!this.disjoint}}pollFence(e){return new Promise((t=>{this.addItemToPoll((()=>e.isFencePassed()),(()=>t()))}))}pollItems(){const e=function(e){let t=0;for(;t<e.length;++t){if(!e[t]())break}return t-1}(this.itemsToPoll.map((e=>e.isDoneFn)));for(let t=0;t<=e;++t){const{resolveFn:e}=this.itemsToPoll[t];e()}this.itemsToPoll=this.itemsToPoll.slice(e+1)}addItemToPoll(e,t){this.itemsToPoll.push({isDoneFn:e,resolveFn:t}),this.itemsToPoll.length>1||a.util.repeatedTry((()=>(this.pollItems(),0===this.itemsToPoll.length)))}bindTextureToFrameBuffer(e){this.throwIfDisposed(),S(this.gl,e,this.framebuffer),this.debug&&T(this.gl)}unbindTextureToFrameBuffer(){null!=this.outputTexture?(S(this.gl,this.outputTexture,this.framebuffer),this.debug&&T(this.gl)):N(this.gl,this.framebuffer)}downloadMatrixDriver(e,t){this.bindTextureToFrameBuffer(e);const n=t();return this.unbindTextureToFrameBuffer(),n}setOutputMatrixTextureDriver(e,t,n){this.throwIfDisposed();const r=this.gl;S(r,e,this.framebuffer),this.debug&&T(r),this.outputTexture=e,m(r,(()=>r.viewport(0,0,t,n))),m(r,(()=>r.scissor(0,0,t,n)))}setOutputMatrixWriteRegionDriver(e,t,n,r){this.throwIfDisposed(),m(this.gl,(()=>this.gl.scissor(e,t,n,r)))}throwIfDisposed(){if(this.disposed)throw new Error("Attempted to use disposed GPGPUContext.")}throwIfNoProgram(){if(null==this.program)throw new Error("No GPU program is currently set.")}}function Pe(e,t){Array.isArray(e)||(e=[e]),e.forEach((e=>{null!=e&&a.util.assert("complex64"!==e.dtype,(()=>`${t} does not support complex64 tensors in the CPU backend.`))}))}function Le(e){const t=new Float32Array(e.length);for(let n=0;n<e.length;++n)t[n]=Math.abs(e[n]);return t}a.Abs;function Ve(e){return(t,n,r,s,o)=>{const i=a.backend_util.assertAndGetBroadcastShape(t,n),u=i.length,l=a.util.computeStrides(i),c=a.util.sizeFromShape(i),d=a.util.getTypedArrayFromDType(o,c),p=t.length,h=n.length,f=a.util.computeStrides(t),m=a.util.computeStrides(n),g=a.backend_util.getBroadcastDims(t,i),y=a.backend_util.getBroadcastDims(n,i);if(g.length+y.length===0)for(let a=0;a<d.length;++a)d[a]=e(r[a%r.length],s[a%s.length]);else for(let x=0;x<d.length;++x){const t=a.util.indexToLoc(x,u,l),n=t.slice(-p);g.forEach((e=>n[e]=0));const o=a.util.locToIndex(n,p,f),i=t.slice(-h);y.forEach((e=>i[e]=0));const c=a.util.locToIndex(i,h,m);d[x]=e(r[o],s[c])}return[d,i]}}function ze(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.data.get(r.dataId).values,o=n.data.get(a.dataId).values,i=n.makeTensorInfo(r.shape,"complex64");return n.data.get(i.dataId).complexTensorInfos={real:n.makeTensorInfo(r.shape,"float32",s),imag:n.makeTensorInfo(a.shape,"float32",o)},i}a.Complex;function Ue(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"float32";if("complex64"===n){return ze({inputs:{real:Ue(e,t,"float32"),imag:Ue(e,t,"float32")},backend:e})}const r=a.util.makeZerosTypedArray(a.util.sizeFromShape(t),n);return e.makeTensorInfo(t,n,r)}function We(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}a.Identity;function Ge(e){const{inputs:t,backend:n}=e,{input:r}=t,a=n.data.get(r.dataId).complexTensorInfos.real,s=n.data.get(a.dataId).values;return n.makeTensorInfo(a.shape,a.dtype,s)}a.Real;function He(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dtype:o}=r;if("complex64"===o){if("complex64"===s.dtype)return We({inputs:{x:s},backend:n});const e=Ue(n,s.shape,s.dtype),t=He({inputs:{x:s},backend:n,attrs:{dtype:"float32"}}),r=ze({inputs:{real:t,imag:e},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),r}if("complex64"===s.dtype){const e=Ge({inputs:{input:s},backend:n}),t=He({inputs:{x:e},backend:n,attrs:{dtype:o}});return n.disposeIntermediateTensorInfo(e),t}if(!a.util.hasEncodingLoss(s.dtype,o)){const e=We({inputs:{x:s},backend:n});return{dataId:e.dataId,shape:e.shape,dtype:o}}if("int32"===o){const e=n.data.get(s.dataId).values,t=Int32Array.from(e);return n.makeTensorInfo(s.shape,"int32",t)}if("bool"===o){const e=n.data.get(s.dataId).values,t=a.util.toTypedArray([0],s.dtype),[r,o]=Ve(((e,t)=>e!==t?1:0))(s.shape,[],e,t,"bool");return n.makeTensorInfo(o,"bool",r)}throw new Error(`Error in Cast: failed to cast ${s.dtype} to ${o}`)}a.Cast;function qe(e,t,n,r){return null==n?n=>{let{inputs:s,backend:o}=n;const{a:i,b:u}=s,l=o;Pe([i,u],e);const c=l.data.get(i.dataId).values,d=l.data.get(u.dataId).values,p="string"===i.dtype?a.backend_util.fromUint8ToStringArray(c):c,h="string"===i.dtype?a.backend_util.fromUint8ToStringArray(d):d,f=r||i.dtype,[m,g]=t(i.shape,u.shape,p,h,f);return l.makeTensorInfo(g,f,m)}:e=>{let{inputs:a,backend:s}=e;const{a:o,b:i}=a,u=s;if("complex64"===o.dtype||"complex64"===i.dtype){const e=He({inputs:{x:o},backend:u,attrs:{dtype:"complex64"}}),t=u.data.get(e.dataId),r=t.complexTensorInfos.real,a=t.complexTensorInfos.imag,s=u.data.get(r.dataId).values,l=u.data.get(a.dataId).values,c=He({inputs:{x:i},backend:u,attrs:{dtype:"complex64"}}),d=u.data.get(c.dataId),p=d.complexTensorInfos.real,h=d.complexTensorInfos.imag,f=u.data.get(p.dataId).values,m=u.data.get(h.dataId).values,[g,y,x]=n(o.shape,i.shape,s,l,f,m),b=u.makeTensorInfo(x,"float32",g),v=u.makeTensorInfo(x,"float32",y),w=ze({inputs:{real:b,imag:v},backend:u});return u.disposeIntermediateTensorInfo(e),u.disposeIntermediateTensorInfo(c),u.disposeIntermediateTensorInfo(b),u.disposeIntermediateTensorInfo(v),w}{const e=u.data.get(o.dataId).values,n=u.data.get(i.dataId).values,a=r||o.dtype,[s,l]=t(o.shape,i.shape,e,n,a);return u.makeTensorInfo(l,a,s)}}}function Xe(e){return(t,n,r,s,o,i)=>{const u=a.backend_util.assertAndGetBroadcastShape(t,n),l=a.util.sizeFromShape(u),c=u.length,d=a.util.computeStrides(u),p=a.util.getTypedArrayFromDType("float32",l),h=a.util.getTypedArrayFromDType("float32",l),f=a.backend_util.getBroadcastDims(t,u),m=a.backend_util.getBroadcastDims(n,u),g=a.backend_util.mergeRealAndImagArrays(r,s),y=a.backend_util.mergeRealAndImagArrays(o,i),x=t.length,b=a.util.computeStrides(t),v=n.length,w=a.util.computeStrides(n);if(f.length+m.length===0)for(let a=0;a<p.length;a++){const t=a%g.length,n=a%y.length,r=e(g[2*t],g[2*t+1],y[2*n],y[2*n+1]);p[a]=r.real,h[a]=r.imag}else for(let k=0;k<p.length;k++){const t=a.util.indexToLoc(k,c,d),n=t.slice(-x);f.forEach((e=>n[e]=0));const r=a.util.locToIndex(n,x,b),s=t.slice(-v);m.forEach((e=>s[e]=0));const o=a.util.locToIndex(s,v,w),i=e(g[2*r],g[2*r+1],y[2*o],y[2*o+1]);p[k]=i.real,h[k]=i.imag}return[p,h,u]}}const Ke=Ve(((e,t)=>e+t)),je=Xe(((e,t,n,r)=>({real:e+n,imag:t+r})));qe(a.Add,Ke,je),a.Add;function Ye(e,t,n,r,s){const o=a.util.sizeFromShape(r),i=a.util.makeZerosTypedArray(s,n);for(let a=0;a<e.length;a++){const n=e[a];if(n<0)throw new Error("Input x must be non-negative!");n>=s||(i[n]+=o>0?t[a]:1)}return i}function Qe(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const s=e.shape[0],o=e.shape[1],i=(0,a.buffer)([s,n],t.dtype);for(let a=0;a<s;a++)for(let s=0;s<o;s++){const o=e.get(a,s);if(o<0)throw new Error("Input x must be non-negative!");o>=n||(r?i.set(1,a,o):t.size>0?i.set(i.get(a,o)+t.get(a,s),a,o):i.set(i.get(a,o)+1,a,o))}return i}function Ze(e){return(t,n,r)=>{const s=a.util.getTypedArrayFromDType(n,t.length);for(let a=0;a<t.length;++a)s[a]=e(t[a],r);return s}}function Je(e,t,n){return r=>{let{inputs:s,attrs:o,backend:i}=r;const{x:u}=s;if(Pe(u,e),"string"===u.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const l=i,c=l.data.get(u.dataId).values,d=a.util.sizeFromShape(u.shape),p=n||u.dtype,h=a.util.getArrayFromDType(p,d);for(let e=0;e<d;++e)h[e]=t(c[e],o);return l.makeTensorInfo(u.shape,p,h)}}function et(e,t,n){return r=>{let{inputs:a,attrs:s,backend:o}=r;const{x:i}=a;if(Pe(i,e),"string"===i.dtype||"string"===n)throw new Error("unaryKernelFunc does not support string input/output");const u=o,l=u.data.get(i.dataId).values,c=n||i.dtype,d=t(l,c,s);return u.makeTensorInfo(i.shape,c,d)}}const tt=Ze((e=>Math.ceil(e)));et(a.Ceil,tt),a.Ceil;function nt(e,t,n,r){const s=a.util.getArrayFromDType(n,a.util.sizeFromShape(t));if(r&&"string"!==n){let t=0;e.forEach((e=>{const n=a.util.sizeFromShape(e.shape);s.set(e.vals,t),t+=n}))}else{let r=0;e.forEach((e=>{const o="string"===n?a.backend_util.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let n=0;n<e.shape[0];++n){const a=n*t[1]+r;for(let t=0;t<e.shape[1];++t)s[a+t]=o[i++]}r+=e.shape[1]}))}return s}const rt=Ve(((e,t)=>e===t?1:0)),at=(qe(a.Equal,rt,null,"bool"),a.Equal,Ze((e=>Math.exp(e)))),st=(et(a.Exp,at,"float32"),a.Exp,Ze((e=>Math.expm1(e)))),ot=(et(a.Expm1,st),a.Expm1,Ze((e=>Math.floor(e))));et(a.Floor,ot),a.Floor;function it(e,t,n,r,s,o,i,u,l){const c=(0,a.buffer)([r,o],n);for(let a=0;a<r;a++){const n=[];let r=0;for(let t=0;t<s;t++){const o=e[a*s+t];r+=o*i[t],n.push(o)}if(r<0||r>=l/o)throw new Error(`Invalid indices: ${n} does not index into ${u}`);for(let e=0;e<o;e++)c.values[a*o+e]=t.get(...t.indexToLoc(r*o+e))}return c}function ut(e,t,n){const r=(0,a.buffer)(n,e.dtype);for(let a=0;a<r.size;++a){const n=r.indexToLoc(a).slice(),s=n[0],o=n[2],i=t.locToIndex([s,o]);n[2]=t.values[i];const u=e.locToIndex(n);0<=u&&u<e.values.length&&(r.values[a]=e.values[u])}return r}const lt=Ve(((e,t)=>e>t?1:0)),ct=(qe(a.Greater,lt,null,"bool"),a.Greater,Ve(((e,t)=>e>=t?1:0))),dt=(qe(a.GreaterEqual,ct,null,"bool"),a.GreaterEqual,Ve(((e,t)=>e<t?1:0))),pt=(qe(a.Less,dt,null,"bool"),a.Less,Ve(((e,t)=>e<=t?1:0)));qe(a.LessEqual,pt,null,"bool"),a.LessEqual;function ht(e,t,n){const r=(t-e)/(n-1),s=a.util.makeZerosTypedArray(n,"float32");s[0]=e;for(let a=1;a<s.length;a++)s[a]=s[a-1]+r;return s}const ft=Ze((e=>Math.log(e)));et(a.Log,ft),a.Log;function mt(e,t,n,r){const s=a.util.getTypedArrayFromDType(r,a.util.sizeFromShape(n));for(let a=0;a<s.length;++a){const n=a*t;let r=e[n];for(let a=0;a<t;++a){const t=e[n+a];(Number.isNaN(t)||t>r)&&(r=t)}s[a]=r}return s}const gt=Ve(((e,t)=>Math.max(e,t))),yt=(qe(a.Maximum,gt),a.Maximum,Ve(((e,t)=>Math.min(e,t)))),xt=(qe(a.Minimum,yt),a.Minimum,Ve(((e,t)=>e*t))),bt=Xe(((e,t,n,r)=>({real:e*n-t*r,imag:e*r+t*n})));qe(a.Multiply,xt,bt),a.Multiply;function vt(e,t,n){const r=a.util.createScalarValue(-1,n);return xt([],t,r,e,n)}a.Neg;const wt=Ve(((e,t)=>e!==t?1:0));qe(a.NotEqual,wt,null,"bool"),a.NotEqual;function kt(e,t,n,r,s){const o=t.length,i=a.util.sizeFromShape(t),u=a.util.computeStrides(t),l=a.util.computeStrides(s),c=a.util.getTypedArrayFromDType(n,a.util.sizeFromShape(s));for(let d=0;d<i;++d){const t=a.util.indexToLoc(d,o,u),n=new Array(t.length);for(let e=0;e<n.length;e++)n[e]=t[r[e]];c[a.util.locToIndex(n,o,l)]=e[d]}return c}a.Transpose;function St(e,t,n,r){const[s,o]=a.backend_util.computeOutAndReduceShapes(e,r),i=(0,a.upcastType)(t,"int32"),u=a.util.makeZerosTypedArray(a.util.sizeFromShape(s),i),l=a.util.sizeFromShape(o);for(let a=0;a<u.length;++a){const e=a*l;let t=1;for(let r=0;r<l;++r)t*=n[e+r];u[a]=t}return{outVals:u,outShape:s,outDtype:i}}a.Prod;function Nt(e,t,n,r){if(e===t||e<t&&n<0||t<e&&n>1)return a.util.makeZerosTypedArray(0,r);const s=Math.abs(Math.ceil((t-e)/n)),o=a.util.makeZerosTypedArray(s,r);t<e&&1===n&&(n=-1),o[0]=e;for(let a=1;a<o.length;a++)o[a]=o[a-1]+n;return o}const Tt=Ze((e=>1/Math.sqrt(e)));et(a.Rsqrt,Tt),a.Rsqrt;function It(e,t,n,r,s,o,i,u,l,c){const d=[r/s,s],p=e.values,h=t.values;if(0===r)return(0,a.buffer)(n,t.dtype);const f=(0,a.buffer)(d,t.dtype);"string"===typeof l||"number"===typeof l?f.values.fill(l):"boolean"===typeof l&&f.values.fill(+l);for(let a=0;a<o;a++){const e=[];let o=0;for(let t=0;t<i;t++){const n=p[a*i+t];e.push(n),o+=n*u[t]}if(o<0||o>=r/s)throw new Error(`Invalid indices: ${e} does not index into ${n}`);for(let n=0;n<s;n++)c?f.values[o*s+n]+=h[a*s+n]:f.values[o*s+n]=0===t.rank?h[0]:h[a*s+n]}return f}const $t=Ze((e=>1/(1+Math.exp(-e))));Je(a.Sigmoid,(e=>1/(1+Math.exp(-e)))),a.Sigmoid;function Ct(e,t,n,r,s){const o=a.slice_util.isSliceContinous(r,t,n),i=a.util.sizeFromShape(n),u=a.util.computeStrides(r);if(o){const n=a.slice_util.computeFlatOffset(t,u);return"string"===s?e.slice(n,n+i):e.subarray(n,n+i)}const l="string"===s?a.backend_util.fromUint8ToStringArray(e):e,c=(0,a.buffer)(r,s,l),d=(0,a.buffer)(n,s);for(let a=0;a<d.size;++a){const e=d.indexToLoc(a),n=e.map(((e,n)=>e+t[n]));d.set(c.get(...n),...e)}return"string"===s?a.backend_util.fromStringArrayToUint8(d.values):d.values}a.Slice;function Et(e,t,n,r,s,o,i){const u=t[0],l=o[0],c=new Array(l),d=new Array(u),p=t[1];if(0===l){if(0!==u)throw new Error(a.backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(u));return[a.util.getArrayFromDType(n,0),[0,p],a.util.getArrayFromDType(s,0),c,d]}let h=!0,f=0;const m=new Array(l).fill(0);for(let y=0;y<u;++y){const t=e[y*p];if(t<0)throw new Error(a.backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(y,t));if(t>=l)throw new Error(a.backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(y,t,l));++m[t],h=h&&t>=f,f=t}let g=!0;for(let a=0;a<l;++a){const e=0===m[a];c[a]=e,g=g&&!e,m[a]=Math.max(m[a],1),a>0&&(m[a]+=m[a-1])}if(g&&h){const t=e,n=r;for(let e=0;e<u;++e)d[e]=e;return[t,[u,p],n,c,d]}{const t=m[l-1],o=a.util.getArrayFromDType(n,t*p),h=a.util.getArrayFromDType(s,t),f=new Array(l).fill(0);for(let n=0;n<u;++n){const t=e[n*p],a=f[t],s=(0===t?0:m[t-1])+a;f[t]++;for(let r=0;r<p;++r)o[s*p+r]=e[n*p+r];h[s]=r[n],d[n]=s}for(let e=0;e<l;++e){if(0===f[e]){const t=0===e?0:m[e-1];o[t*p+0]=e;for(let e=1;e<p;++e)o[t*p+e]=0;h[t]=i}}return[o,[t,p],h,c,d]}}function _t(e,t,n,r,s){const o=a.util.sizeFromShape(r),i=t[0],u=s.length,l=[];let c=1,d=-1;for(let g=0;g<u;++g){const e=s[g];if(-1===e){if(-1!==d)throw new Error(a.backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(d,g));d=g,l.push(1)}else{if(e<0)throw new Error(a.backend_util.getSparseReshapeNegativeOutputDimErrorMessage(g,e));c*=e,l.push(e)}}if(-1!==d){if(c<=0)throw new Error(a.backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());const e=Math.trunc(o/c);if(c*e!==o)throw new Error(a.backend_util.getSparseReshapeInputOutputMultipleErrorMessage(r,l));l[d]=e}if(a.util.sizeFromShape(l)!==o)throw new Error(a.backend_util.getSparseReshapeInputOutputMismatchErrorMessage(r,l));const p=r.length,h=[];if(p>0){h[p-1]=1;for(let e=p-2;e>=0;--e)h[e]=h[e+1]*r[e+1]}const f=[];if(u>0){f[u-1]=1;for(let e=u-2;e>=0;--e)f[e]=f[e+1]*l[e+1]}const m=a.util.getArrayFromDType(n,i*u);for(let a=0;a<i;++a){let t=0;for(let n=0;n<p;++n)t+=e[a*p+n]*h[n];for(let e=0;e<u;++e)m[a*u+e]=Math.trunc(t/f[e]),t%=f[e]}return[m,[i,u],l]}function Rt(e,t,n,r,s){let o=arguments.length>5&&void 0!==arguments[5]&&arguments[5],i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0;const u=r.length,l=[t[0],e.length/t[0]],c=l[1],d=u>0?s[u-1]+1:0,p=d;if(p<0)throw new Error(a.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());const h=t.slice();h[0]=p;const f=h.reduce(((e,t)=>e*t),1),m=a.util.getArrayFromDType(n,f);if(0===u)return p>0&&m.fill(i),[m,h];if(p<=0)throw new Error(a.backend_util.getSparseSegmentReductionNegativeSegmentIdsErrorMessage());let g=0,y=1,x=0,b=s[g];for(;;){let t=0;if(y<u){if(t=s[y],b===t){++y;continue}if(b>=t)throw new Error(a.backend_util.getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage())}if(b<0||b>=p)throw new Error(a.backend_util.getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage(b,p));b>x&&m.fill(i,x*c,b*c);for(let n=g;n<y;++n){const t=r[n];if(t<0||t>=l[0])throw new Error(a.backend_util.getSparseSegmentReductionIndicesOutOfRangeErrorMessage(n,r[n],l[0]));for(let n=0;n<c;n++)m[b*c+n]+=e[t*c+n]}if(o)for(let e=0;e<c;e++)m[b*c+e]/=y-g;if(g=y,++y,x=b+1,b=t,y>u)break}return x<p&&m.fill(i,x*c,p*c),[m,h]}const At=Ze((e=>Math.sqrt(e))),Ot=(Je(a.Sqrt,(e=>Math.sqrt(e))),a.Sqrt,Ve(((e,t)=>{const n=e-t;return n*n})));qe(a.SquaredDifference,Ot),a.SquaredDifference;function Dt(e,t,n,r){const s=(0,a.buffer)(e,t.dtype);for(let a=0;a<s.size;a++){const e=s.indexToLoc(a),o=new Array(e.length);for(let t=0;t<o.length;t++)o[t]=e[t]*n[t]+r[t];s.set(t.get(...o),...e)}return s}class Ft{constructor(e,t,n,r,s,o){this.separator=a.util.encodeString(e),this.nGramWidths=t,this.leftPad=a.util.encodeString(n),this.rightPad=a.util.encodeString(r),this.padWidth=s,this.preserveShort=o}getPadWidth(e){return Math.min(this.padWidth<0?e-1:this.padWidth,e-1)}getNumNGrams(e,t){const n=this.getPadWidth(t);return Math.max(0,e+2*n-t+1)}createNGrams(e,t,n,r,a,s){for(let o=0;o<a;++o){const i=this.getPadWidth(s),u=Math.max(0,i-o),l=Math.max(0,i-(a-(o+1))),c=s-(u+l),d=t+(u>0?0:o-i);let p=0;p+=u*this.leftPad.length;for(let t=0;t<c;++t)p+=e[d+t].length;p+=l*this.rightPad.length;p+=(u+l+c-1)*this.separator.length,n[r+o]=new Uint8Array(p);const h=n[r+o];let f=0;const m=e=>e.forEach((e=>h[f++]=e));for(let e=0;e<u;++e)m(this.leftPad),m(this.separator);for(let t=0;t<c-1;++t)m(e[d+t]),m(this.separator);if(c>0){m(e[d+c-1]);for(let e=0;e<l;++e)m(this.separator),m(this.rightPad)}else{for(let e=0;e<l-1;++e)m(this.rightPad),m(this.separator);m(this.rightPad)}}}compute(e,t){const n=e.length,r=t.length;if(r>0){let e=t[0];if(0!==e)throw new Error(`First split value must be 0, got ${e}`);for(let a=1;a<r;++a){let r=t[a]>=e;if(r=r&&t[a]<=n,!r)throw new Error(`Invalid split value ${t[a]}, must be in [${e}, ${n}]`);e=t[a]}if(e!==n)throw new Error(`Last split value must be data size. Expected ${n}, got ${e}`)}const s=r-1,o=a.util.getArrayFromDType("int32",r);if(0===n||0===r){const e=new Array(n);for(let t=0;t<=s;++t)o[t]=0;return[e,o]}o[0]=0;for(let a=1;a<=s;++a){const e=t[a]-t[a-1];let n=0;this.nGramWidths.forEach((t=>{n+=this.getNumNGrams(e,t)})),this.preserveShort&&e>0&&0===n&&(n=1),o[a]=o[a-1]+n}const i=new Array(o[s]);for(let a=0;a<s;++a){const n=t[a];let r=o[a];if(this.nGramWidths.forEach((s=>{const o=t[a+1]-t[a],u=this.getNumNGrams(o,s);this.createNGrams(e,n,i,r,u,s),r+=u})),this.preserveShort&&r===o[a]){const s=t[a+1]-t[a];if(0===s)continue;const o=s+2*this.padWidth,u=1;this.createNGrams(e,n,i,r,u,o)}}return[i,o]}}function Bt(e,t,n,r,a,s,o,i){return new Ft(n,r,a,s,o,i).compute(e,t)}function Mt(e,t,n,r){if(!e.length)return;if(0===t.length){for(let t=0;t<e.length;++t)r.push(e.subarray(t,t+1));return}if(1===t.length){const a=t[0];let s=e.indexOf(a);for(;-1!==s;){const t=e.subarray(0,s);n&&0===t.length||r.push(t),s=(e=e.subarray(s+1)).indexOf(a)}return void(n&&0===e.length||r.push(e))}let a=0;for(let s=0;s<e.length+1;s++)if(s===e.length||-1!==t.indexOf(e[s])){const t=e.subarray(a,s);n&&0===t.length||r.push(t),a=s+1}}function Pt(e,t,n){const r=e.length,s=[];let o=0,i=0;const u=new Array(r);for(let a=0;a<r;++a){const r=s.length;Mt(e[a],t,n,s);const l=s.length-r;u[a]=l,o+=l,i=Math.max(i,l)}const l=a.util.getArrayFromDType("int32",2*o),c=new Array(o),d=[r,i];let p=0;for(let a=0;a<r;++a)for(let e=0;e<u[a];++e)l[2*p]=a,l[2*p+1]=e,c[p]=s[p],++p;return[l,c,d]}function Lt(e,t){const n=a.util.getArrayFromDType("int32",e.length);for(let r=0;r<e.length;++r)n[r]=a.util.fingerPrint64(e[r]).modulo(t).getLowBitsUnsigned();return n}const Vt=Ve(((e,t)=>e-t)),zt=Xe(((e,t,n,r)=>({real:e-n,imag:t-r})));qe(a.Sub,Vt,zt),a.Sub;function Ut(e,t){const n=new Array(e.rank);for(let a=0;a<n.length;a++)n[a]=e.shape[a]*t[a];const r=(0,a.buffer)(n,e.dtype);for(let a=0;a<r.values.length;++a){const t=r.indexToLoc(a),n=new Array(e.rank);for(let r=0;r<n.length;r++)n[r]=t[r]%e.shape[r];const s=e.locToIndex(n);r.values[a]=e.values[s]}return r}const Wt=(e,t)=>{const n=t.value-e.value;return 0===n?e.index-t.index:n};function Gt(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:e.length-1;for(;r>n;){if(r-n>600){const a=r-n+1,s=t-n+1,o=Math.log(a),i=.5*Math.exp(2*o/3),u=.5*Math.sqrt(o*i*(a-i)/a)*Math.sign(s-a/2);Gt(e,t,Math.max(n,Math.floor(t-s*i/a+u)),Math.min(r,Math.floor(t+(a-s)*i/a+u)))}const s=e[t];let o=n,i=r;for(a.util.swap(e,n,t),Wt(e[r],s)>0&&a.util.swap(e,n,r);o<i;){for(a.util.swap(e,o,i),o++,i--;Wt(e[o],s)<0;)o+=1;for(;Wt(e[i],s)>0;)i-=1}0===Wt(e[n],s)?a.util.swap(e,n,i):(i+=1,a.util.swap(e,i,r)),i<=t&&(n=i+1),t<=i&&(r=i-1)}}function Ht(e,t,n,r,s){const o=t[t.length-1],[i,u]=[e.length/o,o],l=a.util.getTypedArrayFromDType(n,i*r),c=a.util.getTypedArrayFromDType("int32",i*r);for(let a=0;a<i;a++){const t=a*u,n=e.subarray(t,t+u);let o=new Array(n.length);n.forEach(((e,t)=>o[t]={value:e,index:t})),r<o.length&&(Gt(o,r),o=o.slice(0,r)),s&&o.sort(Wt);const i=a*r,d=l.subarray(i,i+r),p=c.subarray(i,i+r);for(let e=0;e<r;e++)d[e]=o[e].value,p[e]=o[e].index}const d=t.slice();return d[d.length-1]=r,[(0,a.buffer)(d,n,l),(0,a.buffer)(d,"int32",c)]}function qt(e,t,n,r){const s=a.util.parseAxisParam(t,n)[0],o=[1,n[0],1];for(let a=0;a<s;a++)o[0]*=n[a];o[1]=n[s];for(let a=s+1;a<n.length;a++)o[2]*=n[a];const i={},u=new Int32Array(n[s]),l=new a.TensorBuffer(o,r,e),c=[],d=1===o[0]&&1===o[2];for(let a=0;a<n[s];a++){let t;if(d)t=e[a].toString();else{const e=[];for(let t=0;t<o[0];t++)for(let n=0;n<o[2];n++)e.push(l.get(t,a,n));t=e.join(",")}if(void 0!==i[t])u[a]=i[t];else{const e=Object.keys(i).length;i[t]=e,u[a]=e,c.push(a)}}const p=o.slice();p[1]=Object.keys(i).length;const h=new a.TensorBuffer(p,r);c.forEach(((e,t)=>{for(let n=0;n<o[0];n++)for(let r=0;r<o[2];r++)h.set(l.get(n,e,r),n,t,r)}));const f=n.slice();return f[s]=p[1],{outputValues:h.values,outputShape:f,indices:u}}const{addImpl:Xt,bincountImpl:Kt,bincountReduceImpl:jt,ceilImpl:Yt,concatImpl:Qt,equalImpl:Zt,expImpl:Jt,expm1Impl:en,floorImpl:tn,gatherNdImpl:nn,gatherV2Impl:rn,greaterImpl:an,greaterEqualImpl:sn,lessImpl:on,lessEqualImpl:un,linSpaceImpl:ln,logImpl:cn,maxImpl:dn,maximumImpl:pn,minimumImpl:hn,multiplyImpl:fn,negImpl:mn,notEqualImpl:gn,prodImpl:yn,rangeImpl:xn,rsqrtImpl:bn,scatterImpl:vn,sigmoidImpl:wn,simpleAbsImpl:kn,sliceImpl:Sn,sparseFillEmptyRowsImpl:Nn,sparseReshapeImpl:Tn,sparseSegmentReductionImpl:In,sqrtImpl:$n,stridedSliceImpl:Cn,stringNGramsImpl:En,stringSplitImpl:_n,stringToHashBucketFastImpl:Rn,subImpl:An,tileImpl:On,topKImpl:Dn,transposeImpl:Fn,uniqueImpl:Bn}=r;function Mn(e,t){return["x","y","z","w","u","v"].slice(0,t).map((t=>`${e}.${t}`))}function Pn(e,t){return 1===t?[e]:Mn(e,t)}class Ln{constructor(e){if(this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.enableShapeUniforms=ve(this.outputShape.length),0===this.rank)this.userCode="\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      ";else{const e=Pn("rc",this.rank),t=he(this.rank),n=this.getOutOfBoundsCondition(e),r=this.getSetup(e),a=this.getOutput(e);this.userCode=`\n        void main() {\n          ${t} rc = getOutputCoords();\n\n          if(${n}) {\n            setOutput(vec4(0));\n          } else {\n            ${r}\n\n            setOutput(vec4(${a}));\n          }\n        }\n      `}}getSourceCoordsArr(e){const t=[];for(let n=0;n<=1;n++)for(let r=0;r<=1;r++){let a=`${0===n?"r":"rp1"}, ${0===r?"c":"cp1"}`;for(let t=2;t<this.rank;t++)a=`${e[e.length-1-t]},`+a;t.push(a)}return t}getOutOfBoundsCondition(e){if(1===this.rank)return`rc > ${this.enableShapeUniforms?"outShape":this.outputShape[0]}`;let t="";for(let n=this.rank-2;n<this.rank;n++)t+=`${e[n]} >= ${this.enableShapeUniforms?`outShape[${n}]`:this.outputShape[n]}`,n<this.rank-1&&(t+="||");return t}getSetup(e){if(1===this.rank)return"";const t=e.slice(-2),n=this.enableShapeUniforms?`outShape[${this.rank} - 1]`:this.outputShape[this.rank-1],r=this.enableShapeUniforms?`outShape[${this.rank} - 2]`:this.outputShape[this.rank-2];return`\n      int r = ${t[0]};\n      int c = ${t[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${n};\n      bool rEdge = rp1 >= ${r};\n    `}getOutput(e){const t=this.getSourceCoordsArr(e);if(1===this.rank){return`getA(rc), (rc + 1 >= ${this.enableShapeUniforms?"outShape":this.outputShape[0]} ? 0. : getA(rc + 1)), 0, 0`}return`getA(${t[0]}),\n            cEdge ? 0. : getA(${t[1]}),\n            rEdge ? 0. : getA(${t[2]}),\n            rEdge || cEdge ? 0. : getA(${t[3]})`}}class Vn{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec3"}],this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length);let n="";for(let s=0;s<4;s++){let e="thisRC = rc;";s%2===1&&(e+="thisRC.z += 1;"),s>1&&(e+="thisRC.y += 1;"),n+=`\n        ${e}\n        ${s>0?"if(thisRC.y < rows && thisRC.z < cols){":""}\n          int flatIndex = getFlatIndex(thisRC);\n\n          ivec3 inputRC = inputCoordsFromReshapedOutCoords(flatIndex);\n          vec2 inputRCInnerDims = vec2(float(inputRC.y),float(inputRC.z));\n\n          result[${s}] =\n            getChannel(getA(inputRC.x, inputRC.y, inputRC.z), inputRCInnerDims);\n        ${s>0?"}":""}\n      `}var r,a;this.userCode=`\n      ${r=t,a=this.enableShapeUniforms,`\n    ivec3 inputCoordsFromReshapedOutCoords(int index) {\n      ${a?function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"index";const r=G(e.map(((e,t)=>t)),t);return r.map(((t,a)=>`int ${e[a]} = ${n} / ${r[a]}; ${a===r.length-1?`int ${e[a+1]} = ${n} - ${e[a]} * ${r[a]}`:`index -= ${e[a]} * ${r[a]}`};`)).join("")}(["r","c","d"],"inputShape"):U(["r","c","d"],r)}\n      return ivec3(r, c, d);\n    }\n  `}\n      ${this.enableShapeUniforms?"\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n":H(e)}\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0.);\n\n        ivec3 thisRC;\n        int rows = ${this.enableShapeUniforms?"outShape[1]":e[1]};\n        int cols = ${this.enableShapeUniforms?"outShape[2]":e[2]};\n\n        ${n}\n\n        setOutput(result);\n      }\n    `}}class zn{constructor(e){this.gpgpu=e,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0,this.freeTextures={},this.logEnabled=!1,this.usedTextures={}}acquireTexture(e,t,n){const r=Wn(t,n),a=Gn(e,r,n);a in this.freeTextures||(this.freeTextures[a]=[]),a in this.usedTextures||(this.usedTextures[a]=[]);const s=Un(e,r,this.gpgpu.gl,this.gpgpu.textureConfig,n);if(this.freeTextures[a].length>0){this.numFreeTextures--,this.numUsedTextures++,this._numBytesFree-=s,this.log();const e=this.freeTextures[a].shift();return this.usedTextures[a].push(e),e}let o;return r===c.PACKED_2X2_FLOAT32?o=this.gpgpu.createPackedMatrixTexture(e[0],e[1]):r===c.PACKED_2X2_FLOAT16?o=this.gpgpu.createFloat16PackedMatrixTexture(e[0],e[1]):r===c.UNPACKED_FLOAT32?o=this.gpgpu.createFloat32MatrixTexture(e[0],e[1]):r===c.UNPACKED_FLOAT16?o=this.gpgpu.createFloat16MatrixTexture(e[0],e[1]):r===c.PACKED_4X1_UNSIGNED_BYTE&&(o=this.gpgpu.createUnsignedBytesMatrixTexture(e[0],e[1])),this.usedTextures[a].push(o),this.numUsedTextures++,this._numBytesAllocated+=s,this.log(),o}releaseTexture(e,t,n,r){if(null==this.freeTextures)return;const s=Wn(n,r),o=Gn(t,s,r);o in this.freeTextures||(this.freeTextures[o]=[]);const i=Un(t,s,this.gpgpu.gl,this.gpgpu.textureConfig,r),u=(0,a.env)().get("WEBGL_DELETE_TEXTURE_THRESHOLD");-1!==u&&this._numBytesAllocated>u?(this.gpgpu.deleteMatrixTexture(e.texture),this._numBytesAllocated-=i):(this.freeTextures[o].push(e),this.numFreeTextures++,this._numBytesFree+=i),this.numUsedTextures--;const l=this.usedTextures[o],c=l.indexOf(e);if(c<0)throw new Error("Cannot release a texture that was never provided by this texture manager");l.splice(c,1),this.log()}log(){if(!this.logEnabled)return;const e=this.numFreeTextures+this.numUsedTextures;console.log("Free/Used",`${this.numFreeTextures} / ${this.numUsedTextures}`,`(${e})`);const t=this._numBytesFree/this._numBytesAllocated;console.log(`Bytes allocated: ${this._numBytesAllocated}`),console.log(`Bytes unused: ${this._numBytesFree} (${Math.round(100*t)}%)`)}get numBytesAllocated(){return this._numBytesAllocated}get numBytesFree(){return this._numBytesFree}getNumUsedTextures(){return this.numUsedTextures}getNumFreeTextures(){return this.numFreeTextures}dispose(){if(null!=this.freeTextures){for(const e in this.freeTextures)this.freeTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));for(const e in this.usedTextures)this.usedTextures[e].forEach((e=>{this.gpgpu.deleteMatrixTexture(e.texture)}));this.freeTextures=null,this.usedTextures=null,this.numUsedTextures=0,this.numFreeTextures=0,this._numBytesAllocated=0,this._numBytesFree=0}}}function Un(e,t,n,r,a){const s=function(e,t){switch(e){case c.PACKED_2X2_FLOAT32:return De(t);case c.PACKED_2X2_FLOAT16:return Fe(t);case c.UNPACKED_FLOAT32:return Re(t);case c.UNPACKED_FLOAT16:return Ae(t);case c.PACKED_4X1_UNSIGNED_BYTE:return Oe(t);default:throw new Error(`Unknown physical texture type ${e}`)}}(t,r);let o;if(a){const[t,n]=h(e[0],e[1]);o=t*n}else{const[t,n]=d(e[0],e[1]);o=t*n}const i=function(e,t){const n=e;if(t===n.R32F)return 4;if(t===n.R16F)return 2;if(t===n.RGBA32F)return 16;if(t===e.RGBA)return 16;if(t===n.RGBA16F)return 8;if(t===n.RGBA8)return 4;throw new Error(`Unknown internal format ${t}`)}(n,s);return o*i}function Wn(e,t){if(e===l.UPLOAD)return c.PACKED_2X2_FLOAT32;if(e===l.RENDER||null==e)return function(e){return(0,a.env)().getBool("WEBGL_RENDER_FLOAT32_ENABLED")?e?c.PACKED_2X2_FLOAT32:c.UNPACKED_FLOAT32:e?c.PACKED_2X2_FLOAT16:c.UNPACKED_FLOAT16}(t);if(e===l.DOWNLOAD||e===l.PIXELS)return c.PACKED_4X1_UNSIGNED_BYTE;throw new Error(`Unknown logical texture type ${e}`)}function Gn(e,t,n){return`${e[0]}_${e[1]}_${t}_${n}`}class Hn{constructor(e,t){this.variableNames=["A"],this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length),this.userCode=`\n      float unaryOperation(float x) {\n        ${t}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}const qn="if (isnan(x)) return x;",Xn="return x;",Kn="return abs(x);";const jn="return (x >= 0.0) ? x : (exp(x) - 1.0);",Yn=qn+"\n  return (x < 0.0) ? 0.0 : x;\n",Qn=qn+"\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",Zn="return x;",Jn="return 1.0 / (1.0 + exp(-1.0 * x));",er="return x;",tr="\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n",nr="\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",rr="\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",ar="return 1.0 / (1.0 + exp(-1.0 * x));";class sr{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length),this.userCode=`\n      vec4 unaryOperation(vec4 x) {\n        ${t}\n      }\n\n      void main() {\n        vec4 x = getAAtOutCoords();\n        vec4 y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `}}class or{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!1,this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length);const t=e.length,n=Pn("rc",t),r=he(t),a=function(e,t){if(1===e)return"rc";let n="";for(let r=0;r<e;r++)n+=t[r],r<e-1&&(n+=",");return n}(t,n),s=n.slice(-2),o=t<=1?"rc":`vec2(${s.join(",")})`;this.userCode=`\n      void main() {\n        ${r} rc = getOutputCoords();\n        vec4 packedInput = getA(${a});\n\n        setOutput(getChannel(packedInput, ${o}));\n      }\n    `}}const ir=a.kernel_impls.whereImpl,ur={};const lr=(0,a.env)().getNumber("CPU_HANDOFF_SIZE_THRESHOLD");class cr extends a.KernelBackend{constructor(e){if(super(),this.pendingRead=new WeakMap,this.pendingDisposal=new WeakSet,this.dataRefCount=new WeakMap,this.numBytesInGPU=0,this.uploadWaitMs=0,this.downloadWaitMs=0,this.lastGlFlushTime=0,this.warnedAboutMemory=!1,this.pendingDeletes=0,this.disposed=!1,!(0,a.env)().getBool("HAS_WEBGL"))throw new Error("WebGL is not supported on this device");let t;if(null!=e){if(e instanceof Me)t=e;else{const n=i((0,a.env)().getNumber("WEBGL_VERSION"),e);t=new Me(n)}this.binaryCache={},this.gpgpuCreatedLocally=!1}else{const e=i((0,a.env)().getNumber("WEBGL_VERSION"));t=new Me(e),this.binaryCache=((n=(0,a.env)().getNumber("WEBGL_VERSION"))in ur||(ur[n]={}),ur[n]),this.gpgpuCreatedLocally=!0}var n;this.gpgpu=t,this.canvas=this.gpgpu.gl.canvas,this.textureManager=new zn(this.gpgpu),this.numMBBeforeWarning=null==(0,a.env)().global.screen?1024:(0,a.env)().global.screen.height*(0,a.env)().global.screen.width*window.devicePixelRatio*600/1024/1024,this.texData=new a.DataStorage(this,(0,a.engine)())}nextDataId(){return cr.nextDataId++}numDataIds(){return this.texData.numDataIds()-this.pendingDeletes}write(e,t,n){if(((0,a.env)().getBool("WEBGL_CHECK_NUMERICAL_PROBLEMS")||(0,a.env)().getBool("DEBUG"))&&this.checkNumericalProblems(e),"complex64"===n&&null!=e)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");const r={id:this.nextDataId()};return this.texData.set(r,{shape:t,dtype:n,values:e,usage:l.UPLOAD,refCount:1}),r}refCount(e){if(this.texData.has(e)){return this.texData.get(e).refCount}return 0}incRef(e){this.texData.get(e).refCount++}decRef(e){if(this.texData.has(e)){this.texData.get(e).refCount--}}move(e,t,n,r,s){if((0,a.env)().getBool("DEBUG")&&this.checkNumericalProblems(t),"complex64"===r)throw new Error("Cannot write to a complex64 dtype. Please use tf.complex(real, imag).");this.texData.set(e,{shape:n,dtype:r,values:t,usage:l.UPLOAD,refCount:s})}disposeIntermediateTensorInfo(e){this.disposeData(e.dataId)}readSync(e){const t=this.texData.get(e),{values:n,dtype:r,complexTensorInfos:s,slice:o,shape:i,isPacked:u}=t;if(null!=o){let t;t=u?new sr(i,Zn):new Hn(i,Zn);const n=this.runWebGLProgram(t,[{dataId:e,shape:i,dtype:r}],r),a=this.readSync(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if("string"===r)return n;const l=null!=this.activeTimers;let c,d;if(l&&(c=a.util.now()),"complex64"===r){const e=this.readSync(s.real.dataId),t=this.readSync(s.imag.dataId);d=a.backend_util.mergeRealAndImagArrays(e,t)}else d=this.getValuesFromTexture(e);return l&&(this.downloadWaitMs+=a.util.now()-c),this.convertAndCacheOnCPU(e,d)}async read(e){if(this.pendingRead.has(e)){const t=this.pendingRead.get(e);return new Promise((e=>t.push(e)))}const t=this.texData.get(e),{values:n,shape:r,slice:s,dtype:o,complexTensorInfos:i,isPacked:u}=t;if(null!=s){let t;t=u?new sr(r,Zn):new Hn(r,Zn);const n=this.runWebGLProgram(t,[{dataId:e,shape:r,dtype:o}],o),a=this.read(n.dataId);return this.disposeIntermediateTensorInfo(n),a}if(null!=n)return this.convertAndCacheOnCPU(e);if((0,a.env)().getBool("DEBUG")&&!(0,a.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")&&2===(0,a.env)().getNumber("WEBGL_VERSION"))throw new Error("tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and WEBGL_VERSION=2 not yet supported.");let l,c,d=null;if("complex64"!==o&&(0,a.env)().get("WEBGL_BUFFER_SUPPORTED")){l=this.decode(e);const t=this.texData.get(l.dataId);d=this.gpgpu.createBufferFromTexture(t.texture.texture,...p(r))}if(this.pendingRead.set(e,[]),"complex64"!==o&&await this.gpgpu.createAndWaitForFence(),"complex64"===o){const e=await Promise.all([this.read(i.real.dataId),this.read(i.imag.dataId)]),t=e[0],n=e[1];c=a.backend_util.mergeRealAndImagArrays(t,n)}else if(null==d)c=this.getValuesFromTexture(e);else{const e=a.util.sizeFromShape(r);c=this.gpgpu.downloadFloat32MatrixFromBuffer(d,e)}if(null!=l&&this.disposeIntermediateTensorInfo(l),null!=d){const e=this.gpgpu.gl;m(e,(()=>e.deleteBuffer(d)))}const h=this.convertAndCacheOnCPU(e,c),f=this.pendingRead.get(e);return this.pendingRead.delete(e),f.forEach((e=>e(h))),this.pendingDisposal.has(e)&&(this.pendingDisposal.delete(e),this.disposeData(e)&&(0,a.engine)().removeDataId(e,this),this.pendingDeletes--),h}readToGPU(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=this.texData.get(e),{values:r,shape:s,slice:o,dtype:i,isPacked:u,texture:l}=n;if("complex64"===i)throw new Error("Does not support reading texture for complex64 dtype.");if(null!=o){let n;n=u?new sr(s,Zn):new Hn(s,Zn);const r=this.runWebGLProgram(n,[{dataId:e,shape:s,dtype:i}],i),a=this.readToGPU(r,t);return this.disposeIntermediateTensorInfo(r),a}if(null==l)throw null!=r?new Error("Data is not on GPU but on CPU."):new Error("There is no data on GPU or CPU.");const c=this.decode(e,t.customTexShape),d=(0,a.engine)().makeTensorFromTensorInfo(c),p=this.texData.get(c.dataId);return Object.assign({tensorRef:d},p.texture)}bufferSync(e){const t=this.readSync(e.dataId);if("string"===e.dtype)try{const n=t.map((e=>a.util.decodeString(e)));return(0,a.buffer)(e.shape,e.dtype,n)}catch(n){throw new Error("Failed to decode encoded string bytes into utf-8")}return(0,a.buffer)(e.shape,e.dtype,t)}checkNumericalProblems(e){if(null!=e)for(let t=0;t<e.length;t++){const n=e[t];if(!g(n)){if((0,a.env)().getBool("WEBGL_RENDER_FLOAT32_CAPABLE"))throw Error(`The value ${n} cannot be represented with your current settings. Consider enabling float32 rendering: 'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);throw Error(`The value ${n} cannot be represented on this device.`)}}}getValuesFromTexture(e){const{shape:t,dtype:n,isPacked:r}=this.texData.get(e),s=a.util.sizeFromShape(t);if((0,a.env)().getBool("WEBGL_DOWNLOAD_FLOAT_ENABLED")){const n=this.decode(e),r=this.texData.get(n.dataId),a=this.gpgpu.downloadMatrixFromPackedTexture(r.texture.texture,...p(t)).subarray(0,s);return this.disposeIntermediateTensorInfo(n),a}const o=(0,a.env)().getBool("WEBGL_PACK")&&!0===r,i=o?_(t):t,u=o?new Ne(i):new Se(i),l=this.runWebGLProgram(u,[{shape:i,dtype:n,dataId:e}],"float32"),c=this.texData.get(l.dataId),d=this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(c.texture.texture,c.texShape[0],c.texShape[1]).subarray(0,s);return this.disposeIntermediateTensorInfo(l),d}timerAvailable(){return(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0}time(e){const t=this.activeTimers,n=[];let r=!1;null==this.programTimersStack?(this.programTimersStack=n,r=!0):this.activeTimers.push(n),this.activeTimers=n,e();const s=a.util.flatten(this.activeTimers.map((e=>e.query))).filter((e=>null!=e)),o=a.util.flatten(this.activeTimers.map((e=>e.name))).filter((e=>null!=e));this.activeTimers=t,r&&(this.programTimersStack=null);const i={uploadWaitMs:this.uploadWaitMs,downloadWaitMs:this.downloadWaitMs,kernelMs:null,wallMs:null};return(async()=>{if((0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0){const e=await Promise.all(s);i.kernelMs=a.util.sum(e),i.getExtraProfileInfo=()=>e.map(((e,t)=>({name:o[t],ms:e}))).map((e=>`${e.name}: ${e.ms}`)).join(", ")}else i.kernelMs={error:"WebGL query timers are not supported in this environment."};return this.uploadWaitMs=0,this.downloadWaitMs=0,i})()}memory(){return{unreliable:!1,numBytesInGPU:this.numBytesInGPU,numBytesInGPUAllocated:this.textureManager.numBytesAllocated,numBytesInGPUFree:this.textureManager.numBytesFree}}startTimer(){return(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?this.gpgpu.beginQuery():{startMs:a.util.now(),endMs:null}}endTimer(e){return(0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0?(this.gpgpu.endQuery(),e):(e.endMs=a.util.now(),e)}async getQueryTime(e){if((0,a.env)().getNumber("WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE")>0)return this.gpgpu.waitForQueryAndGetTime(e);const t=e;return t.endMs-t.startMs}disposeData(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if(this.pendingDisposal.has(e))return!1;if(!this.texData.has(e))return!0;if(t?this.texData.get(e).refCount=0:this.texData.get(e).refCount--,!t&&this.texData.get(e).refCount>0)return!1;if(this.pendingRead.has(e))return this.pendingDisposal.add(e),this.pendingDeletes++,!1;this.releaseGPUData(e);const{complexTensorInfos:n}=this.texData.get(e);return null!=n&&(this.disposeData(n.real.dataId,t),this.disposeData(n.imag.dataId,t)),this.texData.delete(e),!0}releaseGPUData(e){const{texture:t,dtype:n,texShape:r,usage:a,isPacked:s,slice:o}=this.texData.get(e),i=o&&o.origDataId||e,u=this.dataRefCount.get(i);u>1?this.dataRefCount.set(i,u-1):(this.dataRefCount.delete(i),null!=t&&(this.numBytesInGPU-=this.computeBytes(r,n),this.textureManager.releaseTexture(t,r,a,s)));const l=this.texData.get(e);l.texture=null,l.texShape=null,l.isPacked=!1,l.slice=null}getTexture(e){return this.uploadToGPU(e),this.texData.get(e).texture.texture}getDataInfo(e){return this.texData.get(e)}shouldExecuteOnCPU(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:lr;return(0,a.env)().getBool("WEBGL_CPU_FORWARD")&&e.every((e=>null==this.texData.get(e.dataId).texture&&a.util.sizeFromShape(e.shape)<t))}getGPGPUContext(){return this.gpgpu}where(e){a.backend_util.warn("tf.where() in webgl locks the UI thread. Call tf.whereAsync() instead");const t=e.dataSync();return ir(e.shape,t)}packedUnaryOp(e,t,n){const r=new sr(e.shape,t),s=this.compileAndRun(r,[e],n);return(0,a.engine)().makeTensorFromTensorInfo(s)}abs(e){if(this.shouldExecuteOnCPU([e])&&"complex64"!==e.dtype){const t=kn(this.texData.get(e.dataId).values);return this.makeOutput(e.shape,e.dtype,t)}if((0,a.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS"))return this.packedUnaryOp(e,Kn,e.dtype);const t=new Hn(e.shape,Kn),n=this.compileAndRun(t,[e]);return(0,a.engine)().makeTensorFromTensorInfo(n)}makeTensorInfo(e,t,n){let r;if("string"===t&&null!=n&&n.length>0&&a.util.isString(n[0])){const s=n.map((e=>a.util.encodeString(e)));r=this.write(s,e,t)}else r=this.write(n,e,t);return this.texData.get(r).usage=null,{dataId:r,shape:e,dtype:t}}makeOutput(e,t,n){return(0,a.engine)().makeTensorFromTensorInfo(this.makeTensorInfo(e,t,n),this)}unpackTensor(e){const t=new or(e.shape);return this.runWebGLProgram(t,[e],e.dtype)}packTensor(e){const t=new Ln(e.shape);return this.runWebGLProgram(t,[e],e.dtype,null,!0)}packedReshape(e,t){const n=[C(e.shape),...E(e.shape)],r={dtype:e.dtype,shape:n,dataId:e.dataId},a=[C(t),...E(t)],s=new Vn(a,n),o=[n],i=this.runWebGLProgram(s,[r],e.dtype,o,!0);return{dataId:i.dataId,shape:t,dtype:i.dtype}}decode(e,t){const n=this.texData.get(e),{isPacked:r,shape:s,dtype:o}=n;if(null!=t){const e=a.util.sizeFromShape(s),n=t[0]*t[1]*4;a.util.assert(e<=n,(()=>"customTexShape is too small. Row * Column * 4 should be equal or larger than the size of the tensor data."))}const i=_(s);let u;u=r?new ke(i):new we(i);const l=[null!=t?t:p(i)];return{dtype:o,shape:s,dataId:this.runWebGLProgram(u,[{shape:i,dtype:o,dataId:e}],o,l,!0,t).dataId}}runWebGLProgram(e,t,n,r){let s=arguments.length>4&&void 0!==arguments[4]&&arguments[4],o=arguments.length>5?arguments[5]:void 0;const i=this.makeTensorInfo(e.outputShape,n),l=this.texData.get(i.dataId);if(e.packedOutput&&(l.isPacked=!0),e.outPackingScheme===u.DENSE){const t=null!=o?o:p(e.outputShape);l.texShape=t.map((e=>2*e))}if(null!=e.outTexUsage&&(l.usage=e.outTexUsage),0===a.util.sizeFromShape(i.shape))return l.values=a.util.getTypedArrayFromDType(i.dtype,0),i;const c=[],d=t.map((t=>{if("complex64"===t.dtype)throw new Error("GPGPUProgram does not support complex64 input. For complex64 dtypes, please separate the program into real and imaginary parts.");let n=this.texData.get(t.dataId);if(null==n.texture){if(!e.packedInputs&&a.util.sizeFromShape(t.shape)<=(0,a.env)().getNumber("WEBGL_SIZE_UPLOAD_UNIFORM"))return{shape:t.shape,texData:null,isUniform:!0,uniformValues:n.values};e.packedInputs&&(n.isPacked=!0,n.shape=t.shape)}if(this.uploadToGPU(t.dataId),!!n.isPacked!==!!e.packedInputs)t=n.isPacked?this.unpackTensor(t):this.packTensor(t),c.push(t),n=this.texData.get(t.dataId);else if(n.isPacked&&!A(n.shape,t.shape)){const e=t,r=t.shape;t.shape=n.shape,t=this.packedReshape(t,r),c.push(t),n=this.texData.get(t.dataId),e.shape=r}return{shape:t.shape,texData:n,isUniform:!1}}));this.uploadToGPU(i.dataId);const h={shape:i.shape,texData:l,isUniform:!1},f=function(e,t,n){let r="";t.concat(n).forEach((t=>{const s=null!=t.texData&&null!=t.texData.slice&&t.texData.slice.flatOffset>0;if(e.enableShapeUniforms&&!t.isUniform){const o=t.texData.texShape,{useSqueezeShape:i,uniformShape:u,keptDims:l}=fe(e.packedInputs,t.shape,o);let c="",d="",p="";if(1===u.length&&e.packedInputs){const e=[Math.ceil(o[0]/2),Math.ceil(o[1]/2)];c=`${e[0]>1}_${e[1]>1}`}else if(2!==u.length||e.packedInputs){if(u.length>2&&!e.packedInputs){const e=a.util.computeStrides(u);p=`${e[0]===o[1]}_${e[e.length-1]===o[1]}`}}else d=`${u[0]>1}_${u[1]>1}`;const h=t.shape.length,f=2===u.length&&a.util.arraysEqual(t.shape,o),m=1===a.util.sizeFromShape(t.shape),g=a.backend_util.getBroadcastDims(t.shape,n.shape),y=!e.packedInputs&&h===n.shape.length&&a.util.arraysEqual(o,n.texData.texShape),x=e.packedInputs||u.length>2?"":`${o[0]>1}_${o[1]>1}`;r+=`${h}_${y}_${i?l:""}_${u.length}_${m}_${g}_${f}_${c}_${d}_${p}_${x}_${s}`}else{const e=t.isUniform?"uniform":t.texData.texShape;r+=`${t.shape}_${e}_${s}`}}));const s=e.userCode;let o=e.constructor.name;return o+="_"+r+"_"+s+`${(0,a.env)().getNumber("WEBGL_VERSION")}`,o}(e,d,h),m=this.getAndSaveBinary(f,(()=>ye(this.gpgpu,e,d,h))),g=null!=this.activeTimers;let y;g&&(y=this.startTimer()),(0,a.env)().get("ENGINE_COMPILE_ONLY")||function(e,t,n,r,s){t.program.enableShapeUniforms||(be(t.inShapeInfos,n),be([t.outShapeInfo],[r]));const o=r.texData.texture,i=r.texData.texShape;r.texData.isPacked?e.setOutputPackedMatrixTexture(o.texture,i[0],i[1]):e.setOutputMatrixTexture(o.texture,i[0],i[1]),e.setProgram(t.webGLProgram),1===(0,a.env)().getNumber("WEBGL_VERSION")&&null!==t.infLoc&&e.gl.uniform1f(t.infLoc,1/0),null!==t.nanLoc&&e.gl.uniform1f(t.nanLoc,NaN),n.forEach(((n,r)=>{const s=t.program.variableNames[r],o=t.uniformLocations[s],i=t.uniformLocations[`offset${s}`],u=t.inShapesLocations[`${s}Shape`],l=t.inTexShapesLocations[`${s}TexShape`];if(u){const{uniformShape:r}=fe(t.program.packedInputs,n.shape,n.texData.texShape);switch(r.length){case 1:e.gl.uniform1iv(u,new Int32Array(r));break;case 2:e.gl.uniform2iv(u,new Int32Array(r));break;case 3:e.gl.uniform3iv(u,new Int32Array(r));break;case 4:e.gl.uniform4iv(u,new Int32Array(r))}}if(l&&e.gl.uniform2i(l,n.texData.texShape[0],n.texData.texShape[1]),null!=o)if(n.isUniform)if(a.util.sizeFromShape(n.shape)<2)e.gl.uniform1f(o,n.uniformValues[0]);else{let t=n.uniformValues;t instanceof Float32Array||(t=new Float32Array(t)),e.gl.uniform1fv(o,t)}else null!=n.texData.slice&&null!=i&&e.gl.uniform1i(i,n.texData.slice.flatOffset),e.setInputMatrixTexture(n.texData.texture.texture,o,r)}));const u=t.outShapeLocation;if(u)switch(r.shape.length){case 1:e.gl.uniform1iv(u,new Int32Array(r.shape));break;case 2:e.gl.uniform2iv(u,new Int32Array(r.shape));break;case 3:e.gl.uniform3iv(u,new Int32Array(r.shape));break;case 4:e.gl.uniform4iv(u,new Int32Array(r.shape))}if(t.outShapeStridesLocation){const n=a.util.computeStrides(r.shape);switch(r.shape.length){case 2:e.gl.uniform1iv(t.outShapeStridesLocation,new Int32Array(n));break;case 3:e.gl.uniform2iv(t.outShapeStridesLocation,new Int32Array(n));break;case 4:e.gl.uniform3iv(t.outShapeStridesLocation,new Int32Array(n))}}t.outTexShapeLocation&&e.gl.uniform2i(t.outTexShapeLocation,r.texData.texShape[0],r.texData.texShape[1]),t.program.customUniforms&&s&&t.program.customUniforms.forEach(((n,r)=>{const a=t.customUniformLocations[r],o=s[r];if("float"===n.type)e.gl.uniform1fv(a,o);else if("vec2"===n.type)e.gl.uniform2fv(a,o);else if("vec3"===n.type)e.gl.uniform3fv(a,o);else if("vec4"===n.type)e.gl.uniform4fv(a,o);else if("int"===n.type)e.gl.uniform1iv(a,o);else if("ivec2"===n.type)e.gl.uniform2iv(a,o);else if("ivec3"===n.type)e.gl.uniform3iv(a,o);else{if("ivec4"!==n.type)throw Error(`uniform type ${n.type} is not supported yet.`);e.gl.uniform4iv(a,o)}})),e.executeProgram()}(this.gpgpu,m,d,h,r),c.forEach((e=>this.disposeIntermediateTensorInfo(e))),g&&(y=this.endTimer(y),this.activeTimers.push({name:e.constructor.name,query:this.getQueryTime(y)}));const x=(0,a.env)().get("WEBGL_FLUSH_THRESHOLD");if(x>0){const e=a.util.now();e-this.lastGlFlushTime>x&&(this.gpgpu.gl.flush(),this.lastGlFlushTime=e)}if(!(0,a.env)().getBool("WEBGL_LAZILY_UNPACK")&&l.isPacked&&!1===s){const e=this.unpackTensor(i);return this.disposeIntermediateTensorInfo(i),e}return i}compileAndRun(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];n=n||t[0].dtype;return this.runWebGLProgram(e,t,n,r,a)}getAndSaveBinary(e,t){return e in this.binaryCache||(this.binaryCache[e]=t()),this.binaryCache[e]}getTextureManager(){return this.textureManager}dispose(){if(!this.disposed){if(!(0,a.env)().getBool("IS_TEST")){Object.keys(this.binaryCache).forEach((e=>{this.gpgpu.deleteProgram(this.binaryCache[e].webGLProgram),delete this.binaryCache[e]}))}this.textureManager.dispose(),null!=this.canvas&&"undefined"!==typeof HTMLCanvasElement&&this.canvas instanceof HTMLCanvasElement?this.canvas.remove():this.canvas=null,this.gpgpuCreatedLocally&&(this.gpgpu.program=null,this.gpgpu.dispose()),this.disposed=!0}}floatPrecision(){return null==this.floatPrecisionValue&&(this.floatPrecisionValue=(0,a.tidy)((()=>{if(!(0,a.env)().get("WEBGL_RENDER_FLOAT32_ENABLED")){const e=(0,a.env)().getBool("DEBUG");(0,a.env)().set("DEBUG",!1);const t=this.abs((0,a.scalar)(1e-8)).dataSync()[0];if((0,a.env)().set("DEBUG",e),t>0)return 32}return 16}))),this.floatPrecisionValue}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}uploadToGPU(e){const t=this.texData.get(e),{shape:n,dtype:r,values:s,texture:o,usage:i,isPacked:u}=t;if(null!=o)return;const c=null!=this.activeTimers;let d;c&&(d=a.util.now());let p=t.texShape;if(null==p&&(p=function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=(0,a.env)().getNumber("WEBGL_MAX_TEXTURE_SIZE");if(t&&(n*=2,1===(e=e.map(((t,n)=>n>=e.length-2?a.util.nearestLargerEven(e[n]):e[n]))).length&&(e=[2,e[0]])),2!==e.length){const t=a.util.squeezeShape(e);e=t.newShape}let r=a.util.sizeFromShape(e);if(e.length<=1&&r<=n)return[1,r];if(2===e.length&&e[0]<=n&&e[1]<=n)return e;if(3===e.length&&e[0]*e[1]<=n&&e[2]<=n)return[e[0]*e[1],e[2]];if(3===e.length&&e[0]<=n&&e[1]*e[2]<=n)return[e[0],e[1]*e[2]];if(4===e.length&&e[0]*e[1]*e[2]<=n&&e[3]<=n)return[e[0]*e[1]*e[2],e[3]];if(4===e.length&&e[0]<=n&&e[1]*e[2]*e[3]<=n)return[e[0],e[1]*e[2]*e[3]];if(t){const t=C(e);let n=2,s=2;return e.length&&([n,s]=E(e)),r=t*(n/2)*(s/2),a.util.sizeToSquarishShape(r).map((e=>2*e))}return a.util.sizeToSquarishShape(r)}(n,u),t.texShape=p),null!=s){const e=_(n);let o,i=p[1],f=p[0];const m=s instanceof Uint8Array||s instanceof Uint8ClampedArray;!u&&m||([i,f]=h(p[0],p[1])),o=u?new Ie(e,m):new Te(e,m);const g=m?[f,i]:p,y=this.makeTensorInfo(g,r),x=this.texData.get(y.dataId);x.usage=m?l.PIXELS:l.UPLOAD,x.texShape=g,this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(y.dataId),i,f,s);const b=[[f,i]],v=!0,w=this.runWebGLProgram(o,[y],r,b,v),k=this.texData.get(w.dataId);t.texShape=k.texShape,t.isPacked=k.isPacked,t.usage=k.usage,(0,a.env)().get("ENGINE_COMPILE_ONLY")?this.disposeData(w.dataId):(t.texture=k.texture,t.values=null,this.texData.delete(w.dataId)),this.disposeIntermediateTensorInfo(y),c&&(this.uploadWaitMs+=a.util.now()-d)}else{const e=this.acquireTexture(p,i,r,u);t.texture=e}}convertAndCacheOnCPU(e,t){const n=this.texData.get(e),{dtype:r}=n;return this.releaseGPUData(e),null!=t&&(n.values=function(e,t){if("float32"===t||"complex64"===t)return e;if("int32"===t||"bool"===t){const n="int32"===t?new Int32Array(e.length):new Uint8Array(e.length);for(let t=0;t<n.length;++t)n[t]=Math.round(e[t]);return n}throw new Error(`Unknown dtype ${t}`)}(t,r)),n.values}acquireTexture(e,t,n,r){if(this.numBytesInGPU+=this.computeBytes(e,n),!this.warnedAboutMemory&&this.numBytesInGPU>1024*this.numMBBeforeWarning*1024){const e=(this.numBytesInGPU/1024/1024).toFixed(2);this.warnedAboutMemory=!0,console.warn(`High memory usage in GPU: ${e} MB, most likely due to a memory leak`)}return this.textureManager.acquireTexture(e,t,r)}computeBytes(e,t){return e[0]*e[1]*a.util.bytesPerElement(t)}checkCompileCompletion(){for(const[,e]of Object.entries(this.binaryCache))this.checkCompletion_(e)}async checkCompileCompletionAsync(){const e=[];if(this.gpgpu.parallelCompilationExtension){for(const[,t]of Object.entries(this.binaryCache))e.push(this.checkCompletionAsync_(t));return Promise.all(e)}for(const[,t]of Object.entries(this.binaryCache)){const n=new Promise((e=>{try{this.checkCompletion_(t),e(!0)}catch(n){throw n}}));e.push(n)}return Promise.all(e)}async checkCompletionAsync_(e){return this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.parallelCompilationExtension.COMPLETION_STATUS_KHR)?this.checkCompletion_(e):(await(0,a.nextFrame)(),this.checkCompletionAsync_(e))}checkCompletion_(e){if(!1===this.gpgpu.gl.getProgramParameter(e.webGLProgram,this.gpgpu.gl.LINK_STATUS)){if(console.log(this.gpgpu.gl.getProgramInfoLog(e.webGLProgram)),!1===this.gpgpu.gl.getShaderParameter(e.fragmentShader,this.gpgpu.gl.COMPILE_STATUS))throw b(e.source,this.gpgpu.gl.getShaderInfoLog(e.fragmentShader)),new Error("Failed to compile fragment shader.");throw new Error("Failed to link vertex and fragment shaders.")}return!0}getUniformLocations(){for(const[,e]of Object.entries(this.binaryCache)){const{uniformLocations:t,customUniformLocations:n,infLoc:r,nanLoc:a,inShapesLocations:s,inTexShapesLocations:o,outShapeLocation:i,outShapeStridesLocation:u,outTexShapeLocation:l}=xe(this.gpgpu,e.program,e.webGLProgram);e.uniformLocations=t,e.customUniformLocations=n,e.infLoc=r,e.nanLoc=a,e.inShapesLocations=s,e.inTexShapesLocations=o,e.outShapeLocation=i,e.outShapeStridesLocation=u,e.outTexShapeLocation=l}}}cr.nextDataId=0,a.device_util.isBrowser()&&(0,a.registerBackend)("webgl",(()=>new cr),2);class dr{constructor(e,t,n){this.variableNames=["A","B"],this.outputShape=a.backend_util.assertAndGetBroadcastShape(t,n),this.enableShapeUniforms=ve(this.outputShape.length),this.userCode=`\n      float binaryOperation(float a, float b) {\n        ${e}\n      }\n\n      void main() {\n        float a = getAAtOutCoords();\n        float b = getBAtOutCoords();\n        setOutput(binaryOperation(a, b));\n      }\n    `}}class pr{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];this.variableNames=["A","B"],this.supportsBroadcasting=!0,this.packedInputs=!0,this.packedOutput=!0,this.outputShape=a.backend_util.assertAndGetBroadcastShape(t,n);const s=this.outputShape.length;this.enableShapeUniforms=ve(s);let o="";if(r)if(0===s||1===a.util.sizeFromShape(this.outputShape))o="\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        ";else{if(o=`\n          ${he(s)} coords = getOutputCoords();\n        `,1===s)this.enableShapeUniforms?o+="\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          ":o+=`\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;else{const e=Pn("coords",s);this.enableShapeUniforms?o+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= outShape[${s} - 2];\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= outShape[${s} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `:o+=`\n            bool nextRowOutOfBounds =\n              (${e[s-2]} + 1) >= ${this.outputShape[s-2]};\n            bool nextColOutOfBounds =\n              (${e[s-1]} + 1) >= ${this.outputShape[s-1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `}}this.userCode=`\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${e}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${o}\n\n        setOutput(result);\n      }\n    `}}function hr(e){const{inputs:t,backend:n}=e,{x:r}=t;return n.incRef(r.dataId),{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}const fr={kernelName:a.Identity,backendName:"webgl",kernelFunc:hr};function mr(e){const{inputs:t,backend:n}=e,{real:r,imag:a}=t,s=n.makeTensorInfo(r.shape,"complex64"),o=n.texData.get(s.dataId),i=hr({inputs:{x:r},backend:n}),u=hr({inputs:{x:a},backend:n});return o.complexTensorInfos={real:i,imag:u},s}const gr={kernelName:a.Complex,backendName:"webgl",kernelFunc:mr},yr="return (a < 0.) ? b * a : a;",xr="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const br={kernelName:a.LeakyRelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{alpha:o}=r,i=n.makeTensorInfo([],"float32",a.util.createScalarValue(o,"float32")),u=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new pr(xr,s.shape,i.shape):new dr(yr,s.shape,i.shape),l=n.runWebGLProgram(u,[s,i],"float32");return n.disposeIntermediateTensorInfo(i),l}},vr="return (a < 0.) ? b * a : a;",wr="\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n";const kr={kernelName:a.Prelu,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r,alpha:s}=t,o=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new pr(wr,r.shape,s.shape):new dr(vr,r.shape,s.shape);return n.runWebGLProgram(o,[r,s],"float32")}};function Sr(e){let{opSnippet:t,packedOpSnippet:n,cpuKernelImpl:r,dtype:s}=e;return e=>{let{inputs:o,backend:i}=e;const{x:u}=o,l=i,c=s||u.dtype;if(l.shouldExecuteOnCPU([u])&&null!=r){const e=l.texData.get(u.dataId),t=r(e.values,c);return l.makeTensorInfo(u.shape,c,t)}let d;return d=(0,a.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")&&null!=n?new sr(u.shape,n):new Hn(u.shape,t),l.runWebGLProgram(d,[u],c)}}function Nr(e){let{opSnippet:t,packedOpSnippet:n,checkOutOfBounds:r=!1,supportsComplex:s=!1,cpuKernelImpl:o,dtype:i}=e;return e=>{let{inputs:u,backend:l}=e;const{a:c,b:d}=u,p=l;if(s&&"complex64"===c.dtype){const e=p.texData.get(c.dataId),n=p.texData.get(d.dataId),[r,s]=[[e.complexTensorInfos.real,n.complexTensorInfos.real],[e.complexTensorInfos.imag,n.complexTensorInfos.imag]].map((e=>{const[n,r]=e,s={dataId:n.dataId,dtype:n.dtype,shape:c.shape},o={dataId:r.dataId,dtype:r.dtype,shape:d.shape},i=new dr(t,c.shape,d.shape);return p.runWebGLProgram(i,[s,o],(0,a.upcastType)(n.dtype,r.dtype))})),o=mr({inputs:{real:r,imag:s},backend:p});return p.disposeIntermediateTensorInfo(r),p.disposeIntermediateTensorInfo(s),o}const h=i||(0,a.upcastType)(c.dtype,d.dtype);if(("string"===c.dtype||"string"===d.dtype||p.shouldExecuteOnCPU([c,d]))&&null!=o){const e=p.texData.get(c.dataId).values,t=p.texData.get(d.dataId).values,n="string"===c.dtype?a.backend_util.fromUint8ToStringArray(e):e,r="string"===c.dtype?a.backend_util.fromUint8ToStringArray(t):t,[s,i]=o(c.shape,d.shape,n,r,h),u=p.makeTensorInfo(i,h);return p.texData.get(u.dataId).values=s,u}let f;return f=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")&&null!=n?new pr(n,c.shape,d.shape,r):new dr(t,c.shape,d.shape),p.runWebGLProgram(f,[c,d],h)}}function Tr(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if("linear"===e)return t?er:Xn;if("relu"===e)return t?nr:Yn;if("elu"===e)return t?tr:jn;if("relu6"===e)return t?rr:Qn;if("prelu"===e)return t?wr:vr;if("leakyrelu"===e)return t?xr:yr;if("sigmoid"===e)return t?ar:Jn;throw new Error(`Activation ${e} has not been implemented for the WebGL backend.`)}class Ir{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4],s=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:null,i=arguments.length>7&&void 0!==arguments[7]&&arguments[7],u=arguments.length>8&&void 0!==arguments[8]&&arguments[8];this.variableNames=["matrixA","matrixB"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=n,this.enableShapeUniforms=ve(this.outputShape.length);const l=r?e[1]:e[2],c=Math.ceil(l/2),d=r?"i * 2, rc.y":"rc.y, i * 2",p=a?"rc.z, i * 2":"i * 2, rc.z",h=r?["a.xxyy","a.zzww"]:["a.xxzz","a.yyww"],f=a?["b.xzxz","b.ywyw"]:["b.xyxy","b.zwzw"];let m="",g="";o&&(m=i?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${o}\n        }`:u?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${o}\n        }`:`vec4 activation(vec4 x) {\n          ${o}\n        }`,g="result = activation(result);");const y=s?"result += getBiasAtOutCoords();":"";s&&this.variableNames.push("bias"),i&&this.variableNames.push("preluActivationWeights"),u&&this.variableNames.push("leakyreluAlpha");let x="rc.x",b="rc.x";e[0]<t[0]?x=`int(min(float(rc.x), ${e[0]-1}.))`:t[0]<e[0]&&(b=`int(min(float(rc.x), ${t[0]-1}.))`),this.userCode=`\n      ${m}\n      // Don't use uniform for sharedDimensionPacked for performance.\n      const float sharedDimension = ${c}.0;\n\n      vec4 dot2x2ARowBCol(ivec3 rc) {\n        vec4 result = vec4(0);\n        for (int i = 0; i < ${c}; i++) {\n          int batchA = ${x};\n          int batchB = ${b};\n          vec4 a = getMatrixA(batchA, ${d});\n          vec4 b = getMatrixB(batchB, ${p});\n\n          // These swizzled products need to be separately added.\n          // See: https://github.com/tensorflow/tfjs/issues/1735\n          result += (${h[0]} * ${f[0]});\n          result += (${h[1]} * ${f[1]});\n        }\n        return result;\n      }\n\n      void main() {\n        ivec3 rc = getOutputCoords();\n        vec4 result = dot2x2ARowBCol(rc);\n\n        ${y}\n\n        ${g}\n\n        setOutput(result);\n      }\n    `}}const $r="return areal * breal - aimag * bimag;",Cr="return areal * bimag + aimag * breal;";class Er{constructor(e,t,n){this.variableNames=["AReal","AImag","BReal","BImag"],this.outputShape=a.backend_util.assertAndGetBroadcastShape(t,n),this.userCode=`\n      float binaryOpComplex(\n          float areal, float aimag, float breal, float bimag) {\n        ${e}\n      }\n\n      void main() {\n        float areal = getARealAtOutCoords();\n        float aimag = getAImagAtOutCoords();\n        float breal = getBRealAtOutCoords();\n        float bimag = getBImagAtOutCoords();\n        setOutput(binaryOpComplex(areal, aimag, breal, bimag));\n      }\n    `}}const _r="return a * b;";function Rr(e){const{inputs:t,backend:n}=e,{a:r,b:s}=t,o=a.backend_util.upcastType(r.dtype,s.dtype);if("complex64"===r.dtype){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),a=new Er($r,r.shape,s.shape),o=new Er(Cr,r.shape,s.shape),i=[{dataId:e.complexTensorInfos.real.dataId,dtype:e.complexTensorInfos.real.dtype,shape:r.shape},{dataId:e.complexTensorInfos.imag.dataId,dtype:e.complexTensorInfos.imag.dtype,shape:r.shape},{dataId:t.complexTensorInfos.real.dataId,dtype:t.complexTensorInfos.real.dtype,shape:s.shape},{dataId:t.complexTensorInfos.imag.dataId,dtype:t.complexTensorInfos.imag.dtype,shape:s.shape}],u=n.runWebGLProgram(a,i,"float32"),l=n.runWebGLProgram(o,i,"float32"),c=mr({inputs:{real:u,imag:l},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(l),c}if(n.shouldExecuteOnCPU([r,s])){const e=n.texData.get(r.dataId),t=n.texData.get(s.dataId),[a,i]=fn(r.shape,s.shape,e.values,t.values,o),u=n.makeTensorInfo(i,o);return n.texData.get(u.dataId).values=a,u}let i;return i=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new pr(_r,r.shape,s.shape):new dr(_r,r.shape,s.shape),n.runWebGLProgram(i,[r,s],o)}const Ar={kernelName:a.Multiply,backendName:"webgl",kernelFunc:Rr};function Or(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{shape:o}=r,i=n,u=a.util.sizeFromShape(s.shape),l=a.util.inferFromImplicitShape(o,u),c=a.util.sizeFromShape(l);a.util.assert(u===c,(()=>`The new shape (${l}) has ${c} elements and the old shape (${s.shape}) has ${u} elements. The new shape and old shape must have the same number of elements.`));const d=i.texData.get(s.dataId);return!d.isPacked||A(s.shape,l)||null!==d.texture&&A(d.shape,l)?(i.incRef(s.dataId),{dataId:s.dataId,shape:l,dtype:s.dtype}):function(e,t,n){const r=[C(e.shape),...E(e.shape)],a={dtype:e.dtype,shape:r,dataId:e.dataId},s=[C(t),...E(t)],o=new Vn(s,r),i=[r],u=n.runWebGLProgram(o,[a],e.dtype,i,!0);return{dataId:u.dataId,shape:t,dtype:u.dtype}}(s,l,i)}const Dr={kernelName:a.Reshape,backendName:"webgl",kernelFunc:Or};class Fr{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:s,outSize:o}=e;this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4;let l="sumValue += dot(values, ones);";if(null!=t){const e=1/t;l=`sumValue += dot(values * ${a.util.isInt(e)?e.toPrecision(2):e}, ones);`}let c="";s%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${s}) {\n          return 0.0;\n        }\n      `),this.userCode=`\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(getValue(batch, inIdx), 0.0, 0.0, 0.0);\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1), 0.0, 0.0);\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2), 0.0);\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}class Br{constructor(e,t){this.variableNames=["x"];const{windowSize:n,batchSize:r,inSize:a,outSize:s}=e;this.outputShape=[r,s];let o="0.0",i="";"prod"===t?o="1.0":"min"===t?(o="1.0 / 1e-20",i="min"):"max"===t&&(o="-1.0 / 1e-20",i="max");let u=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"sum"===t?u="sumValue":"prod"===t?u="prodValue":"all"===t?u="allValue":"any"===t&&(u="anyValue");const l=4*Math.floor(n/4),c=n%4;let d=`\n      if (${"sum"===t}) {\n        sumValue += dot(values, ones);\n      } else if (${"prod"===t}) {\n        vec2 tmp = vec2(values[0], values[1]) * vec2(values[2], values[3]);\n        prodValue *= tmp[0] * tmp[1];\n      } else {\n        minMaxValue = ${i}(values, minMaxValue);\n        if (${"min"===t} || ${"max"===t}) {\n          minMaxValue = ${i}(values, minMaxValue);\n          bvec4 isNaN = isnan(values);\n          if (isNaN.r || isNaN.g || isNaN.b || isNaN.a) {\n            minMaxValue = vec4(NAN);\n          }\n        }\n      }\n    `,p="vec4";"all"===t?(o="1.0",d="\n        bool reducedAllValue = all(values);\n        float floatedReducedAllValue = float(reducedAllValue);\n        allValue = float(allValue >= 1.0 && floatedReducedAllValue >= 1.0);\n      ",p="bvec4"):"any"===t&&(o="0.0",d="\n        bool reducedAnyValue = any(values);\n        float floatedReducedAnyValue = float(reducedAnyValue);\n        anyValue = float(anyValue >= 1.0 || floatedReducedAnyValue >= 1.0);\n      ",p="bvec4");let h="";a%n>0&&(h=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `),this.userCode=`\n      const float initializationValue = ${o};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float getValue(int batch, int inIdx) {\n        ${h}\n        return getX(batch, inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${n};\n\n        vec4 minMaxValue = vec4(${o});\n        float prodValue = 1.0;\n        float sumValue = 0.0;\n        float allValue = 1.0;\n        float anyValue = 0.0;\n\n        for (int i = 0; i < ${l}; i += 4) {\n          int inIdx = inOffset + i;\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          ${d}\n        }\n\n        int inIdx = inOffset + ${l};\n        if (${1===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${2===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          ${d}\n        } else if (${3===c}) {\n          ${p} values = ${p}(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          ${d}\n        }\n        setOutput(${u});\n      }\n    `}}function Mr(e,t,n,r){const s=function(e){const t=[];for(;0===t.length||1!==t[t.length-1].outSize;){const n=t.length?t[t.length-1].outSize:e[1],r=a.backend_util.computeOptimalWindowSize(n);t.push({inSize:n,windowSize:r,outSize:Math.ceil(n/r)})}return t}(e.shape);let o=e;for(let a=0;a<s.length;a++){const{inSize:i,windowSize:u,outSize:l}=s[a];let c,d;c="mean"===n?0===a?new Fr({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},i):new Fr({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l}):new Br({windowSize:u,inSize:i,batchSize:e.shape[0],outSize:l},n),d=o,o=r.runWebGLProgram(c,[o],t),d.dataId!==e.dataId&&r.disposeIntermediateTensorInfo(d)}return o}class Pr{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[t[s]];this.outputShape=n,this.rank=n.length;const r=he(this.rank),a=function(e){const t=e.length;if(t>6)throw Error(`Transpose for rank ${t} is not yet supported`);const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u","resRC.v"],r=new Array(t);for(let a=0;a<e.length;a++)r[e[a]]=n[a];return r.join()}(t);this.userCode=`\n    void main() {\n      ${r} resRC = getOutputCoords();\n      setOutput(getA(${a}));\n    }\n    `}}class Lr{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0;const n=new Array(e.length);for(let l=0;l<n.length;l++)n[l]=e[t[l]];if(this.outputShape=n,this.rank=n.length,this.rank>6)throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);const r=he(this.rank),a=Mn("rc",this.rank),s=new Array(this.rank);for(let l=0;l<t.length;l++)s[t[l]]=a[l];const o=`vec2(${s.slice(-2).join()})`,i=`++${a[this.rank-1]} < ${n[this.rank-1]}`,u=`getChannel(getA(${s.join()}), ${o})`;this.userCode=`\n    void main() {\n      ${r} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${u};\n      if(${i}) {\n        result[1] = ${u};\n      }\n      --${a[this.rank-1]};\n      if(++${a[this.rank-2]} < ${n[this.rank-2]}) {\n        result[2] = ${u};\n        if(${i}) {\n          result[3] = ${u};\n        }\n      }\n      setOutput(result);\n    }\n    `}}function Vr(e,t,n){const r=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Lr(e.shape,t):new Pr(e.shape,t);return n.runWebGLProgram(r,[e],e.dtype)}function zr(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:o,keepDims:i}=r;return function(e,t,n,r){const s=t,o=e.shape.length,i=a.util.parseAxisParam(s,e.shape);let u=i;const l=a.backend_util.getAxesPermutation(u,o),c=null!=l;let d=e;c&&(d=Vr(e,l,r),u=a.backend_util.getInnerMostAxes(u.length,o)),a.backend_util.assertAxesAreInnerMostDims("sum",u,o);const[p,h]=a.backend_util.computeOutAndReduceShapes(d.shape,u);let f=p;n&&(f=a.backend_util.expandShapeToKeepDim(p,i));const m=a.util.sizeFromShape(h),g=Or({inputs:{x:d},attrs:{shape:[a.util.sizeFromShape(e.shape)/m,m]},backend:r}),y=Mr(g,(0,a.sumOutType)(e.dtype),"sum",r),x=Or({inputs:{x:y},attrs:{shape:f},backend:r});return r.disposeIntermediateTensorInfo(g),r.disposeIntermediateTensorInfo(y),c&&r.disposeIntermediateTensorInfo(d),x}(s,o,i,n)}const Ur={kernelName:a.Sum,backendName:"webgl",kernelFunc:zr};function Wr(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{perm:s}=r,o=n,i=a.shape.length,u=new Array(i);for(let c=0;c<u.length;c++)u[c]=a.shape[s[c]];let l;if(o.shouldExecuteOnCPU([a])){const e=o.texData.get(a.dataId).values,t=Fn(e,a.shape,a.dtype,s,u);l=o.makeTensorInfo(u,a.dtype);o.texData.get(l.dataId).values=t}else l=Vr(a,s,o);return l}const Gr={kernelName:a.Transpose,backendName:"webgl",kernelFunc:Wr};function Hr(e){let{a:t,b:n,transposeA:r,transposeB:s,backend:o,bias:i=null,preluActivationWeights:u=null,leakyreluAlpha:l=0,activation:c=null}=e;const d=t.shape.length,p=n.shape.length,h=r?t.shape[d-2]:t.shape[d-1],f=s?n.shape[p-1]:n.shape[p-2],m=r?t.shape[d-1]:t.shape[d-2],g=s?n.shape[p-2]:n.shape[p-1],y=t.shape.slice(0,-2),x=n.shape.slice(0,-2),b=a.util.sizeFromShape(y),v=a.util.sizeFromShape(x),w=a.broadcast_util.assertAndGetBroadcastShape(t.shape.slice(0,-2),n.shape.slice(0,-2)).concat([m,g]);a.util.assert(h===f,(()=>`Error in matMul: inner shapes (${h}) and (${f}) of Tensors with shapes ${t.shape} and ${n.shape} and transposeA=${r} and transposeB=${s} must match.`));const k=r?[b,h,m]:[b,m,h],S=s?[v,g,f]:[v,f,g],N=Or({inputs:{x:t},backend:o,attrs:{shape:k}}),T=Or({inputs:{x:n},backend:o,attrs:{shape:S}}),I=[N,T],$=Math.max(b,v),C=r?N.shape[1]:N.shape[2],E=null!=i,_=null!=u,R="leakyrelu"===c,A=null!=c?Tr(c,!0):null;let O;if((1===m||1===g)&&C>1e3&&!1===(E||_||R||null!=A)){let e=N,t=T;r&&(e=Wr({inputs:{x:N},backend:o,attrs:{perm:[0,2,1]}}),I.push(e)),s&&(t=Wr({inputs:{x:T},backend:o,attrs:{perm:[0,2,1]}}),I.push(t));const n=1===g;let a=e;1!==g&&(a=Or({inputs:{x:e},backend:o,attrs:{shape:[$,C,1]}}),I.push(a));const i=1===g?2:1;let u=t;n&&(u=Or({inputs:{x:t},backend:o,attrs:{shape:[$,1,C]}}),I.push(u));const l=Rr({inputs:{a:a,b:u},backend:o});O=zr({inputs:{x:l},backend:o,attrs:{axis:i,keepDims:!0}}),I.push(l)}else{const e=(0,a.upcastType)(t.dtype,n.dtype),c=new Ir(k,S,[$,m,g],r,s,E,A,_,R),d=[N,T];if(null!=i&&d.push(i),_&&d.push(u),R){const e=o.makeTensorInfo([],"float32",a.util.createScalarValue(l,"float32"));d.push(e),I.push(e)}O=o.runWebGLProgram(c,d,e)}const D=Or({inputs:{x:O},backend:o,attrs:{shape:w}});I.push(O);for(const a of I)o.disposeIntermediateTensorInfo(a);return D}const qr={kernelName:a._FusedMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s,bias:o,preluActivationWeights:i}=t,{transposeA:u,transposeB:l,activation:c,leakyreluAlpha:d}=r;return Hr({a:a,b:s,transposeA:u,transposeB:l,backend:n,bias:o,preluActivationWeights:i,leakyreluAlpha:d,activation:c})}},Xr="return abs(x);";const Kr={kernelName:a.Abs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])&&"complex64"!==r.dtype){const e=n.texData.get(r.dataId),t=kn(e.values);return n.makeTensorInfo(r.shape,r.dtype,t)}let s;return s=(0,a.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new sr(r.shape,Xr):new Hn(r.shape,Xr),n.runWebGLProgram(s,[r],r.dtype)}},jr=Sr({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return acos(x);\n"}),Yr={kernelName:a.Acos,backendName:"webgl",kernelFunc:jr},Qr=Sr({opSnippet:"if (isnan(x)) return x;\n  if (x < 1.0) return NAN;\nreturn log(x + sqrt(x * x - 1.0));"}),Zr={kernelName:a.Acosh,backendName:"webgl",kernelFunc:Qr},Jr="return a + b;",ea=Nr({opSnippet:Jr,packedOpSnippet:Jr,supportsComplex:!0,cpuKernelImpl:Xt}),ta={kernelName:a.Add,backendName:"webgl",kernelFunc:ea};class na{constructor(e,t){this.outputShape=[],this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`float v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        float result = ${r};\n        setOutput(result);\n      }\n    `}}class ra{constructor(e,t){this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.variableNames=t.map(((e,t)=>`T${t}`));const n=[];this.variableNames.forEach((e=>{n.push(`vec4 v${e} = get${e}AtOutCoords();`)}));const r=this.variableNames.map((e=>`v${e}`)).join(" + ");this.userCode=`\n      void main() {\n        ${n.join("\n        ")}\n\n        vec4 result = ${r};\n        setOutput(result);\n      }\n    `}}const aa={kernelName:a.AddN,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,s=n;if(1===s.length)return hr({inputs:{x:s[0]},backend:r});if(s.length>(0,a.env)().get("WEBGL_MAX_TEXTURES_IN_SHADER")){const t=Math.floor(s.length/2),n=e({inputs:s.slice(0,t),backend:r}),a=e({inputs:s.slice(t),backend:r});return e({inputs:[n,a],backend:r})}const o=s.map((e=>e.dtype)).reduce(((e,t)=>(0,a.upcastType)(e,t))),i=s.map((e=>e.shape)),u=(0,a.env)().getBool("WEBGL_PACK")?new ra(s[0].shape,i):new na(s[0].shape,i);return r.runWebGLProgram(u,s,o)}};const sa={kernelName:a.All,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:o,keepDims:i}=r,u=s.shape.length,l=a.util.parseAxisParam(o,s.shape);let c=l;const d=a.backend_util.getAxesPermutation(c,u);let p=s;null!=d&&(p=Wr({inputs:{x:s},backend:n,attrs:{perm:d}}),c=a.backend_util.getInnerMostAxes(c.length,u)),a.backend_util.assertAxesAreInnerMostDims("all",c,u);const[h,f]=a.backend_util.computeOutAndReduceShapes(p.shape,c),m=Or({inputs:{x:p},backend:n,attrs:{shape:[-1,a.util.sizeFromShape(f)]}}),g=Mr(m,m.dtype,"all",n);let y;if(i){y=Or({inputs:{x:g},backend:n,attrs:{shape:a.backend_util.expandShapeToKeepDim(h,l)}})}else y=Or({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}};const oa={kernelName:a.Any,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:o,keepDims:i}=r,u=s.shape.length,l=a.util.parseAxisParam(o,s.shape);let c=l;const d=a.backend_util.getAxesPermutation(c,u);let p=s;null!=d&&(p=Wr({inputs:{x:s},backend:n,attrs:{perm:d}}),c=a.backend_util.getInnerMostAxes(c.length,u)),a.backend_util.assertAxesAreInnerMostDims("any",c,u);const[h,f]=a.backend_util.computeOutAndReduceShapes(p.shape,c),m=Or({inputs:{x:p},backend:n,attrs:{shape:[-1,a.util.sizeFromShape(f)]}}),g=Mr(m,m.dtype,"any",n);let y;if(i){y=Or({inputs:{x:g},backend:n,attrs:{shape:a.backend_util.expandShapeToKeepDim(h,l)}})}else y=Or({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}};class ia{constructor(e,t,n){this.variableNames=["A"];const{windowSize:r,batchSize:a,outSize:s}=e;n||this.variableNames.push("bestIndicesA"),this.outputShape=[a,s];const o="max"===t?">":"<",i=n?"inOffset + i;":"round(getBestIndicesA(batch, inOffset + i));";this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${r};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${r}; i++) {\n          int inIdx = ${i};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${o} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `}}class ua{constructor(e,t,n,r){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,a.util.assert(e.length>2,(()=>`Packed arg${n.charAt(0).toUpperCase()+n.slice(1)} supports only inputs with rank above 2.`));const s=e[e.length-1],o=Math.ceil(s/t);this.outputShape=e.slice(0,-1),o>1&&this.outputShape.push(o),r||this.variableNames.push("bestIndicesA");const i=this.outputShape,u=i.length,l=he(u),c=Pn("coords",u);let d,p;if(1===o){p=u+1;const e=he(p);d=`\n        ${e} sourceLocR = ${e}(${c.join()}, 0);\n        ++${c[u-1]};\n        ${e} sourceLocG = ${e}(${c.join()}, 0);\n        ++${c[u-2]};\n        ${e} sourceLocA = ${e}(${c.join()}, 0);\n        --${c[u-1]};\n        ${e} sourceLocB = ${e}(${c.join()}, 0);\n        --${c[u-2]};`}else p=u,d=`\n        ${l} sourceLocR = coords;\n        ++${c[u-1]};\n        ${l} sourceLocG = coords;\n        ++${c[u-2]};\n        ${l} sourceLocA = coords;\n        --${c[u-1]};\n        ${l} sourceLocB = coords;\n        --${c[u-2]};`;const h=["x","y","z","w","u","v"].slice(0,p),f="."+h[p-1],m=h.map((e=>"int "+e)),g=Pn("sourceLocR",p-1).concat("inIdx.r"),y=Pn("sourceLocG",p-1).concat("inIdx.g"),x=Pn("sourceLocB",p-1).concat("inIdx.b"),b=Pn("sourceLocA",p-1).concat("inIdx.a"),v="max"===n?"greaterThan":"lessThan",w=r?"":`\n          inIdx = round(vec4(getBestIndicesAChannel(${g.join()}),\n                             getBestIndicesAChannel(${y.join()}),\n                             getBestIndicesAChannel(${x.join()}),\n                             getBestIndicesAChannel(${b.join()})));`,k=`vec4(\n            getAChannel(${g.join()}),\n            hasNextCol ? getAChannel(${y.join()}) : 0.,\n            hasNextRow ? getAChannel(${x.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${b.join()}) : 0.)`,S=r?"":`\n      float getBestIndicesAChannel(${m.join()}) {\n        return getChannel(getBestIndicesA(${h.join()}),\n                                          vec2(${h.slice(-2).join()}));\n      }`;this.userCode=`\n      float getAChannel(${m.join()}) {\n        return getChannel(getA(${h.join()}),\n                               vec2(${h.slice(-2).join()}));\n      }\n      ${S}\n      void main() {\n        ${l} coords = getOutputCoords();\n        bool hasNextCol = ${c[u-1]} < ${i[u-1]-1};\n        bool hasNextRow = ${c[u-2]} < ${i[u-2]-1};\n        ${d}\n        ivec4 srcIdx = ivec4(sourceLocR${f}, sourceLocG${f},\n          sourceLocB${f}, sourceLocA${f}) * ${t};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${k};\n\n        for (int i = 0; i < ${t}; i++) {\n          inIdx = srcIdx;\n          ${w}\n          vec4 candidate = ${k};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${v}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `}}function la(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,s=t.shape[0],o=t.shape[1];null!=r&&(s=r.shape[0],o=r.shape[1]);const i=a.backend_util.computeOptimalWindowSize(o),u={windowSize:i,inSize:o,batchSize:s,outSize:Math.ceil(o/i)},l=new ia(u,n,null==r),c=[t];null!=r&&c.push(r);const d=e.runWebGLProgram(l,c,"int32");if(1===d.shape[1])return d;const p=la(e,t,n,d);return e.disposeIntermediateTensorInfo(d),p}function ca(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;const s=null!=r?r.shape:t.shape,o=s[s.length-1],i=a.backend_util.computeOptimalWindowSize(o),u=new ua(s,i,n,null==r),l=null==r?[t]:[t,r],c=e.runWebGLProgram(u,l,"int32");if(c.shape.length===t.shape.length){const r=ca(e,t,n,c);return e.disposeIntermediateTensorInfo(c),r}return c}function da(e,t,n,r){const s=[n];if(a.backend_util.assertAxesAreInnerMostDims("arg"+r.charAt(0).toUpperCase()+r.slice(1),s,t.shape.length),!(0,a.env)().getBool("WEBGL_PACK_REDUCE")||t.shape.length<=2){const n=[],o=e.texData.get(t.dataId);let i=t;null!==o&&o.isPacked&&(i=e.unpackTensor(t),n.push(i));const[u,l]=a.backend_util.computeOutAndReduceShapes(i.shape,s),c=a.util.sizeFromShape(l),d=Or({inputs:{x:i},backend:e,attrs:{shape:[-1,c]}});n.push(d);const p=la(e,d,r);n.push(p);const h=Or({inputs:{x:p},backend:e,attrs:{shape:u}});return n.forEach((t=>e.disposeIntermediateTensorInfo(t))),h}return ca(e,t,r)}const pa={kernelName:a.ArgMax,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:o}=r;let i=a.util.parseAxisParam(o,s.shape);const u=a.backend_util.getAxesPermutation(i,s.shape.length);let l=s;const c=[];null!=u&&(l=Wr({inputs:{x:s},backend:n,attrs:{perm:u}}),c.push(l),i=a.backend_util.getInnerMostAxes(i.length,l.shape.length)),a.backend_util.assertAxesAreInnerMostDims("argMax",[i[0]],l.shape.length);const d=da(n,l,i[0],"max");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}};const ha={kernelName:a.ArgMin,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:o}=r;let i=a.util.parseAxisParam(o,s.shape);const u=a.backend_util.getAxesPermutation(i,s.shape.length);let l=s;const c=[];null!=u&&(l=Wr({inputs:{x:s},backend:n,attrs:{perm:u}}),c.push(l),i=a.backend_util.getInnerMostAxes(i.length,l.shape.length)),a.backend_util.assertAxesAreInnerMostDims("argMin",[i[0]],l.shape.length);const d=da(n,l,i[0],"min");return c.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}},fa=Sr({opSnippet:"if (isnan(x)) return x;\n  if (abs(x) > 1.) {\n    return NAN;\n  }\n  return asin(x);\n"}),ma={kernelName:a.Asin,backendName:"webgl",kernelFunc:fa},ga=Sr({opSnippet:"if (isnan(x)) return x;return log(x + sqrt(x * x + 1.0));"}),ya={kernelName:a.Asinh,backendName:"webgl",kernelFunc:ga},xa=Sr({opSnippet:"if (isnan(x)) return x;\n  return atan(x);\n"}),ba={kernelName:a.Atan,backendName:"webgl",kernelFunc:xa},va=Nr({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return atan(a, b);\n",packedOpSnippet:"\n  vec4 result = atan(a, b);\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),wa={kernelName:a.Atan2,backendName:"webgl",kernelFunc:va},ka=Sr({opSnippet:"if (isnan(x)) return x;\n  if ((x < -1.0) || (x > 1.0)) return NAN;\nreturn (log(1.0 + x) - log(1.0 - x)) / 2.0;"}),Sa={kernelName:a.Atanh,backendName:"webgl",kernelFunc:ka};class Na{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideHeight,i=e.strideWidth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterHeight,d=e.effectiveFilterWidth,p=e.padInfo.top,h=e.padInfo.left;this.outputShape=e.outShape;const f="avg"===t,m=`((batch  * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + d`,g=`(xR * ${e.inWidth} + xC) * ${e.inChannels} + d`;let y="0.0";if(f||(y="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec2 strides = ivec2(${o}, ${i});\n        const ivec2 pads = ivec2(${p}, ${h});\n\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int batch = coords[0];\n          int d = coords[3];\n\n          ivec2 xRCCorner = coords.yz * strides - pads;\n          int xRCorner = xRCCorner.x;\n          int xCCorner = xRCCorner.y;\n\n          // max/min x(?, ?, d) to get y(yR, yC, d).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n          float avgValue = 0.0;\n\n          for (int wR = 0; wR < ${c};\n              wR += ${u}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${d};\n                wC += ${l}) {\n              int xC = xCCorner + wC;\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float value = getX(batch, xR, xC, d);\n\n              // If a min / max value has already been found, use it. If not,\n              // use the current value.\n              float currMinMaxValue = mix(\n                  value, minMaxValue, minMaxValueFound);\n              if (value ${t} currMinMaxValue) {\n                minMaxValue = value;\n                minMaxValueFound = 1.0;\n                minMaxPosition = ${r?a?m:g:`wR * ${d} + wC`};\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let x=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(x="avgValue / count");const b=4*Math.floor(s/4),v=s%4,w=`\n      if (${f}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec2 strides = ivec2(${o}, ${i});\n      const ivec2 pads = ivec2(${p}, ${h});\n      const float initializationValue = ${y};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xR, int xC, int d) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xR, xC, d);\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d = coords[3];\n\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // max/min x(?, ?, d) to get y(yR, yC, d).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${y});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wR = 0; wR < ${c};\n            wR += ${u}) {\n          int xR = xRCorner + wR;\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${b}; wC += 4) {\n            int xC = xCCorner + wC * ${l};\n\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              getValue(batch, xR, xC + 3 * ${l}, d)\n            );\n\n            ${w}\n          }\n\n          int xC = xCCorner + ${b};\n          if (${1===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              initializationValue,\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${2===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              initializationValue,\n              initializationValue\n            );\n\n            ${w}\n          } else if (${3===v}) {\n            vec4 values = vec4(\n              getValue(batch, xR, xC, d),\n              getValue(batch, xR, xC + ${l}, d),\n              getValue(batch, xR, xC + 2 * ${l}, d),\n              initializationValue\n            );\n\n            ${w}\n          }\n        }\n        setOutput(${x});\n      }\n    `}}class Ta{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(this.variableNames=["x"],"avg"===t&&n)throw new Error("Cannot compute positions for average pool.");const s=e.filterWidth,o=e.strideDepth,i=e.strideHeight,u=e.strideWidth,l=e.dilationDepth,c=e.dilationHeight,d=e.dilationWidth,p=e.effectiveFilterDepth,h=e.effectiveFilterHeight,f=e.effectiveFilterWidth,m=e.padInfo.front,g=e.padInfo.top,y=e.padInfo.left;this.outputShape=e.outShape;const x="avg"===t;let b="0.0";if(x||(b="-1.0 / 1e-20"),n){const t=">=";return void(this.userCode=`\n        const ivec3 strides =\n            ivec3(${o}, ${i}, ${u});\n        const ivec3 pads = ivec3(${m}, ${g}, ${y});\n\n        void main() {\n          ivec5 coords = getOutputCoords();\n          int batch = coords.x;\n          int ch = coords.u;\n\n          ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n          int xDCorner = xCorner.x;\n          int xRCorner = xCorner.y;\n          int xCCorner = xCorner.z;\n\n          // max/min x(?, ?, ?, ch) to get y(yD, yR, yC, ch).\n          // ? = to be determined\n          float minMaxValue = 0.0;\n          float minMaxValueFound = 0.0;\n          int minMaxPosition = 0;\n\n          for (int wD = 0; wD < ${p};\n              wD += ${l}) {\n            int xD = xDCorner + wD;\n\n            if (xD < 0 || xD >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int wR = 0; wR < ${h};\n                wR += ${c}) {\n              int xR = xRCorner + wR;\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int wC = 0; wC < ${f};\n                  wC += ${d}) {\n                int xC = xCCorner + wC;\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float value = getX(batch, xD, xR, xC, ch);\n\n                // If a min / max value has already been found, use it. If not,\n                // use the current value.\n                float currMinMaxValue = mix(\n                    value, minMaxValue, minMaxValueFound);\n                if (value ${t} currMinMaxValue) {\n                  minMaxValue = value;\n                  minMaxValueFound = 1.0;\n                  minMaxPosition = ${r?a?`(((batch * ${e.inDepth} + xD) * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`((xD * ${e.inHeight} + xR) * ${e.inWidth} + xC) * ${e.inChannels} + ch`:`wD * ${h} * ${f} +\n                      wR * ${f} + wC`};\n                }\n              }\n            }\n          }\n          setOutput(float(minMaxPosition));\n        }\n      `)}let v=`${t}(${t}(${t}(minMaxValue[0], minMaxValue[1]), minMaxValue[2]), minMaxValue[3])`;"avg"===t&&(v="avgValue / count");const w=4*Math.floor(s/4),k=s%4,S=`\n      if (${x}) {\n        avgValue += dot(values, ones);\n      } else {\n        minMaxValue = max(values, minMaxValue);\n      }\n    `;this.userCode=`\n      const ivec3 strides =\n        ivec3(${o}, ${i}, ${u});\n      const ivec3 pads = ivec3(${m}, ${g}, ${y});\n      const float initializationValue = ${b};\n      const vec4 ones = vec4(1.0, 1.0, 1.0, 1.0);\n\n      float count = 0.0;\n\n      float getValue(int batch, int xD, int xR, int xC, int ch) {\n        if (xC < 0 || xC >= ${e.inWidth}) {\n          return initializationValue;\n        }\n        count += 1.0;\n        return getX(batch, xD, xR, xC, ch);\n      }\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 xCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xDCorner = xCorner.x;\n        int xRCorner = xCorner.y;\n        int xCCorner = xCorner.z;\n\n        // max/min x(?, ?, ?, d) to get y(yD, yR, yC, ch).\n        // ? = to be determined\n        vec4 minMaxValue = vec4(${b});\n        float avgValue = 0.0;\n        count = 0.0;\n\n        for (int wD = 0; wD < ${p};\n            wD += ${l}) {\n          int xD = xDCorner + wD;\n\n          if (xD < 0 || xD >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${h};\n            wR += ${c}) {\n            int xR = xRCorner + wR;\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${w}; wC += 4) {\n              int xC = xCCorner + wC * ${d};\n\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                getValue(batch, xD, xR, xC + 3 * ${d}, ch)\n              );\n\n              ${S}\n            }\n\n            int xC = xCCorner + ${w};\n            if (${1===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                initializationValue,\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${2===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                initializationValue,\n                initializationValue\n              );\n\n              ${S}\n            } else if (${3===k}) {\n              vec4 values = vec4(\n                getValue(batch, xD, xR, xC, ch),\n                getValue(batch, xD, xR, xC + ${d}, ch),\n                getValue(batch, xD, xR, xC + 2 * ${d}, ch),\n                initializationValue\n              );\n\n              ${S}\n            }\n          }\n          setOutput(${v});\n        }\n      }\n    `}}const Ia={kernelName:a.AvgPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;L(s,"avgPool");const{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=a.backend_util.computePool2DInfo(s.shape,o,i,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&a.util.arraysEqual(c.inShape,c.outShape))return hr({inputs:{x:s},backend:n});const d=new Na(c,"avg",!1);return n.runWebGLProgram(d,[s],"float32")}};const $a={kernelName:a.AvgPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:o,strides:i,pad:u,dimRoundingMode:l,dataFormat:c}=r,d=a.backend_util.computePool3DInfo(s.shape,o,i,[1,1,1],u,l,c),p=new Ta(d,"avg",!1);return n.runWebGLProgram(p,[s],"float32")}};class Ca{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterHeight,u=e.effectiveFilterWidth,l=i-1-e.padInfo.top,c=u-1-e.padInfo.left,d=1/(t*n);this.userCode=`\n      const ivec2 pads = ivec2(${l}, ${c});\n      const float avgMultiplier = float(${d});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${i};\n            wR += ${s}) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${u};\n            wC+= ${o}) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n\n            dotProd += dyValue * avgMultiplier;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ea{constructor(e){this.variableNames=["dy"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.effectiveFilterDepth,d=e.effectiveFilterHeight,p=e.effectiveFilterWidth,h=c-1-e.padInfo.front,f=d-1-e.padInfo.top,m=p-1-e.padInfo.left,g=1/(t*n*r);this.userCode=`\n      const ivec3 pads = ivec3(${h}, ${f}, ${m});\n      const float avgMultiplier = float(${g});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, d) with pos mask(:, :, :, ch) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${c};\n            wD += ${i}) {\n          float dyD = float(dyDCorner + wD) / ${a}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${d};\n              wR += ${u}) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${p};\n                wC += ${l}) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n\n              dotProd += dyValue * avgMultiplier;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const _a={kernelName:a.AvgPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:o}=t,i=o,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,p=a.backend_util.computePool3DInfo(i.shape,u,l,[1,1,1],c,d),h=new Ea(p);return n.runWebGLProgram(h,[s],i.dtype)}};const Ra={kernelName:a.AvgPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:o}=t,i=o;L([s,o],"avgPoolGrad");const{filterSize:u,strides:l,pad:c}=r,d=a.backend_util.computePool2DInfo(i.shape,u,l,1,c),p=new Ca(d);return n.runWebGLProgram(p,[s],i.dtype)}};const Aa={kernelName:a.BatchMatMul,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{a:a,b:s}=t,{transposeA:o,transposeB:i}=r;return Hr({a:a,b:s,transposeA:o,transposeB:i,backend:n})}};class Oa{constructor(e,t,n,r,s,o){this.outputShape=[],this.variableNames=["x","mean","variance"],a.backend_util.assertAndGetBroadcastShape(e,t),a.backend_util.assertAndGetBroadcastShape(e,n);let i="0.0";null!=r&&(a.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="1.0";null!=s&&(a.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${i};\n        float scale = ${u};\n        float inv = scale * inversesqrt(variance + float(${o}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `}}class Da{constructor(e,t,n,r,s,o){this.packedInputs=!0,this.packedOutput=!0,this.variableNames=["x","mean","variance"],a.backend_util.assertAndGetBroadcastShape(e,t),a.backend_util.assertAndGetBroadcastShape(e,n);let i="vec4(0.0)";null!=r&&(a.backend_util.assertAndGetBroadcastShape(e,r),this.variableNames.push("offset"),i="getOffsetAtOutCoords()");let u="vec4(1.0)";null!=s&&(a.backend_util.assertAndGetBroadcastShape(e,s),this.variableNames.push("scale"),u="getScaleAtOutCoords()"),this.outputShape=e,this.userCode=`\n      void main() {\n        vec4 offset = ${i};\n        vec4 scale = ${u};\n\n        vec4 x = getXAtOutCoords();\n        vec4 mean = getMeanAtOutCoords();\n        vec4 variance = getVarianceAtOutCoords();\n\n        vec4 inv = scale * inversesqrt(variance + vec4(${o}));\n\n        setOutput((x - mean) * inv + offset);\n      }\n    `}}const Fa={kernelName:a.FusedBatchNorm,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e;const{x:s,mean:o,variance:i,offset:u,scale:l}=t;a.util.assert(o.shape.length===i.shape.length,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),a.util.assert(null==u||o.shape.length===u.shape.length,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),a.util.assert(null==l||o.shape.length===l.shape.length,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));let{varianceEpsilon:c}=r;null==c&&(c=.001);const d=[s,o,i];let p=null;null!=u&&(p=u.shape,d.push(u));let h=null;null!=l&&(h=l.shape,d.push(l));const f=(0,a.env)().getBool("WEBGL_PACK_NORMALIZATION")?new Da(s.shape,o.shape,i.shape,p,h,c):new Oa(s.shape,o.shape,i.shape,p,h,c);return n.runWebGLProgram(f,d,d[0].dtype)}};class Ba{constructor(e){this.variableNames=["source"],this.outputShape=e,this.rank=e.length;const t=he(this.rank);this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const n=function(e){if(1===e)return"sourceLoc";if(e<=6)return Ma.slice(0,e).map((e=>"sourceLoc."+e)).join(",");throw Error(`Slicing for rank ${e} is not yet supported`)}(this.rank);let r;r=`\n        ${t} sourceLoc;\n        ${t} coords = getOutputCoords();\n        ${e.map(((e,t)=>`sourceLoc.${Ma[t]} = start[${t}] + coords.${Ma[t]};`)).join("\n")}\n      `,this.userCode=`\n      void main() {\n        ${r}\n        setOutput(getSource(${n}));\n      }\n    `}}const Ma=["x","y","z","w","u","v"];class Pa{constructor(e){this.variableNames=["source"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=e,this.rank=e.length,this.customUniforms=[{name:"start",arrayIndex:this.rank,type:"int"}];const t=he(this.rank),n=Pn("coords",this.rank),r=Pn("sourceLoc",this.rank),a=1===this.rank?"sourceLoc":`vec2(${r.slice(-2).join()})`,s=`getChannel(getSource(${r.join()}), ${a})`,o=`\n      result.x = ${s};\n      if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n        ++${r[this.rank-1]};\n        result.y = ${s};\n        --${r[this.rank-1]};\n      }\n    `,i=1===this.rank?"":`\n      --${n[this.rank-1]};\n      if (++${n[this.rank-2]} < ${e[this.rank-2]}) {\n        ++${r[this.rank-2]};\n        result.z = ${s};\n        if (++${n[this.rank-1]} < ${e[this.rank-1]}) {\n          ++${r[this.rank-1]};\n          result.w = ${s};\n        }\n      }\n    `,u=this.rank<=4?`sourceLoc = coords +\n            ${t}(${e.map(((e,t)=>`start[${t}]`)).join()});`:e.map(((e,t)=>`${r[t]} = ${n[t]} + start[${t}];`)).join("\n");this.userCode=`\n      void main() {\n        ${t} coords = getOutputCoords();\n        ${t} sourceLoc;\n        ${u}\n        vec4 result = vec4(0.);\n        ${o}\n        ${i}\n        setOutput(result);\n      }\n    `}}function La(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:o,size:i}=r,[u,l]=a.slice_util.parseSliceParams(s,o,i);if(a.slice_util.assertParamsValid(s,u,l),0===a.util.sizeFromShape(l))return n.makeTensorInfo(l,s.dtype,[]);if(n.shouldExecuteOnCPU([s])||"string"===s.dtype){const e=n.texData.get(s.dataId),t=Sn(e.values,u,l,s.shape,s.dtype);return n.makeTensorInfo(l,s.dtype,t)}const{isPacked:c}=n.texData.get(s.dataId),d=a.slice_util.isSliceContinous(s.shape,u,l);if(c||!d){const e=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Pa(l):new Ba(l),t=[u];return n.runWebGLProgram(e,[s],s.dtype,t)}return n.uploadToGPU(s.dataId),function(e,t,n,r){const s=r.texData.get(e.dataId),o=r.makeTensorInfo(n,e.dtype),i=r.texData.get(o.dataId);Object.assign(i,s),i.refCount=1,i.shape=n,i.dtype=e.dtype;let u=a.slice_util.computeFlatOffset(t,a.util.computeStrides(e.shape));s.slice&&(u+=s.slice.flatOffset),i.slice={flatOffset:u,origDataId:s.slice&&s.slice.origDataId||e.dataId};const l=r.dataRefCount.get(i.slice.origDataId)||1;return r.dataRefCount.set(i.slice.origDataId,l+1),o}(s,u,l,n)}const Va={kernelName:a.Slice,backendName:"webgl",kernelFunc:La},za={kernelName:a.BatchToSpaceND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:o,crops:i}=r;a.util.assert(s.shape.length<=4,(()=>"batchToSpaceND for rank > 4 with a WebGL backend not implemented yet"));const u=o.reduce(((e,t)=>e*t)),l=a.backend_util.getReshaped(s.shape,o,u),c=a.backend_util.getPermuted(l.length,o.length),d=a.backend_util.getReshapedPermuted(s.shape,o,u),p=a.backend_util.getSliceBeginCoords(i,o.length),h=a.backend_util.getSliceSize(d,i,o.length),f=[],m=Or({inputs:{x:s},backend:n,attrs:{shape:l}}),g=Wr({inputs:{x:m},backend:n,attrs:{perm:c}}),y=Or({inputs:{x:g},backend:n,attrs:{shape:d}}),x=La({inputs:{x:y},backend:n,attrs:{begin:p,size:h}});return f.push(m),f.push(g),f.push(y),f.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}};const Ua={kernelName:a.Bincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o}=r,i=n.readSync(a.dataId),u=n.readSync(s.dataId),l=Kt(i,u,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,l)}};const Wa={kernelName:a.BroadcastArgs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{s0:r,s1:s}=t,o=n.readSync(r.dataId),i=n.readSync(s.dataId),u=a.backend_util.assertAndGetBroadcastShape(Array.from(o),Array.from(i));return n.makeTensorInfo([u.length],"int32",Int32Array.from(u))}},Ga=Nr({opSnippet:"return float(a != b);",cpuKernelImpl:gn,dtype:"bool"}),Ha={kernelName:a.NotEqual,backendName:"webgl",kernelFunc:Ga};function qa(e){const{inputs:t,backend:n}=e,{input:r}=t;return hr({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.real},backend:n})}const Xa={kernelName:a.Real,backendName:"webgl",kernelFunc:qa};const Ka={kernelName:a.Cast,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r,attrs:s}=t,{x:o}=n,{dtype:i}=s;if("complex64"===i){if("complex64"===o.dtype)return hr({inputs:{x:o},backend:r});const t=a.zeros(o.shape),n=e({inputs:{x:o},backend:r,attrs:{dtype:"float32"}}),s=mr({inputs:{real:n,imag:t},backend:r});return t.dispose(),r.disposeIntermediateTensorInfo(n),s}if("complex64"===o.dtype){const t=qa({inputs:{input:o},backend:r}),n=e({inputs:{x:t},backend:r,attrs:{dtype:i}});return r.disposeIntermediateTensorInfo(t),n}if(!a.util.hasEncodingLoss(o.dtype,i)){const e=hr({inputs:{x:o},backend:r});return{dataId:e.dataId,shape:e.shape,dtype:i}}if("int32"===i)return function(e,t){const n=new Hn(e.shape,"return float(int(x));"),r=t.runWebGLProgram(n,[e],"int32");return{dataId:r.dataId,shape:r.shape,dtype:r.dtype}}(o,r);if("bool"===i){const e=r.makeTensorInfo([],"bool",a.util.getTypedArrayFromDType("bool",1)),t=Ga({inputs:{a:o,b:e},backend:r});return r.disposeIntermediateTensorInfo(e),t}throw new Error(`Error in Cast: failed to cast ${o.dtype} to ${i}`)}},ja="return ceil(x);",Ya=Sr({opSnippet:ja,packedOpSnippet:ja,cpuKernelImpl:Yt}),Qa={kernelName:a.Ceil,backendName:"webgl",kernelFunc:Ya};class Za{constructor(e){this.variableNames=["A"],this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n\n      void main() {\n        float value = getAAtOutCoords();\n        if (isnan(value)) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, minVal, maxVal));\n      }\n    "}}class Ja{constructor(e){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"minVal",type:"float"},{name:"maxVal",type:"float"}],this.outputShape=e,this.userCode="\n      void main() {\n        vec4 value = getAAtOutCoords();\n\n        if (any(isnan(value))) {\n          setOutput(value);\n          return;\n        }\n\n        setOutput(clamp(value, vec4(minVal), vec4(maxVal)));\n      }\n    "}}const es={kernelName:a.ClipByValue,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{clipValueMin:o,clipValueMax:i}=r;let u;u=(0,a.env)().getBool("WEBGL_PACK_CLIP")?new Ja(s.shape):new Za(s.shape);const l=[[o],[i]];return n.runWebGLProgram(u,[s],s.dtype,l)}};class ts{constructor(e){this.variableNames=["real","imag"],this.outputShape=e,this.userCode="\n      void main() {\n        float re = abs(getRealAtOutCoords());\n        float im = abs(getImagAtOutCoords());\n        float mx = max(re, im);\n\n        // sadly the length function in glsl is not underflow-safe\n        // (at least not on Intel GPUs). So the safe solution is\n        // to ensure underflow-safety in all cases.\n        setOutput(\n          mx == 0.0 ? 0.0 : mx * length(vec2(1, min(re, im)/mx))\n        );\n      }\n    "}}function ns(e,t){return{dataId:t.dataId,dtype:t.dtype,shape:e.shape}}const rs={kernelName:a.ComplexAbs,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,a=n.texData.get(r.dataId),s=new ts(r.shape),o=[ns(r,a.complexTensorInfos.real),ns(r,a.complexTensorInfos.imag)];return n.runWebGLProgram(s,o,o[0].dtype)}};class as{constructor(e){this.outputShape=[],this.outputShape=a.backend_util.computeOutShape(e,1),this.variableNames=e.map(((e,t)=>`T${t}`));const t=new Array(e.length-1);t[0]=e[0][1];for(let a=1;a<t.length;a++)t[a]=t[a-1]+e[a][1];const n=[`if (yC < ${t[0]}) setOutput(getT0(yR, yC));`];for(let a=1;a<t.length;a++){const e=t[a-1];n.push(`else if (yC < ${t[a]}) setOutput(getT${a}(yR, yC-${e}));`)}const r=t.length,s=t[t.length-1];n.push(`else setOutput(getT${r}(yR, yC-${s}));`),this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int yR = coords.x;\n        int yC = coords.y;\n\n        ${n.join("\n        ")}\n      }\n    `}}class ss{constructor(e,t){this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[],this.outputShape=a.backend_util.computeOutShape(e,t);const n=this.outputShape,r=n.length,s=he(r),o=Pn("coords",r),i=["x","y","z","w","u","v"].slice(0,r);this.variableNames=e.map(((e,t)=>`T${t}`));const u=new Array(e.length-1);u[0]=e[0][t];for(let a=1;a<u.length;a++)u[a]=u[a-1]+e[a][t];const l=i[t],c=i.slice(-2),d=i.join();let p=`if (${l} < ${u[0]}) {\n        return getChannel(\n            getT0(${d}), vec2(${c.join()}));\n        }`;for(let a=1;a<u.length;a++){const e=u[a-1];p+=`\n        if (${l} < ${u[a]}  && ${l} >= ${u[a-1]}) {\n          return getChannel(\n            getT${a}(${os(i,l,e)}),\n            vec2(${os(c,l,e)}));\n        }`}const h=u.length,f=u[u.length-1];p+=`\n        return getChannel(\n          getT${h}(${os(i,l,f)}),\n          vec2(${os(c,l,f)}));`,this.userCode=`\n      float getValue(${i.map((e=>"int "+e))}) {\n        ${p}\n      }\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${o}), 0., 0., 0.);\n\n        ${o[r-1]} = ${o[r-1]} + 1;\n        if (${o[r-1]} < ${n[r-1]}) {\n          result.g = getValue(${o});\n        }\n\n        ${o[r-2]} = ${o[r-2]} + 1;\n        if (${o[r-2]} < ${n[r-2]}) {\n          result.a = getValue(${o});\n        }\n\n        ${o[r-1]} = ${o[r-1]} - 1;\n        if (${o[r-2]} < ${n[r-2]} &&\n            ${o[r-1]} < ${n[r-1]}) {\n          result.b = getValue(${o});\n        }\n        setOutput(result);\n      }\n    `}}function os(e,t,n){const r=e.indexOf(t);return e.map(((e,t)=>t===r?`${e} - ${n}`:e)).join()}function is(e){const{inputs:t,backend:n}=e,{input:r}=t;return hr({inputs:{x:n.texData.get(r.dataId).complexTensorInfos.imag},backend:n})}const us={kernelName:a.Imag,backendName:"webgl",kernelFunc:is};function ls(e,t,n){const r=e[0].dtype;if("complex64"===r){const r=e.map((e=>qa({inputs:{input:e},backend:n}))),a=e.map((e=>is({inputs:{input:e},backend:n}))),s=ls(r,t,n),o=ls(a,t,n),i=mr({inputs:{real:s,imag:o},backend:n});return r.forEach((e=>n.disposeIntermediateTensorInfo(e))),a.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.disposeIntermediateTensorInfo(s),n.disposeIntermediateTensorInfo(o),i}let s=n.shouldExecuteOnCPU(e);if("string"===r&&(s=!0),s){const s=e.map((e=>{const r=a.util.sizeFromShape(e.shape.slice(t));return Or({inputs:{x:e},backend:n,attrs:{shape:[-1,r]}})})),o=s.map((e=>({vals:n.readSync(e.dataId),shape:e.shape}))),i=a.backend_util.computeOutShape(s.map((e=>e.shape)),1),u=1===s[0].shape[0],l=Qt(o,i,r,u),c=a.backend_util.computeOutShape(e.map((e=>e.shape)),t),d=n.makeTensorInfo(c,r,l);return s.forEach((e=>n.disposeIntermediateTensorInfo(e))),d}const o=(0,a.env)().getNumber("WEBGL_MAX_TEXTURES_IN_SHADER");if(e.length>o){const r=[];for(let s=0;s<e.length;s+=o){const a=e.slice(s,s+o);r.push(ls(a,t,n))}const a=ls(r,t,n);for(const e of r)n.disposeIntermediateTensorInfo(e);return a}if((0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")&&e[0].shape.length>1){const a=new ss(e.map((e=>e.shape)),t);return n.runWebGLProgram(a,e,r)}const{tensors2D:i,outShape:u}=function(e,t,n){const r=a.backend_util.computeOutShape(e.map((e=>e.shape)),t);return{tensors2D:e.map((e=>Or({inputs:{x:e},attrs:{shape:[-1,a.util.sizeFromShape(e.shape.slice(t))]},backend:n}))),outShape:r}}(e,t,n),l=new as(i.map((e=>e.shape))),c=n.runWebGLProgram(l,i,r);i.forEach((e=>n.disposeIntermediateTensorInfo(e)));const d=Or({inputs:{x:c},attrs:{shape:u},backend:n});return n.disposeIntermediateTensorInfo(c),d}function cs(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r,o=a.util.parseAxisParam(s,t[0].shape)[0],i=a.backend_util.computeOutShape(t.map((e=>e.shape)),o);if(0===a.util.sizeFromShape(i))return n.makeTensorInfo(i,t[0].dtype,[]);const u=t.filter((e=>a.util.sizeFromShape(e.shape)>0));if(1===u.length)return hr({inputs:{x:u[0]},backend:n});const l=u.map((e=>e.shape));return a.backend_util.assertParamsConsistent(l,o),ls(u,o,n)}const ds={kernelName:a.Concat,backendName:"webgl",kernelFunc:cs};class ps{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.outputShape=e.outShape;const s=e.padInfo.top,o=e.padInfo.left,i=e.strideHeight,u=e.strideWidth,l=e.dilationHeight,c=e.dilationWidth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4,m="channelsLast"===e.dataFormat,g=m?1:2,y=m?2:3,x=m?3:1;let b="",v="";n&&(b=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,v="result = activation(result);");const w=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${b}\n\n      const ivec2 strides = ivec2(${i}, ${u});\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d2 = coords[${x}];\n\n        ivec2 xRCCorner =\n            ivec2(coords[${g}], coords[${y}]) * strides - pads;\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, d2) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${d}; wR++) {\n          int xR = xRCorner + wR * ${l};\n\n          if (xR < 0 || xR >= ${e.inHeight}) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${p}; wC++) {\n            int xC = xCCorner + wC * ${c};\n\n            if (xC < 0 || xC >= ${e.inWidth}) {\n              continue;\n            }\n\n            for (int d1 = 0; d1 < ${h}; d1 += 4) {\n              vec4 wValues = vec4(\n                getW(wR, wC, d1, d2),\n                getW(wR, wC, d1 + 1, d2),\n                getW(wR, wC, d1 + 2, d2),\n                getW(wR, wC, d1 + 3, d2)\n              );\n\n              if (${m}) {\n                vec4 xValues = vec4(\n                  getX(batch, xR, xC, d1),\n                  getX(batch, xR, xC, d1 + 1),\n                  getX(batch, xR, xC, d1 + 2),\n                  getX(batch, xR, xC, d1 + 3)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec4 xValues = vec4(\n                  getX(batch, d1, xR, xC),\n                  getX(batch, d1 + 1, xR, xC),\n                  getX(batch, d1 + 2, xR, xC),\n                  getX(batch, d1 + 3, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n\n            if (${1===f}) {\n\n              if (${m}) {\n                dotProd +=\n                    getX(batch, xR, xC, ${h}) *\n                    getW(wR, wC, ${h}, d2);\n              } else {\n                dotProd +=\n                    getX(batch, ${h}, xR, xC) *\n                    getW(wR, wC, ${h}, d2);\n              }\n\n            } else if (${2===f}) {\n              vec2 wValues = vec2(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2)\n              );\n\n              if (${m}) {\n                vec2 xValues = vec2(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec2 xValues = vec2(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            } else if (${3===f}) {\n              vec3 wValues = vec3(\n                getW(wR, wC, ${h}, d2),\n                getW(wR, wC, ${h} + 1, d2),\n                getW(wR, wC, ${h} + 2, d2)\n              );\n\n              if (${m}) {\n                vec3 xValues = vec3(\n                  getX(batch, xR, xC, ${h}),\n                  getX(batch, xR, xC, ${h} + 1),\n                  getX(batch, xR, xC, ${h} + 2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else {\n                vec3 xValues = vec3(\n                  getX(batch, ${h}, xR, xC),\n                  getX(batch, ${h} + 1, xR, xC),\n                  getX(batch, ${h} + 2, xR, xC)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n\n            }\n          }\n        }\n\n        float result = dotProd;\n        ${w}\n        ${v}\n        setOutput(result);\n      }\n    `}}class hs{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const t=e.padInfo.front,n=e.padInfo.top,r=e.padInfo.left,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=e.dilationDepth,u=e.dilationHeight,l=e.dilationWidth,c=e.filterDepth,d=e.filterHeight,p=e.filterWidth,h=4*Math.floor(e.inChannels/4),f=e.inChannels%4;this.userCode=`\n      const ivec3 strides = ivec3(${a}, ${s}, ${o});\n      const ivec3 pads = ivec3(${t}, ${n}, ${r});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d2 = coords.u;\n\n        ivec3 xFRCCorner = ivec3(coords.y, coords.z, coords.w) * strides - pads;\n        int xFCorner = xFRCCorner.x;\n        int xRCorner = xFRCCorner.y;\n        int xCCorner = xFRCCorner.z;\n\n        // Convolve x(?, ?, ?, d1) with w(:, :, :, d1, d2) to get\n        // y(yF, yR, yC, d2). ? = to be determined. : = across all\n        // values in that axis.\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${c}; wF++) {\n          int xF = xFCorner + wF * ${i};\n\n          if (xF < 0 || xF >= ${e.inDepth}) {\n            continue;\n          }\n\n          for (int wR = 0; wR < ${d}; wR++) {\n            int xR = xRCorner + wR * ${u};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int wC = 0; wC < ${p}; wC++) {\n              int xC = xCCorner + wC * ${l};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              for (int d1 = 0; d1 < ${h}; d1 += 4) {\n                vec4 xValues = vec4(\n                  getX(batch, xF, xR, xC, d1),\n                  getX(batch, xF, xR, xC, d1 + 1),\n                  getX(batch, xF, xR, xC, d1 + 2),\n                  getX(batch, xF, xR, xC, d1 + 3)\n                );\n                vec4 wValues = vec4(\n                  getW(wF, wR, wC, d1, d2),\n                  getW(wF, wR, wC, d1 + 1, d2),\n                  getW(wF, wR, wC, d1 + 2, d2),\n                  getW(wF, wR, wC, d1 + 3, d2)\n                );\n\n                dotProd += dot(xValues, wValues);\n              }\n\n              if (${1===f}) {\n                dotProd +=\n                  getX(batch, xF, xR, xC, ${h}) *\n                  getW(wF, wR, wC, ${h}, d2);\n              } else if (${2===f}) {\n                vec2 xValues = vec2(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1)\n                );\n                vec2 wValues = vec2(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              } else if (${3===f}) {\n                vec3 xValues = vec3(\n                  getX(batch, xF, xR, xC, ${h}),\n                  getX(batch, xF, xR, xC, ${h} + 1),\n                  getX(batch, xF, xR, xC, ${h} + 2)\n                );\n                vec3 wValues = vec3(\n                  getW(wF, wR, wC, ${h}, d2),\n                  getW(wF, wR, wC, ${h} + 1, d2),\n                  getW(wF, wR, wC, ${h} + 2, d2)\n                );\n                dotProd += dot(xValues, wValues);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class fs{constructor(e,t){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"inputShape",type:"ivec4"},{name:"pad",type:"ivec2"},{name:"stride",type:"ivec2"},{name:"dilation",type:"ivec2"},{name:"inChannels",type:"int"},{name:"itemsPerBlockRow",type:"int"},{name:"outWidth",type:"int"}],this.outputShape=e,this.enableShapeUniforms=ve(this.outputShape.length);const{dataFormat:n}=t,r=z(),a="channelsLast"===n,s=a?1:2,o=a?2:3,i=this.enableShapeUniforms?"if(blockIndex < outShape[2] && pos < outShape[1]) {":`if(blockIndex < ${e[2]} && pos < ${e[1]}) {`;let u="";for(let l=0;l<=1;l++)for(let e=0;e<=1;e++)u+=`\n          blockIndex = rc.z + ${e};\n          pos = rc.y + ${l};\n\n          ${i}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${s}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${o}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${a}) {\n                  innerDims = vec2(d1, ch);\n                  result[${2*l+e}] = getChannel(\n                    getA(rc.x, d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${2*l+e}] = getChannel(\n                    getA(rc.x, ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;this.userCode=`\n      void main() {\n        ivec3 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${u}\n\n        ${r.output} = result;\n      }\n    `}}function ms(e,t){const n=e.length;return n>=3?t?[...e.slice(0,-3),e[n-3]*e[n-2],e[n-1]]:[...e.slice(0,-3),e[n-3],e[n-2]*e[n-1]]:!t&&1===n&&e[0]>1?[e[0],1]:null}function gs(e){let{x:t,filter:n,convInfo:r,backend:s,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:u=0,activation:l=null}=e;const c=t.shape,d=s.texData.get(t.dataId),p=r.inChannels,h=c[0]*c[1]*c[2],f=r.outChannels,m="channelsLast"===r.dataFormat;let g;const y=[];if(null!=i){const e=ms(i.shape,m);null!=e&&(i=Or({inputs:{x:i},backend:s,attrs:{shape:e}}),y.push(i))}if(null!=o){const e=ms(o.shape,m);null!=e&&(o=Or({inputs:{x:o},backend:s,attrs:{shape:e}}),y.push(o))}if(!((1===h||1===f)&&p>1e3)&&d.isPacked&&m&&null!=d.texture&&c[2]%2!==0&&a.util.arraysEqual(d.shape.slice(-3),c.slice(-3))){const e=c[0]*c[1]*(c[2]+1),p={dataId:t.dataId,shape:[1,e,r.inChannels],dtype:t.dtype},h=d.shape;d.shape=d.shape.slice(),d.shape[d.shape.length-2]++,a.util.assert(A(d.shape,p.shape),(()=>`packed reshape ${d.shape} to ${p.shape} isn't free`));const f=Or({inputs:{x:n},backend:s,attrs:{shape:[1,r.inChannels,r.outChannels]}});y.push(f);const m=Hr({a:p,b:f,backend:s,transposeA:false,transposeB:false,bias:o,activation:l,preluActivationWeights:i,leakyreluAlpha:u}),x=s.texData.get(m.dataId);a.util.assert(x.isPacked,(()=>"batchMatMul result is expected to be packed")),d.shape=h,x.shape=r.outShape,g=hr({inputs:{x:m},backend:s}),g.shape=r.outShape,y.push(m)}else{const e=r.outHeight*r.outWidth,a=Or({inputs:{x:t},backend:s,attrs:{shape:m?[r.batchSize,e,r.inChannels]:[r.batchSize,r.inChannels,e]}}),c=Or({inputs:{x:n},backend:s,attrs:{shape:[1,r.inChannels,r.outChannels]}}),d=Hr({a:m?a:c,b:m?c:a,transposeA:!m,transposeB:false,backend:s,bias:o,activation:l,preluActivationWeights:i,leakyreluAlpha:u});g=Or({inputs:{x:d},backend:s,attrs:{shape:r.outShape}}),y.push(a),y.push(c),y.push(d)}for(const a of y)s.disposeIntermediateTensorInfo(a);return g}function ys(e){let{x:t,filter:n,convInfo:r,backend:s,bias:o=null,preluActivationWeights:i=null,leakyreluAlpha:u=0,activation:l=null}=e;const{filterWidth:c,filterHeight:d,inChannels:p,outWidth:h,outHeight:f,dataFormat:m}=r,g="channelsLast"===m,y=c*d*p,x=f*h,b=[r.batchSize,y,x],v=[];if(null!=i){const e=ms(i.shape,g);null!=e&&(i=Or({inputs:{x:i},backend:s,attrs:{shape:e}}),v.push(i))}if(null!=o){const e=ms(o.shape,g);null!=e&&(o=Or({inputs:{x:o},backend:s,attrs:{shape:e}}),v.push(o))}const w=Or({inputs:{x:n},backend:s,attrs:{shape:[1,y,a.util.sizeFromShape(n.shape)/y]}});v.push(w);const k=new fs(b,r),S=[t.shape,[r.padInfo.top,r.padInfo.left],[r.strideHeight,r.strideWidth],[r.dilationHeight,r.dilationWidth],[r.inChannels],[r.filterWidth*r.inChannels],[r.outWidth]],N=s.runWebGLProgram(k,[t],"float32",S),T=Or({inputs:{x:N},backend:s,attrs:{shape:b}});v.push(N),v.push(T);const I=null!=o,$=null!=i,C="leakyrelu"===l,E=l?Tr(l,!0):null,_=new Ir(g?T.shape:w.shape,g?w.shape:T.shape,g?[r.batchSize,x,r.outChannels]:[r.batchSize,r.outChannels,x],!0,!1,I,E,$,C),R=g?[T,w]:[w,T];if(o&&R.push(o),$&&R.push(i),C){const e=s.makeTensorInfo([],"float32",a.util.createScalarValue(u,"float32"));R.push(e),v.push(e)}const A=s.runWebGLProgram(_,R,"float32"),O=Or({inputs:{x:A},backend:s,attrs:{shape:r.outShape}});v.push(A);for(const a of v)s.disposeIntermediateTensorInfo(a);return O}const xs={kernelName:a.Conv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:o}=t,{strides:i,pad:u,dataFormat:l,dilations:c,dimRoundingMode:d}=r,p=a.backend_util.convertConv2DDataFormat(l),h=a.backend_util.computeConv2DInfo(s.shape,o.shape,i,c,u,d,!1,p);let f;if(1!==h.filterHeight||1!==h.filterWidth||1!==h.dilationHeight||1!==h.dilationWidth||1!==h.strideHeight||1!==h.strideWidth||"SAME"!==h.padInfo.type&&"VALID"!==h.padInfo.type)if((0,a.env)().getBool("WEBGL_CONV_IM2COL"))f=ys({x:s,filter:o,convInfo:h,backend:n});else{const e=new ps(h);f=n.runWebGLProgram(e,[s,o],"float32")}else f=gs({x:s,filter:o,convInfo:h,backend:n});const m=Or({inputs:{x:f},backend:n,attrs:{shape:h.outShape}});return n.disposeIntermediateTensorInfo(f),m}};class bs{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s="channelsLast"===e.dataFormat;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int d2 = coords.w;\n\n        // Convolve x(?, ?, d1) with dy(:, :, d2) to get dw(wR, wC, d1, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              if (${s}) {\n                float dyValue = getDy(b, yR, yC, d2);\n                float xValue = getX(b, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              } else {\n                float dyValue = getDy(b, d2, yR, yC);\n                float xValue = getX(b, d1, xR, xC);\n                dotProd += (xValue * dyValue);\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class vs{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s="channelsLast"===e.dataFormat,o=t-1-e.padInfo.top,i=n-1-e.padInfo.left,u=s?1:2,l=s?2:3,c=s?3:1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[${c}];\n\n        ivec2 dyCorner = ivec2(coords[${u}], coords[${l}]) - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        // Convolve dy(?, ?, d2) with w(:, :, d1, d2) to compute dx(xR, xC, d1).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n\n              if (${s}) {\n                float xValue = getDy(batch, idyR, idyC, d2);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              } else {\n                float xValue = getDy(batch, d2, idyR, idyC);\n                float wValue = getW(wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ws{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.padInfo.front,s=e.padInfo.top,o=e.padInfo.left;this.userCode=`\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int wF = coords.x;\n        int wR = coords.y;\n        int wC = coords.z;\n        int d1 = coords.w;\n        int d2 = coords.u;\n\n        float dotProd = 0.0;\n\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yF = 0; yF < ${e.outDepth}; yF++) {\n            int xF = wF + yF * ${t} - ${a};\n\n            if (xF < 0 || xF >= ${e.inDepth}) {\n              continue;\n            }\n\n            for (int yR = 0; yR < ${e.outHeight}; yR++) {\n              int xR = wR + yR * ${n} - ${s};\n\n              if (xR < 0 || xR >= ${e.inHeight}) {\n                continue;\n              }\n\n              for (int yC = 0; yC < ${e.outWidth}; yC++) {\n                int xC = wC + yC * ${r} - ${o};\n\n                if (xC < 0 || xC >= ${e.inWidth}) {\n                  continue;\n                }\n\n                float dyValue = getDy(b, yF, yR, yC, d2);\n                float xValue = getX(b, xF, xR, xC, d1);\n                dotProd += (xValue * dyValue);\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class ks{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterDepth,n=e.filterHeight,r=e.filterWidth,a=e.strideDepth,s=e.strideHeight,o=e.strideWidth,i=t-1-e.padInfo.front,u=n-1-e.padInfo.top,l=r-1-e.padInfo.left;this.userCode=`\n      const ivec3 pads = ivec3(${i}, ${u}, ${l});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.u;\n\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyFCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        float dotProd = 0.0;\n        for (int wF = 0; wF < ${t}; wF++) {\n          float dyF = float(dyFCorner + wF) / ${a}.0;\n\n          if (dyF < 0.0 || dyF >= ${e.outDepth}.0 || fract(dyF) > 0.0) {\n            continue;\n          }\n          int idyF = int(dyF);\n\n          int wFPerm = ${t} - 1 - wF;\n\n          for (int wR = 0; wR < ${n}; wR++) {\n            float dyR = float(dyRCorner + wR) / ${s}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n              fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            int wRPerm = ${n} - 1 - wR;\n\n            for (int wC = 0; wC < ${r}; wC++) {\n              float dyC = float(dyCCorner + wC) / ${o}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              int wCPerm = ${r} - 1 - wC;\n\n              for (int d2 = 0; d2 < ${e.outChannels}; d2++) {\n                float xValue = getDy(batch, idyF, idyR, idyC, d2);\n                float wValue = getW(wFPerm, wRPerm, wCPerm, d1, d2);\n                dotProd += xValue * wValue;\n              }\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Ss={kernelName:a.Conv2DBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:o}=t,{strides:i,pad:u,dataFormat:l,dimRoundingMode:c,filterShape:d}=r,p=a.backend_util.convertConv2DDataFormat(l),h=a.backend_util.computeConv2DInfo(s.shape,d,i,1,u,c,!1,p),f=new bs(h);return n.runWebGLProgram(f,[s,o],"float32")}};const Ns={kernelName:a.Conv2DBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:o}=t,{inputShape:i,strides:u,pad:l,dataFormat:c,dimRoundingMode:d}=r,p=a.backend_util.convertConv2DDataFormat(c),h=a.backend_util.computeConv2DInfo(i,o.shape,u,1,l,d,!1,p),f=new vs(h);return n.runWebGLProgram(f,[s,o],"float32")}};const Ts={kernelName:a.Conv3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:o}=t,{strides:i,pad:u,dilations:l}=r,c=a.backend_util.computeConv3DInfo(s.shape,o.shape,i,l,u),d=new hs(c);return n.runWebGLProgram(d,[s,o],"float32")}};const Is={kernelName:a.Conv3DBackpropFilterV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:o}=t,{strides:i,pad:u,filterShape:l}=r,c=a.backend_util.computeConv3DInfo(s.shape,l,i,1,u),d=new ws(c);return n.runWebGLProgram(d,[s,o],"float32")}};const $s={kernelName:a.Conv3DBackpropInputV2,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:o}=t,{pad:i,strides:u,inputShape:l}=r,c=a.backend_util.computeConv3DInfo(l,o.shape,u,1,i),d=new ks(c);return n.runWebGLProgram(d,[s,o],"float32")}},Cs=Sr({opSnippet:"if (isnan(x)) return x;\n  return cos(x);\n"}),Es={kernelName:a.Cos,backendName:"webgl",kernelFunc:Cs},_s=Sr({opSnippet:"\n  float e2x = exp(-x);\n  return (e2x + 1.0 / e2x) / 2.0;\n"}),Rs={kernelName:a.Cosh,backendName:"webgl",kernelFunc:_s};class As{constructor(e,t,n,r,a){this.variableNames=["Image","Boxes","BoxInd"],this.outputShape=[];const[s,o,i,u]=e,[l]=t,[c,d]=n;this.outputShape=[l,c,d,u];const p="bilinear"===r?1:0,[h,f]=[o-1+".0",i-1+".0"],[m,g,y]=c>1?[""+(o-1)/(c-1),"(y2-y1) * height_ratio",`y1*${h} + float(y)*(height_scale)`]:["0.0","0.0",`0.5 * (y1+y2) * ${h}`],[x,b,v]=d>1?[""+(i-1)/(d-1),"(x2-x1) * width_ratio",`x1*${f} + float(x)*(width_scale)`]:["0.0","0.0",`0.5 * (x1+x2) * ${f}`];this.userCode=`\n      const float height_ratio = float(${m});\n      const float width_ratio = float(${x});\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int y = coords[1];\n        int x = coords[2];\n        int d = coords[3];\n\n        // get box vals\n        float y1 = getBoxes(b,0);\n        float x1 = getBoxes(b,1);\n        float y2 = getBoxes(b,2);\n        float x2 = getBoxes(b,3);\n\n        // get image in batch index\n        int bInd = round(getBoxInd(b));\n        if(bInd < 0 || bInd >= ${s}) {\n          return;\n        }\n\n        float height_scale = ${g};\n        float width_scale = ${b};\n\n        float in_y = ${y};\n        if( in_y < 0.0 || in_y > ${h} ) {\n          setOutput(float(${a}));\n          return;\n        }\n        float in_x = ${v};\n        if( in_x < 0.0 || in_x > ${f} ) {\n          setOutput(float(${a}));\n          return;\n        }\n\n        vec2 sourceFracIndexCR = vec2(in_x,in_y);\n        if(${p} == 1) {\n          // Compute the four integer indices.\n          ivec2 sourceFloorCR = ivec2(sourceFracIndexCR);\n          ivec2 sourceCeilCR = ivec2(ceil(sourceFracIndexCR));\n\n          float topLeft = getImage(b, sourceFloorCR.y, sourceFloorCR.x, d);\n          float bottomLeft = getImage(b, sourceCeilCR.y, sourceFloorCR.x, d);\n          float topRight = getImage(b, sourceFloorCR.y, sourceCeilCR.x, d);\n          float bottomRight = getImage(b, sourceCeilCR.y, sourceCeilCR.x, d);\n\n          vec2 fracCR = sourceFracIndexCR - vec2(sourceFloorCR);\n\n          float top = topLeft + (topRight - topLeft) * fracCR.x;\n          float bottom = bottomLeft + (bottomRight - bottomLeft) * fracCR.x;\n          float newValue = top + (bottom - top) * fracCR.y;\n          setOutput(newValue);\n        } else {\n          // Compute the coordinators of nearest neighbor point.\n          ivec2 sourceNearestCR = ivec2(floor(\n            sourceFracIndexCR + vec2(0.5,0.5)));\n          float newValue = getImage(b, sourceNearestCR.y, sourceNearestCR.x, d);\n          setOutput(newValue);\n        }\n      }\n    `}}const Os={kernelName:a.CropAndResize,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{image:a,boxes:s,boxInd:o}=t,{cropSize:i,method:u,extrapolationValue:l}=r,c=new As(a.shape,s.shape,i,u,l);return n.runWebGLProgram(c,[a,s,o],"float32")}};var Ds;!function(e){e.Prod="*",e.Sum="+"}(Ds||(Ds={}));class Fs{constructor(e,t,n,r){this.op=e,this.outputShape=t,this.variableNames=["x"],this.customUniforms=[{name:"index",type:"float"}];const a=this.outputShape.length,s=this.op===Ds.Prod?"1.0":"0.0",o=n?s:`getX(${Bs(a,"coords",this.op)})`,i=this.outputShape[this.outputShape.length-1];let u="",l="";n?(u=r?"end != "+(i-1):"end != 0",l=r?"end + 1":"end - 1"):(u=r?`end + pow2 < ${i}`:"end >= pow2",l=r?"end + pow2":"end - pow2"),this.userCode=`\n      void main() {\n        ${he(a)} coords = getOutputCoords();\n        int end = ${Ms(a,"coords",this.op)};\n        float val = ${o};\n        int pow2 = int(pow(2.0, index));\n        if (${u}) {\n          int idx = ${l};\n          ${Ms(a,"coords",this.op)} = idx;\n          val ${this.op}= getX(${Bs(a,"coords",this.op)});\n        }\n        setOutput(val);\n      }\n    `}}function Bs(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.x, ${t}.y`;if(3===e)return`${t}.x, ${t}.y, ${t}.z`;if(4===e)return`${t}.x, ${t}.y, ${t}.z, ${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Ms(e,t,n){if(1===e)return`${t}`;if(2===e)return`${t}.y`;if(3===e)return`${t}.z`;if(4===e)return`${t}.w`;throw new Error(`Cumulative ${n} for rank ${e} is not yet supported`)}function Ps(e,t,n,r,s,o){const i=t.shape.length,u=a.backend_util.getAxesPermutation([r],i);let l=t;null!=u&&(l=Wr({inputs:{x:t},backend:n,attrs:{perm:u}}));const c=a.backend_util.getInnerMostAxes(1,i)[0];if(c!==i-1)throw new Error(`WebGL cumprod shader expects an inner-most axis=${t.shape.length-1} but got axis=${r}`);const d=l.shape[c];let p=hr({inputs:{x:l},backend:n});for(let a=0;a<=Math.ceil(Math.log2(d))-1;a++){const t=new Fs(e,l.shape,!1,o),r=[[a]],s=p;p=n.runWebGLProgram(t,[p],p.dtype,r),n.disposeIntermediateTensorInfo(s)}if(s){const t=new Fs(e,l.shape,s,o),r=p;p=n.runWebGLProgram(t,[p],p.dtype),n.disposeIntermediateTensorInfo(r)}if(null!=u){const e=Wr({inputs:{x:p},backend:n,attrs:{perm:a.backend_util.getUndoAxesPermutation(u)}});return n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(l),e}return p}const Ls={kernelName:a.Cumprod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:o,reverse:i}=r;return Ps(Ds.Prod,a,n,s,o,i)}};const Vs={kernelName:a.Cumsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{axis:s,exclusive:o,reverse:i}=r;return Ps(Ds.Sum,a,n,s,o,i)}};const zs={kernelName:a.DenseBincount,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a,weights:s}=t,{size:o,binaryOutput:i}=r;if(1===a.shape.length){const e=n.readSync(a.dataId),t=n.readSync(s.dataId),r=Kt(e,t,s.dtype,s.shape,o);return n.makeTensorInfo([o],s.dtype,r)}if(2===a.shape.length){const e=n.bufferSync(a),t=n.bufferSync(s),r=jt(e,t,o,i);return n.makeTensorInfo(r.shape,s.dtype,r.values)}throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank${a.shape.length}.`)}};class Us{constructor(e,t,n){this.variableNames=["x"],this.outputShape=[],this.outputShape=e,this.blockSize=t,this.dataFormat=n,this.userCode=`\n    void main() {\n      ivec4 coords = getOutputCoords();\n      int b = coords[0];\n      int h = ${this.getHeightCoordString()};\n      int w = ${this.getWidthCoordString()};\n      int d = ${this.getDepthCoordString()};\n\n      int in_h = h / ${t};\n      int offset_h = imod(h, ${t});\n      int in_w = w / ${t};\n      int offset_w = imod(w, ${t});\n      int offset_d = (offset_h * ${t} + offset_w) *\n        ${this.getOutputDepthSize()};\n      int in_d = d + offset_d;\n\n      float result = ${this.getInputSamplingString()};\n      setOutput(result);\n    }\n  `}getHeightCoordString(){return"NHWC"===this.dataFormat?"coords[1]":"coords[2]"}getWidthCoordString(){return"NHWC"===this.dataFormat?"coords[2]":"coords[3]"}getDepthCoordString(){return"NHWC"===this.dataFormat?"coords[3]":"coords[1]"}getOutputDepthSize(){return"NHWC"===this.dataFormat?this.outputShape[3]:this.outputShape[1]}getInputSamplingString(){return"NHWC"===this.dataFormat?"getX(b, in_h, in_w, in_d)":"getX(b, in_d, in_h, in_w)"}}const Ws={kernelName:a.DepthToSpace,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:a}=t,{blockSize:s,dataFormat:o}=r,i=a.shape[0],u=("NHWC"===o?a.shape[1]:a.shape[2])*s,l=("NHWC"===o?a.shape[2]:a.shape[3])*s,c=("NHWC"===o?a.shape[3]:a.shape[1])/(s*s),d=new Us("NHWC"===o?[i,u,l,c]:[i,c,u,l],s,o);return n.runWebGLProgram(d,[a],a.dtype)}};class Gs{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=ve(this.outputShape.length);const s=e.filterHeight,o=e.filterWidth,i=e.outChannels/e.inChannels;let u="",l="";n&&(u=r?`float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:a?`float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`\n          float activation(float x) {\n            ${n}\n          }\n        `,l="result = activation(result);");const c=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),a&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${u}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${i};\n        int q = d2 - d1 * ${i};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${s}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${o}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${c}\n        ${l}\n        setOutput(result);\n      }\n    `}}class Hs{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],s=arguments.length>4&&void 0!==arguments[4]&&arguments[4];this.variableNames=["x","W"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"pads",type:"ivec2"},{name:"strides",type:"ivec2"},{name:"dilations",type:"ivec2"},{name:"inDims",type:"ivec2"}],this.outputShape=e.outShape,this.enableShapeUniforms=ve(this.outputShape.length);const o=e.outChannels/e.inChannels,i=e.padInfo.left,u=e.strideWidth,l=e.dilationWidth,c=e.filterHeight,d=e.filterWidth,p=d;let h="\n      int xR; int xC; int xCOffset;\n      vec4 wTexel; vec4 previous; vec4 final;";for(let a=0;a<d;a++)h+=`\n          vec4 xTexelC${2*a};\n          int xTexelC${2*a}Ready;\n          vec4 xTexelC${2*a+1};\n          int xTexelC${2*a+1}Ready;\n          vec4 xC${a};`;h+=`\n    for (int r = 0; r < ${c}; r++) {\n      `;for(let a=0;a<d;a++)h+=`\n          xTexelC${2*a} = vec4(0.0);\n          xTexelC${2*a}Ready = 0;\n          xTexelC${2*a+1} = vec4(0.0);\n          xTexelC${2*a+1}Ready = 0;\n          xC${a} = vec4(0.0);`;h+="\n        xR = xRCorner + r * dilations[0];\n        if (xR >=0 && xR < inDims[0]) {\n      ";for(let y=0;y<(p+1)/2;y++){const e=2*y;if(h+=`\n          xC = xCCorner + ${e*l};\n          `,1===u){if(e<d&&(i%2===1?(h+=`\n                xCOffset = xC + 1;\n                if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n              `,h+=1===l&&e>0?`\n                xC${e} = vec4(xTexelC${e-2}.zw, xTexelC${e}.xy);\n                `:`\n                  xCOffset = xC + 1 - 2;\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1]) {\n                    previous = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      previous.zw = vec2(0.0);\n                    }\n\n                    xC${e} = vec4(previous.zw, xTexelC${e}.xy);\n                  } else {\n                    xC${e} = vec4(0.0, 0.0, xTexelC${e}.xy);\n                  }\n                  `):h+=`\n                if (xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xC${e} = xTexelC${e};\n                `,e+1<d)){const t=i%2===0?a.util.nearestLargerEven(l):l;l%2===0&&i%2===1||l%2!==0&&i%2!==1?(h+=`\n                  xCOffset = xC + imod(pads[1], 2) + ${t};\n\n                  if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                    xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n\n                    // Need to manually clear unused channels in case\n                    // we're reading from recycled texture.\n                    if (xCOffset + 1 >= inDims[1]) {\n                      xTexelC${e+1}.zw = vec2(0.0);\n                    }\n                    xTexelC${e+1}Ready = 1;\n                  }\n                  `,l>1&&(h+=`\n                    xCOffset -= 2;\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                      xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                      xTexelC${e}Ready = 1;\n                    }\n                    `),h+=`\n                  xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.xy);\n                  `):h+=1===t?`\n                    xC${e+1} = xTexelC${e};\n                    `:`\n                    xCOffset = xC + ${t};\n\n                    if (xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                      xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                      if (xCOffset + 1 >= inDims[1]) {\n                        xTexelC${e+1}.zw = vec2(0.0);\n                      }\n                      xTexelC${e+1}Ready = 1;\n                    }\n\n                    xC${e+1} = xTexelC${e+1};\n                    `}}else e<d&&(i%2===1?(h+=`\n                xCOffset = xC + 1 - strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xCOffset, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                if(xC + 1 >= 0 && xC + 1 < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xC + 1, d1);\n                  // Need to manually clear unused channels in case\n                  // we're reading from recycled texture.\n                  if (xC + 2 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.0);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n              `,e+1<d&&(h+=`\n                  final = vec4(0.0);\n                  xCOffset = xC + 1 + strides[1];\n                  if(xCOffset >= 0 && xCOffset < inDims[1]) {\n                    final = getX(batch, xR, xCOffset, d1);\n                  }\n                  xC${e+1} = vec4(xTexelC${e+1}.xy, final.xy);\n                `)):(h+=`\n                if(xC >= 0 && xC < inDims[1] && xTexelC${e}Ready == 0) {\n                  xTexelC${e} = getX(batch, xR, xC, d1);\n                  if (xC + 1 >= inDims[1]) {\n                    xTexelC${e}.zw = vec2(0.0);\n                  }\n                  xTexelC${e}Ready = 1;\n                }\n\n                xCOffset = xC + strides[1];\n                if(xCOffset >= 0 && xCOffset < inDims[1] && xTexelC${e+1}Ready == 0) {\n                  xTexelC${e+1} = getX(batch, xR, xCOffset, d1);\n                  if (xCOffset + 1 >= inDims[1]) {\n                    xTexelC${e+1}.zw = vec2(0.);\n                  }\n                  xTexelC${e+1}Ready = 1;\n                }\n\n                xC${e} = vec4(\n                  xTexelC${e}.xy, xTexelC${e+1}.xy);\n              `,e+1<d&&(h+=`\n                  xC${e+1} = vec4(xTexelC${e}.zw, xTexelC${e+1}.zw);\n                `)));e<d&&(h+=`\n            wTexel = getW(r, ${e}, d1, q);\n            dotProd += xC${e} * vec4(wTexel.xz, wTexel.xz);\n          `,e+1<d&&(h+=`\n              wTexel = getW(r, ${e+1}, d1, q);\n              dotProd += xC${e+1} * vec4(wTexel.xz, wTexel.xz);\n            `))}h+="\n    }\n  ",h+="\n      }\n    ";let f="",m="";n&&(f=r?`vec4 activation(vec4 a) {\n          vec4 b = getPreluActivationWeightsAtOutCoords();\n          ${n}\n        }`:s?`vec4 activation(vec4 a) {\n          vec4 b = getLeakyreluAlphaAtOutCoords();\n          ${n}\n        }`:`vec4 activation(vec4 x) {\n          ${n}\n        }`,m="result = activation(result);");const g=t?"result += getBiasAtOutCoords();":"";t&&this.variableNames.push("bias"),r&&this.variableNames.push("preluActivationWeights"),s&&this.variableNames.push("leakyreluAlpha"),this.userCode=`\n      ${f}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${o};\n        int q = d2 - d1 * ${o};\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        //intialize dotProd with a small epsilon seems to reduce GPU accuracy loss.\n        vec4 dotProd = vec4(0.000000000000001);\n\n        ${h}\n\n        vec4 result = dotProd - vec4(0.000000000000001);\n        ${g}\n        ${m}\n        setOutput(result);\n      }\n    `}}const qs={kernelName:a.DepthwiseConv2dNative,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:o}=t,{strides:i,pad:u,dilations:l,dimRoundingMode:c}=r;let d=l;null==d&&(d=[1,1]),a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,d),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const p=a.backend_util.computeConv2DInfo(s.shape,o.shape,i,d,u,c,!0);let h;h=(0,a.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&p.strideWidth<=2&&p.outChannels/p.inChannels===1?new Hs(p):new Gs(p);const f=[[p.padInfo.top,p.padInfo.left],[p.strideHeight,p.strideWidth],[p.dilationHeight,p.dilationWidth],[p.inHeight,p.inWidth]];return n.runWebGLProgram(h,[s,o],"float32",f)}};class Xs{constructor(e){this.variableNames=["x","dy"],this.outputShape=e.filterShape;const t=e.strideHeight,n=e.strideWidth,r=e.padInfo.top,a=e.padInfo.left,s=e.outChannels/e.inChannels;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int wR = coords.x;\n        int wC = coords.y;\n        int d1 = coords.z;\n        int dm = coords.w;\n        int d2 = d1 * ${s} + dm;\n\n        float dotProd = 0.0;\n\n        // TO DO: Vec4 over the batch size\n        for (int b = 0; b < ${e.batchSize}; b++) {\n          for (int yR = 0; yR < ${e.outHeight}; yR++) {\n            int xR = wR + yR * ${t} - ${r};\n\n            if (xR < 0 || xR >= ${e.inHeight}) {\n              continue;\n            }\n\n            for (int yC = 0; yC < ${e.outWidth}; yC++) {\n              int xC = wC + yC * ${n} - ${a};\n\n              if (xC < 0 || xC >= ${e.inWidth}) {\n                continue;\n              }\n\n              float dyValue = getDy(b, yR, yC, d2);\n              float xValue = getX(b, xR, xC, d1);\n              dotProd += (xValue * dyValue);\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ks{constructor(e){this.variableNames=["dy","W"],this.outputShape=e.inShape;const t=e.filterHeight,n=e.filterWidth,r=e.strideHeight,a=e.strideWidth,s=t-1-e.padInfo.top,o=n-1-e.padInfo.left,i=e.outChannels/e.inChannels;this.userCode=`\n      const ivec2 pads = ivec2(${s}, ${o});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords[0];\n        int d1 = coords[3];\n        ivec2 dyCorner = coords.yz - pads;\n        int dyRCorner = dyCorner.x;\n        int dyCCorner = dyCorner.y;\n\n        float dotProd = 0.0;\n\n        for (int wR = 0; wR < ${t}; wR++) {\n          float dyR = float(dyRCorner + wR) / ${r}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          int wRPerm = ${t} - 1 - wR;\n\n          for (int wC = 0; wC < ${n}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${a}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            int wCPerm = ${n} - 1 - wC;\n\n            // TO DO: Vec4 over the channelMul\n            for (int dm = 0; dm < ${i}; dm++) {\n              int d2 = d1 * ${i} + dm;\n              float xValue = getDy(batch, idyR, idyC, d2);\n              float wValue = getW(wRPerm, wCPerm, d1, dm);\n              dotProd += xValue * wValue;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const js={kernelName:a.DepthwiseConv2dNativeBackpropFilter,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,dy:o}=t,{strides:i,dilations:u,pad:l,dimRoundingMode:c,filterShape:d}=r,p=a.backend_util.computeConv2DInfo(s.shape,d,i,u,l,c,!0),h=new Xs(p);return n.runWebGLProgram(h,[s,o],"float32")}};const Ys={kernelName:a.DepthwiseConv2dNativeBackpropInput,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,filter:o}=t,{strides:i,dilations:u,pad:l,dimRoundingMode:c,inputShape:d}=r,p=a.backend_util.computeConv2DInfo(d,o.shape,i,u,l,c,!0),h=new Ks(p);return n.runWebGLProgram(h,[s,o],"float32")}};class Qs{constructor(e){this.variableNames=["X"],this.outputShape=[e,e],this.userCode="\n      void main() {\n          ivec2 coords = getOutputCoords();\n          float val = coords[0] == coords[1] ? getX(coords[0]) : 0.0;\n          setOutput(val);\n      }\n    "}}const Zs={kernelName:a.Diag,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t,s=[...r.shape,...r.shape],o=a.util.sizeFromShape(r.shape),i=Or({inputs:{x:r},backend:n,attrs:{shape:[o]}}),u=new Qs(o),l=n.runWebGLProgram(u,[i],i.dtype),c=Or({inputs:{x:l},backend:n,attrs:{shape:s}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(l),c}};class Js{constructor(e){this.variableNames=["x","W"],this.outputShape=e.outShape;const{inHeight:t,inWidth:n,padInfo:r,strideHeight:a,strideWidth:s,filterHeight:o,filterWidth:i,dilationHeight:u,dilationWidth:l}=e,{top:c,left:d}=r;this.userCode=`\n      const ivec2 strides = ivec2(${a}, ${s});\n      const ivec2 pads = ivec2(${c}, ${d});\n      const float neg_infinity = -3.4e38;\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        int d1 = coords.w;\n        ivec2 outTopLeftCorner =\n            coords.yz * strides - pads;\n        int hBeg = outTopLeftCorner.x;\n        int wBeg = outTopLeftCorner.y;\n\n        float curVal = neg_infinity;\n        for (int h = 0; h < ${o}; h++) {\n          int hIn = hBeg + h * ${u};\n\n          if (hIn >= 0 && hIn < ${t}) {\n            for (int w = 0; w < ${i}; w++) {\n              int wIn = wBeg + w * ${l};\n\n              if (wIn >= 0 && wIn < ${n}) {\n                float xVal = getX(batch, hIn, wIn, d1);\n                float wVal = getW(h, w, d1);\n\n                float val = xVal + wVal;\n                if (val > curVal) {\n                  curVal = val;\n                }\n              }\n            }\n          }\n        }\n\n        float result = curVal;\n        setOutput(result);\n      }\n    `}}const eo={kernelName:a.Dilation2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:o}=t,{strides:i,pad:u,dilations:l}=r,c=a.backend_util.computeDilation2DInfo(s.shape,o.shape,i,u,"NHWC",l);let d;const p=new Js(c);d=n.runWebGLProgram(p,[s,o],"float32");const h=Or({inputs:{x:d},backend:n,attrs:{shape:c.outShape}});return n.disposeIntermediateTensorInfo(d),h}};const to={kernelName:a.Einsum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{equation:s}=r,o=t,{allDims:i,summedDims:u,idDims:l}=a.backend_util.decodeEinsumEquation(s,o.length);a.backend_util.checkEinsumDimSizes(i.length,l,o);const{path:c,steps:d}=a.backend_util.getEinsumComputePath(u,l),p=d.length;let h=null,f=i.length;const m=[];for(let g=0;g<p;++g){for(const e of d[g]){const{permutationIndices:t,expandDims:r}=a.backend_util.getEinsumPermutation(f,l[e]);let s;a.backend_util.isIdentityPermutation(t)?s=o[e]:(s=Wr({inputs:{x:o[e]},backend:n,attrs:{perm:t}}),m.push(s));const i=s.shape.slice();for(let e=0;e<r.length;++e)i.splice(r[e],0,1);a.util.arraysEqual(s.shape,i)||(s=Or({inputs:{x:s},backend:n,attrs:{shape:i}}),m.push(s)),null===h?h=s:(h=Rr({inputs:{a:s,b:h},backend:n}),m.push(h))}g<p-1&&(c[g]>=0&&(h=zr({inputs:{x:h},backend:n,attrs:{axis:c[g]-(i.length-f),keepDims:!1}}),m.push(h)),f--)}for(const a of m)a!==h&&n.disposeIntermediateTensorInfo(a);return h}},no=Sr({opSnippet:"return (x >= 0.0) ? x : (exp(x) - 1.0);",packedOpSnippet:"\n  vec4 result;\n\n  result.r = (x.r >= 0.0) ? x.r : (exp(x.r) - 1.0);\n  result.g = (x.g >= 0.0) ? x.g : (exp(x.g) - 1.0);\n  result.b = (x.b >= 0.0) ? x.b : (exp(x.b) - 1.0);\n  result.a = (x.a >= 0.0) ? x.a : (exp(x.a) - 1.0);\n\n  return result;\n"}),ro={kernelName:a.Elu,backendName:"webgl",kernelFunc:no},ao={kernelName:a.EluGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n}=e,{dy:r,y:s}=t,o=(0,a.env)().getBool("WEBGL_PACK_BINARY_OPERATIONS")?new pr("\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n",r.shape,s.shape):new dr("return (b >= 1.0) ? a : a * (b + 1.0);",r.shape,s.shape);return n.runWebGLProgram(o,[r,s],r.dtype)}},so=Nr({opSnippet:"return float(a == b);",packedOpSnippet:"\n  return vec4(equal(a, b));\n",dtype:"bool",cpuKernelImpl:Zt}),oo={kernelName:a.Equal,backendName:"webgl",kernelFunc:so},io=Sr({opSnippet:`\n  // Error function is calculated approximately with elementary function.\n  // See "Handbook of Mathematical Functions with Formulas,\n  // Graphs, and Mathematical Tables", Abramowitz and Stegun.\n  float p = ${a.backend_util.ERF_P};\n  float a1 = ${a.backend_util.ERF_A1};\n  float a2 = ${a.backend_util.ERF_A2};\n  float a3 = ${a.backend_util.ERF_A3};\n  float a4 = ${a.backend_util.ERF_A4};\n  float a5 = ${a.backend_util.ERF_A5};\n\n  float sign = sign(x);\n  x = abs(x);\n  float t = 1.0 / (1.0 + p * x);\n  return sign * (1.0 - (((((a5*t + a4)*t) + a3)*t + a2)*t + a1)*t*exp(-x*x));\n`}),uo={kernelName:a.Erf,backendName:"webgl",kernelFunc:io},lo=Sr({opSnippet:"if (isnan(x)) return x;\n  return exp(x);\n",packedOpSnippet:"\n  vec4 result = exp(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:Jt,dtype:"float32"}),co={kernelName:a.Exp,backendName:"webgl",kernelFunc:lo};function po(e){const{inputs:t,attrs:n,backend:r}=e,{dim:s}=n,{input:o}=t,i=o.shape.length,u=o.shape.slice();let l=s;return s<0&&(a.util.assert(-(i+1)<=s,(()=>`Axis must be in the interval [${-(i+1)}, ${i}]`)),l=i+s+1),u.splice(l,0,1),Or({inputs:{x:o},backend:r,attrs:{shape:u}})}const ho={kernelName:a.ExpandDims,backendName:"webgl",kernelFunc:po},fo="return exp(x) - 1.0;",mo=Sr({opSnippet:fo,packedOpSnippet:fo,cpuKernelImpl:en}),go={kernelName:a.Expm1,backendName:"webgl",kernelFunc:mo};class yo{constructor(e,t,n){this.variableNames=["real","imag"];const r=t[1];this.outputShape=t;const a=n?`2.0 * ${Math.PI}`:`-2.0 * ${Math.PI}`,s=n?`${r}.0`:"1.0";let o;if("real"===e)o="return real * expR - imag * expI;";else{if("imag"!==e)throw new Error(`FFT component must be either "real" or "imag", got ${e}.`);o="return real * expI + imag * expR;"}this.userCode=`\n      const float exponentMultiplier = ${a};\n\n      float unaryOpComplex(float real, float expR, float imag, float expI) {\n        ${o}\n      }\n\n      float mulMatDFT(int batch, int index) {\n        float indexRatio = float(index) / float(${r});\n        float exponentMultiplierTimesIndexRatio =\n            exponentMultiplier * indexRatio;\n\n        float result = 0.0;\n\n        for (int i = 0; i < ${r}; i++) {\n          // x = (-2|2 * PI / N) * index * i;\n          float x = exponentMultiplierTimesIndexRatio * float(i);\n          float expR = cos(x);\n          float expI = sin(x);\n          float real = getReal(batch, i);\n          float imag = getImag(batch, i);\n\n          result +=\n              unaryOpComplex(real, expR, imag, expI) / ${s};\n        }\n\n        return result;\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        setOutput(mulMatDFT(coords[0], coords[1]));\n      }\n    `}}function xo(e,t,n){const r=n.texData.get(e.dataId),s=a.util.sizeFromShape(e.shape),o=e.shape[e.shape.length-1],i=Or({inputs:{x:e},backend:n,attrs:{shape:[s/o,o]}}),u=i.shape,l=new yo("real",u,t),c=new yo("imag",u,t),d=[{dataId:r.complexTensorInfos.real.dataId,dtype:r.complexTensorInfos.real.dtype,shape:u},{dataId:r.complexTensorInfos.imag.dataId,dtype:r.complexTensorInfos.imag.dtype,shape:u}],p=n.runWebGLProgram(l,d,"float32"),h=n.runWebGLProgram(c,d,"float32"),f=mr({inputs:{real:p,imag:h},backend:n});n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h);const m=Or({inputs:{x:f},backend:n,attrs:{shape:e.shape}});return n.disposeIntermediateTensorInfo(i),n.disposeIntermediateTensorInfo(f),m}const bo={kernelName:a.FFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return xo(r,!1,n)}};class vo{constructor(e,t){this.outputShape=[],this.customUniforms=[{name:"value",type:"float"}],this.variableNames=["x"],this.outputShape=e,this.userCode="\n      void main() {\n        // Input can be obtained from uniform value.\n        setOutput(value);\n      }\n    "}}function wo(e){const{backend:t,attrs:n}=e,{shape:r,value:s}=n;let{dtype:o}=n;if(o=o||a.util.inferDtype(s),"string"===o){const e=a.util.getArrayFromDType(o,a.util.sizeFromShape(r));return e.fill(s),t.makeTensorInfo(r,o,e)}{const e=new vo(r,s),n=[[s]];return t.runWebGLProgram(e,[],o,n)}}const ko={kernelName:a.Fill,backendName:"webgl",kernelFunc:wo};class So{constructor(e){this.variableNames=["Image"],this.outputShape=[];const t=e[2];this.outputShape=e,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n\n          int coordX = ${t} - x - 1;\n          float outputValue;\n          if(coordX >= 0 && coordX < ${t}) {\n            outputValue = getImage(coords[0], coords[1], coordX, coords[3]);\n          } else {\n            outputValue = getImage(coords[0], coords[1], coords[2], coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const No={kernelName:a.FlipLeftRight,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n}=e;const{image:r}=t,a=n,s=new So(r.shape);return a.runWebGLProgram(s,[r],r.dtype)}},To="return floor(x);",Io=Sr({opSnippet:To,packedOpSnippet:To,cpuKernelImpl:tn}),$o={kernelName:a.Floor,backendName:"webgl",kernelFunc:Io},Co=Nr({opSnippet:"\n  float s = sign(a) * sign(b);\n  int ia = round(a);\n  int ib = round(b);\n  if (ib != 0) {\n    // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n    return float(idiv(ia, ib, s));\n  } else {\n    return NAN;\n  }\n",packedOpSnippet:"\n  ivec4 ia = round(a);\n  ivec4 ib = round(b);\n  bvec4 cond = notEqual(ib, ivec4(0));\n  ivec4 result = ivec4(0);\n  vec4 s = sign(a) * sign(b);\n\n  // Windows (D3D) wants guaranteed non-zero int division at compile-time.\n  if (cond[0]) {\n    result[0] = idiv(ia[0], ib[0], s[0]);\n  }\n  if (cond[1]) {\n    result[1] = idiv(ia[1], ib[1], s[1]);\n  }\n  if (cond[2]) {\n    result[2] = idiv(ia[2], ib[2], s[2]);\n  }\n  if (cond[3]) {\n    result[3] = idiv(ia[3], ib[3], s[3]);\n  }\n  return vec4(result);\n",dtype:"int32"}),Eo={kernelName:a.FloorDiv,backendName:"webgl",kernelFunc:Co};class _o{constructor(e){this.variableNames=["A"];const t=z(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${r}.0, ${n}.0);\n\n        vec4 values = ${t.texture2D}(A, uv);\n        float value;\n        if (depth == 0) {\n          value = values.r;\n        } else if (depth == 1) {\n          value = values.g;\n        } else if (depth == 2) {\n          value = values.b;\n        } else if (depth == 3) {\n          value = values.a;\n        }\n\n        setOutput(floor(value * 255.0 + 0.5));\n      }\n    `}}class Ro{constructor(e){this.variableNames=["A"],this.packedInputs=!1,this.packedOutput=!0;const t=z(),[n,r]=e;this.outputShape=e,this.userCode=`\n      void main() {\n        ivec3 coords = getOutputCoords();\n        int texR = coords[0];\n        int texC = coords[1];\n        int depth = coords[2];\n\n        vec4 result = vec4(0.);\n\n        for(int row=0; row<=1; row++) {\n          for(int col=0; col<=1; col++) {\n            texC = coords[1] + row;\n            depth = coords[2] + col;\n\n            vec2 uv = (vec2(texC, texR) + halfCR) /\n                       vec2(${r}.0, ${n}.0);\n            vec4 values = ${t.texture2D}(A, uv);\n            float value;\n            if (depth == 0) {\n              value = values.r;\n            } else if (depth == 1) {\n              value = values.g;\n            } else if (depth == 2) {\n              value = values.b;\n            } else if (depth == 3) {\n              value = values.a;\n            }\n\n            result[row * 2 + col] = floor(value * 255.0 + 0.5);\n          }\n        }\n\n        ${t.output} = result;\n      }\n    `}}const Ao={kernelName:a.FromPixels,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e;let{pixels:s}=t;const{numChannels:o}=r,i="undefined"!==typeof HTMLVideoElement&&s instanceof HTMLVideoElement,u="undefined"!==typeof HTMLImageElement&&s instanceof HTMLImageElement,[c,d]=i?[s.videoWidth,s.videoHeight]:[s.width,s.height],p=[d,c],h=[d,c,o];(u||i)&&(null==Oo&&(Oo=document.createElement("canvas").getContext("2d")),Oo.canvas.width=c,Oo.canvas.height=d,Oo.drawImage(s,0,0,c,d),s=Oo.canvas);const f=n.makeTensorInfo(p,"int32");n.texData.get(f.dataId).usage=l.PIXELS,n.gpgpu.uploadPixelDataToTexture(n.getTexture(f.dataId),s);const m=(0,a.env)().getBool("WEBGL_PACK")?new Ro(h):new _o(h),g=n.runWebGLProgram(m,[f],"int32");return n.disposeData(f.dataId),g}};let Oo;const Do={kernelName:a.FusedConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:o,bias:i,preluActivationWeights:u}=t,{strides:l,pad:c,dataFormat:d,dilations:p,dimRoundingMode:h,activation:f,leakyreluAlpha:m}=r,g=a.backend_util.convertConv2DDataFormat(d),y=a.backend_util.computeConv2DInfo(s.shape,o.shape,l,p,c,h,!1,g);let x;const b=[];if(1!==y.filterHeight||1!==y.filterWidth||1!==y.dilationHeight||1!==y.dilationWidth||1!==y.strideHeight||1!==y.strideWidth||"SAME"!==y.padInfo.type&&"VALID"!==y.padInfo.type)if((0,a.env)().getBool("WEBGL_CONV_IM2COL"))x=ys({x:s,filter:o,convInfo:y,backend:n,bias:i,activation:f,preluActivationWeights:u,leakyreluAlpha:m});else{const e=null!=i,t=null!=u,r="leakyrelu"===f,l=f?Tr(f,!1):null,c=new ps(y,e,l,t,r),p=[s,o],h=(e,t)=>{if("NCHW"===t&&1===e.shape.length&&1!==e.shape[0]){const t=Or({inputs:{x:e},backend:n,attrs:{shape:[e.shape[0],1,1]}});return b.push(t),t}return e};if(e&&p.push(h(i,d)),t&&p.push(h(u,d)),r){const e=n.makeTensorInfo([],"float32",a.util.createScalarValue(m,"float32"));p.push(e),b.push(e)}x=n.runWebGLProgram(c,p,"float32")}else x=gs({x:s,filter:o,convInfo:y,backend:n,bias:i,activation:f,preluActivationWeights:u,leakyreluAlpha:m});const v=Or({inputs:{x:x},backend:n,attrs:{shape:y.outShape}});return b.push(x),b.forEach((e=>n.disposeIntermediateTensorInfo(e))),v}};const Fo={kernelName:a.FusedDepthwiseConv2D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,filter:o,bias:i,preluActivationWeights:u}=t,{strides:l,pad:c,dilations:d,dimRoundingMode:p,activation:h,leakyreluAlpha:f}=r,m=[];let g=d;null==g&&(g=[1,1]),a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(l,g),(()=>`Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides ${l} and dilations '${g}'`));const y=a.backend_util.computeConv2DInfo(s.shape,o.shape,l,g,c,p,!0),x=(0,a.env)().getBool("WEBGL_PACK_DEPTHWISECONV")&&y.strideWidth<=2&&y.outChannels/y.inChannels===1,b=h?Tr(h,x):null,v=[s,o],w=null!=i,k=null!=u,S="leakyrelu"===h;if(w&&v.push(i),k&&v.push(u),S){const e=n.makeTensorInfo([],"float32",a.util.createScalarValue(f,"float32"));v.push(e),m.push(e)}let N;N=x?new Hs(y,w,b,k,S):new Gs(y,w,b,k,S);const T=[[y.padInfo.top,y.padInfo.left],[y.strideHeight,y.strideWidth],[y.dilationHeight,y.dilationWidth],[y.inHeight,y.inWidth]],I=n.runWebGLProgram(N,v,"float32",T);return m.forEach((e=>n.disposeIntermediateTensorInfo(e))),I}};class Bo{constructor(e,t,n,r){this.sliceDim=e,this.strides=t,this.paramsShape=r,this.variableNames=["x","indices"],this.outputShape=n;const a=he(t.length),s=he(n.length),o=this.sliceDim>1?"strides[j]":"strides",i=he(r.length),u=r.length>1?"paramsShape[j]":"paramsShape";this.userCode=`\n        ${a} strides = ${a}(${this.strides});\n        ${i} paramsShape = ${i}(${this.paramsShape});\n         void main() {\n          ${s} coords = getOutputCoords();\n          int flattenIndex = 0;\n          bool out_of_bounds = false;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            out_of_bounds = out_of_bounds || index < 0;\n            out_of_bounds = out_of_bounds || index >= ${u};\n            flattenIndex += index * ${o};\n          }\n          setOutput(out_of_bounds ? 0.0 : getX(flattenIndex, coords[1]));\n        }\n      `}}const Mo={kernelName:a.GatherNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{params:r,indices:s}=t,o=s.shape,i=o[o.length-1],u=a.util.sizeFromShape(r.shape),[l,c,d,p]=a.backend_util.prepareAndValidate(r,s),h=Or({inputs:{x:s},backend:n,attrs:{shape:[c,i]}}),f=Or({inputs:{x:r},backend:n,attrs:{shape:[a.util.sizeFromShape(r.shape)/d,d]}});if(n.shouldExecuteOnCPU([r,s])||"string"===r.dtype){const e=n.readSync(s.dataId),t=n.bufferSync(r),a=nn(e,t,r.dtype,c,i,d,p,r.shape,u);return n.makeTensorInfo(l,r.dtype,a.values)}const m=new Bo(i,p,[c,d],r.shape),g=n.runWebGLProgram(m,[f,h],f.dtype),y=Or({inputs:{x:g},backend:n,attrs:{shape:l}});return n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(g),y}};class Po{constructor(e,t){this.variableNames=["A","indices"],this.outputShape=t,this.rank=t.length;const n=he(this.rank),r=function(e,t){const n=["resRC.x","resRC.y","resRC.z","resRC.w"],r=[];for(let a=0;a<e.length;a++)2===a?r.push("index"):r.push(`${n[a]}`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${n} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${e[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${r}));\n      }\n    `}}function Lo(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,indices:o}=t,{axis:i,batchDims:u}=r,l=a.util.parseAxisParam(i,s.shape)[0];if((0,a.env)().get("DEBUG")){const e=n.readSync(o.dataId),t=s.shape[l];for(let n=0;n<e.length;++n){const r=e[n];a.util.assert(r<=t-1&&r>=0,(()=>`GatherV2: the index value ${r} is not in [0, ${t-1}]`))}}const c=a.backend_util.segment_util.collectGatherOpShapeInfo(s,o,l,u),d=a.util.sizeFromShape(o.shape),p=[],h=Or({inputs:{x:s},backend:n,attrs:{shape:[c.batchSize,c.outerSize,c.dimSize,c.sliceSize]}}),f=Or({inputs:{x:o},backend:n,attrs:{shape:[c.batchSize,d/c.batchSize]}});p.push(h),p.push(f);const m=[c.batchSize,c.outerSize,d/c.batchSize,c.sliceSize];if(n.shouldExecuteOnCPU([s,o])||"string"===s.dtype){const e=n.bufferSync(f),t=n.bufferSync(h),r=rn(t,e,m);return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),n.makeTensorInfo(c.outputShape,r.dtype,r.values)}const g=new Po(h.shape,m),y=n.runWebGLProgram(g,[h,f],h.dtype);p.push(y);const x=Or({inputs:{x:y},backend:n,attrs:{shape:c.outputShape}});return p.forEach((e=>n.disposeIntermediateTensorInfo(e))),x}const Vo={kernelName:a.GatherV2,backendName:"webgl",kernelFunc:Lo},zo=Nr({opSnippet:"return float(a > b);",packedOpSnippet:"\n  return vec4(greaterThan(a, b));\n",cpuKernelImpl:an,dtype:"bool"}),Uo={kernelName:a.Greater,backendName:"webgl",kernelFunc:zo},Wo=Nr({opSnippet:"return float(a >= b);",packedOpSnippet:"\n  return vec4(greaterThanEqual(a, b));\n",dtype:"bool",cpuKernelImpl:sn}),Go={kernelName:a.GreaterEqual,backendName:"webgl",kernelFunc:Wo};const Ho={kernelName:a.IFFT,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{input:r}=t;return xo(r,!0,n)}},qo=Sr({opSnippet:"return float(!isnan(x) && !isinf(x));",dtype:"bool"}),Xo={kernelName:a.IsFinite,backendName:"webgl",kernelFunc:qo},Ko=Sr({opSnippet:"return float(isinf(x));",dtype:"bool"}),jo={kernelName:a.IsInf,backendName:"webgl",kernelFunc:Ko},Yo=Sr({opSnippet:"return float(isnan(x));",dtype:"bool"}),Qo={kernelName:a.IsNan,backendName:"webgl",kernelFunc:Yo},Zo=Nr({opSnippet:"return float(a < b);",packedOpSnippet:"\n  return vec4(lessThan(a, b));\n",cpuKernelImpl:on,dtype:"bool"}),Jo={kernelName:a.Less,backendName:"webgl",kernelFunc:Zo},ei=Nr({opSnippet:"return float(a <= b);",packedOpSnippet:"\n  return vec4(lessThanEqual(a, b));\n",cpuKernelImpl:un,dtype:"bool"}),ti={kernelName:a.LessEqual,backendName:"webgl",kernelFunc:ei};const ni={kernelName:a.LinSpace,backendName:"webgl",kernelFunc:function(e){const{backend:t,attrs:n}=e,{start:r,stop:a,num:s}=n,o=ln(r,a,s);return t.makeTensorInfo([o.length],"float32",o)}},ri=Sr({opSnippet:"if (isnan(x)) return x;\n  return x < 0.0 ? 0./0. : log(x);\n",packedOpSnippet:"\n  vec4 result = log(x);\n  bvec4 isNaN = isnan(x);\n  result.r = isNaN.r ? x.r : (x.r < 0.0 ? 0./0. : result.r);\n  result.g = isNaN.g ? x.g : (x.g < 0.0 ? 0./0. : result.g);\n  result.b = isNaN.b ? x.b : (x.b < 0.0 ? 0./0. : result.b);\n  result.a = isNaN.a ? x.a : (x.a < 0.0 ? 0./0. : result.a);\n  return result;\n",cpuKernelImpl:cn}),ai={kernelName:a.Log,backendName:"webgl",kernelFunc:ri},si=Sr({opSnippet:"if (isnan(x)) return x;\n  return log(1.0 + x);\n"}),oi={kernelName:a.Log1p,backendName:"webgl",kernelFunc:si},ii=Nr({opSnippet:"return float(a >= 1.0 && b >= 1.0);",packedOpSnippet:"\n  return vec4(\n    vec4(greaterThanEqual(a, vec4(1.0))) *\n    vec4(greaterThanEqual(b, vec4(1.0))));\n",dtype:"bool"}),ui={kernelName:a.LogicalAnd,backendName:"webgl",kernelFunc:ii},li=Sr({opSnippet:"return float(!(x >= 1.0));"}),ci={kernelName:a.LogicalNot,backendName:"webgl",kernelFunc:li},di=Nr({opSnippet:"return float(a >= 1.0 || b >= 1.0);",packedOpSnippet:"\n  return min(\n    vec4(greaterThanEqual(a, vec4(1.0))) +\n    vec4(greaterThanEqual(b, vec4(1.0))),\n    vec4(1.0));\n",dtype:"bool"}),pi={kernelName:a.LogicalOr,backendName:"webgl",kernelFunc:di};class hi{constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[];const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n        int d = coords[3];\n        float x = getX(b, r, c, d);\n        float sum = 0.0;\n        for (int j = -${s}; j <= ${s}; j++) {\n          int idx = d + j;\n          if (idx >= 0 && idx <=  ${o}) {\n            float z = getX(b, r, c, idx);\n            sum += z * z;\n          }\n        }\n        float val = x * ${i};\n        setOutput(val);\n      }\n    `}}class fi{constructor(e,t,n,r,a){this.variableNames=["x"],this.outputShape=[],this.packedInputs=!0,this.packedOutput=!0;const s=t,o=e[3]-1;let i;this.outputShape=e;const u=`float(${n}) + float(${r}) * sum`;i=.5===a?`inversesqrt(${u})`:1===a?`1.0/(${u})`:`exp(log(${u}) * float(-${a}));`,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords.x;\n        int r = coords.y;\n        int c = coords.z;\n        int d = coords.w;\n\n        bool hasNextCol = d < ${this.outputShape[3]};\n        bool hasNextRow = c < ${this.outputShape[2]};\n\n        vec4 sum = vec4(0.);\n        vec4 xFragAtOutputCoords = getX(b, r, c, d);\n\n        vec4 xAtOutputCoords = vec4(\n          getChannel(xFragAtOutputCoords, vec2(c, d)),\n          hasNextCol ?\n            getChannel(xFragAtOutputCoords, vec2(c, d + 1)) : 0.0,\n          hasNextRow ?\n            getChannel(xFragAtOutputCoords , vec2(c + 1, d)) : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getChannel(xFragAtOutputCoords, vec2(c + 1, d + 1)) : 0.0\n        );\n\n        int firstChannel = d - ${s};\n        vec2 cache = vec2(0.);\n        if(firstChannel >= 0){\n          vec4 firstChannelFrag = getX(b, r, c, firstChannel);\n          cache.x = getChannel(firstChannelFrag, vec2(c, firstChannel));\n            if(hasNextRow){\n              cache.y = getChannel(firstChannelFrag, vec2(c + 1, firstChannel));\n            }\n        }\n\n        ivec2 depth = ivec2(d, d + 1);\n        for (int j = - ${s}; j <= ${s}; j++) {\n          ivec2 idx = depth + j;\n          bvec2 aboveLowerBound = greaterThanEqual(idx, ivec2(0));\n          bvec2 belowUpperBound = lessThanEqual(idx, ivec2(${o}));\n\n          bool depthInRange = aboveLowerBound.x && belowUpperBound.x;\n          bool depthPlusOneInRange = aboveLowerBound.y && belowUpperBound.y;\n\n          if(depthInRange || depthPlusOneInRange){\n            vec4 z = vec4(0.);\n            vec4 xFragAtCurrentDepth;\n            z.xz = cache.xy;\n            if(depthPlusOneInRange && hasNextCol){\n              xFragAtCurrentDepth = idx.y != d ?\n                getX(b, r, c, idx.y) : xFragAtOutputCoords;\n              z.y = getChannel(xFragAtCurrentDepth, vec2(c, idx.y));\n              if(hasNextRow){\n                z.w = getChannel(xFragAtCurrentDepth, vec2(c + 1, idx.y));\n              }\n            }\n            cache.xy = z.yw;\n            sum += z * z;\n          }\n        }\n        vec4 result = xAtOutputCoords * ${i};\n        setOutput(result);\n      }\n    `}}const mi={kernelName:a.LRN,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{depthRadius:o,bias:i,alpha:u,beta:l}=r,c=(0,a.env)().getBool("WEBGL_PACK_NORMALIZATION")?new fi(s.shape,o,i,u,l):new hi(s.shape,o,i,u,l);return n.runWebGLProgram(c,[s],s.dtype)}};class gi{constructor(e,t,n,r,a){this.variableNames=["inputImage","outputImage","dy"],this.outputShape=[],this.outputShape=e,this.depth=e[3],this.depthRadius=t,this.bias=n,this.alpha=r,this.beta=a,this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int r = coords[1];\n        int c = coords[2];\n\n        float result = 0.0;\n        for (int d = 0; d < ${this.depth}; ++d) {\n          int depthBegin = int(max(0.0, float(d - ${t})));\n          int depthEnd = int(min(float(${this.depth}),\n              float(d + ${t} + 1)));\n\n          const int MIN_DEPTH_BEGIN = 0;\n          const int MAX_DEPTH_END = ${this.depth};\n\n          float norm = 0.0;\n          for (int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k) {\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd) {\n              norm += getInputImage(b, r, c, k) * getInputImage(b, r, c, k);\n            }\n            else {\n              break;\n            }\n          }\n\n          norm = float(${r}) * norm + float(${n});\n\n          for(int k = MIN_DEPTH_BEGIN; k < MAX_DEPTH_END; ++k){\n            if (k < depthBegin){\n              continue;\n            }\n            else if (k >= depthBegin && k < depthEnd){\n              float dyi = -2.0 * float(${r})\n                * float(${a})\n                * getInputImage(b ,r ,c, k) * getOutputImage(b, r, c, d)\n                / norm;\n              if (k == d) {\n                dyi += pow(norm, -1.0 * ${a});\n              }\n              if (k == coords[3]) {\n                dyi *= getDy(b, r, c, d);\n                result += dyi;\n              }\n            }\n            else {\n              break;\n            }\n          }\n      }\n      setOutput(result);\n      }\n    `}}const yi={kernelName:a.LRNGrad,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:a,y:s,dy:o}=t,{depthRadius:i,bias:u,alpha:l,beta:c}=r,d=new gi(a.shape,i,u,l,c);return n.runWebGLProgram(d,[a,s,o],a.dtype)}};function xi(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reductionIndices:o,keepDims:i}=r,u=s.shape.length,l=a.util.parseAxisParam(o,s.shape);let c=l;const d=a.backend_util.getAxesPermutation(c,u),p=null!=d,h=n.shouldExecuteOnCPU([s]);let f=s;if(p){if(h){const e=n.texData.get(f.dataId).values,t=new Array(u);for(let n=0;n<t.length;n++)t[n]=s.shape[d[n]];const r=Fn(e,s.shape,s.dtype,d,t);f=n.makeTensorInfo(t,s.dtype);n.texData.get(f.dataId).values=r}else f=Vr(s,d,n);c=a.backend_util.getInnerMostAxes(c.length,u)}a.backend_util.assertAxesAreInnerMostDims("max",c,u);const[m,g]=a.backend_util.computeOutAndReduceShapes(f.shape,c);let y,x=m;if(i&&(x=a.backend_util.expandShapeToKeepDim(m,l)),h){const e=n.texData.get(f.dataId).values,t=dn(e,a.util.sizeFromShape(g),x,s.dtype);y=n.makeTensorInfo(x,s.dtype);n.texData.get(y.dataId).values=t}else y=function(e,t,n,r){const s=a.util.sizeFromShape(t),o=Or({inputs:{x:e},attrs:{shape:[a.util.sizeFromShape(e.shape)/s,s]},backend:r}),i=Mr(o,e.dtype,"max",r),u=Or({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(i),u}(f,g,x,n);return p&&n.disposeIntermediateTensorInfo(f),y}const bi={kernelName:a.Max,backendName:"webgl",kernelFunc:xi},vi=Nr({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return max(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(max(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:pn}),wi={kernelName:a.Maximum,backendName:"webgl",kernelFunc:vi};const ki={kernelName:a.MaxPool,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t;L(s,"maxPool");const{filterSize:o,strides:i,pad:u,dimRoundingMode:l}=r;a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '1'`));const c=a.backend_util.computePool2DInfo(s.shape,o,i,1,u,l);if(1===c.filterWidth&&1===c.filterHeight&&a.util.arraysEqual(c.inShape,c.outShape))return hr({inputs:{x:s},backend:n});const d=new Na(c,"max",!1);return n.runWebGLProgram(d,[s],s.dtype)}};const Si={kernelName:a.MaxPool3D,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{filterSize:o,strides:i,pad:u,dataFormat:l,dimRoundingMode:c}=r,d=a.backend_util.computePool3DInfo(s.shape,o,i,[1,1,1],u,c,l),p=new Ta(d,"max",!1);return n.runWebGLProgram(p,[s],s.dtype)}};class Ni{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideHeight,n=e.strideWidth,r=e.dilationHeight,a=e.effectiveFilterHeight,s=e.effectiveFilterWidth,o=a-1-e.padInfo.top,i=s-1-e.padInfo.left,u=a*s-1;this.userCode=`\n      const ivec2 pads = ivec2(${o}, ${i});\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n\n        ivec2 dyRCCorner = coords.yz - pads;\n        int dyRCorner = dyRCCorner.x;\n        int dyCCorner = dyRCCorner.y;\n\n        // Convolve dy(?, ?, d) with pos mask(:, :, d) to get dx(xR, xC, d).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        for (int wR = 0; wR < ${a};\n          wR += ${r}) {\n          float dyR = float(dyRCorner + wR) / ${t}.0;\n\n          if (dyR < 0.0 || dyR >= ${e.outHeight}.0 || fract(dyR) > 0.0) {\n            continue;\n          }\n          int idyR = int(dyR);\n\n          for (int wC = 0; wC < ${s}; wC++) {\n            float dyC = float(dyCCorner + wC) / ${n}.0;\n\n            if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                fract(dyC) > 0.0) {\n              continue;\n            }\n            int idyC = int(dyC);\n\n            float dyValue = getDy(b, idyR, idyC, d);\n            int maxPosValue = ${u} - int(getMaxPos(b, idyR, idyC, d));\n\n            // Get the current value, check it against the value from the\n            // position matrix.\n            int curPosValue = wR * ${s} + wC;\n            float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n            dotProd += dyValue * mask;\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}class Ti{constructor(e){this.variableNames=["dy","maxPos"],this.outputShape=e.inShape;const t=e.strideDepth,n=e.strideHeight,r=e.strideWidth,a=e.dilationDepth,s=e.dilationHeight,o=e.dilationWidth,i=e.effectiveFilterDepth,u=e.effectiveFilterHeight,l=e.effectiveFilterWidth,c=i-1-e.padInfo.front,d=u-1-e.padInfo.top,p=l-1-e.padInfo.left,h=i*u*l-1;this.userCode=`\n      const ivec3 pads = ivec3(${c}, ${d}, ${p});\n\n      void main() {\n        ivec5 coords = getOutputCoords();\n        int batch = coords.x;\n        int ch = coords.u;\n\n        ivec3 dyCorner = ivec3(coords.y, coords.z, coords.w) - pads;\n        int dyDCorner = dyCorner.x;\n        int dyRCorner = dyCorner.y;\n        int dyCCorner = dyCorner.z;\n\n        // Convolve dy(?, ?, ?, ch) with pos mask(:, :, :, d) to get\n        // dx(xD, xR, xC, ch).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n\n        for (int wD = 0; wD < ${i};\n           wD += ${a}) {\n          float dyD = float(dyDCorner + wD) / ${t}.0;\n\n          if (dyD < 0.0 || dyD >= ${e.outDepth}.0 || fract(dyD) > 0.0) {\n            continue;\n          }\n          int idyD = int(dyD);\n\n          for (int wR = 0; wR < ${u};\n              wR += ${s}) {\n            float dyR = float(dyRCorner + wR) / ${n}.0;\n\n            if (dyR < 0.0 || dyR >= ${e.outHeight}.0 ||\n                fract(dyR) > 0.0) {\n              continue;\n            }\n            int idyR = int(dyR);\n\n            for (int wC = 0; wC < ${l};\n                wC += ${o}) {\n              float dyC = float(dyCCorner + wC) / ${r}.0;\n\n              if (dyC < 0.0 || dyC >= ${e.outWidth}.0 ||\n                  fract(dyC) > 0.0) {\n                continue;\n              }\n              int idyC = int(dyC);\n\n              float dyValue = getDy(batch, idyD, idyR, idyC, ch);\n              int maxPosValue = ${h} -\n                  int(getMaxPos(batch, idyD, idyR, idyC, ch));\n\n              // Get the current value, check it against the value from the\n              // position matrix.\n              int curPosValue =\n                  wD * ${u} * ${l} +\n                  wR * ${l} + wC;\n              float mask = float(maxPosValue == curPosValue ? 1.0 : 0.0);\n\n              dotProd += dyValue * mask;\n            }\n          }\n        }\n        setOutput(dotProd);\n      }\n    `}}const Ii={kernelName:a.MaxPool3DGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:o}=t,i=o,{filterSize:u,strides:l,pad:c,dimRoundingMode:d}=r,p=a.backend_util.computePool3DInfo(i.shape,u,l,[1,1,1],c,d),h=new Ta(p,"max",!0),f=n.runWebGLProgram(h,[i],i.dtype),m=new Ti(p),g=n.runWebGLProgram(m,[s,f],i.dtype);return n.disposeIntermediateTensorInfo(f),g}};const $i={kernelName:a.MaxPoolGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{dy:s,input:o,output:i}=t,u=o;L([o,i],"maxPoolGrad");const{filterSize:l,strides:c,pad:d,dimRoundingMode:p}=r,h=a.backend_util.computePool2DInfo(u.shape,l,c,1,d,p),f=new Na(h,"max",!0),m=n.runWebGLProgram(f,[u],u.dtype),g=new Ni(h),y=n.runWebGLProgram(g,[s,m],u.dtype);return n.disposeIntermediateTensorInfo(m),y}};const Ci={kernelName:a.MaxPoolWithArgmax,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:r}=e;const{x:s}=t,{filterSize:o,strides:i,pad:u,includeBatchInIndex:l}=n,c=r;a.util.assert(4===s.shape.length,(()=>`Error in maxPool: input must be rank 4 but got rank ${s.shape.length}.`));const d=[1,1];a.util.assert(a.backend_util.eitherStridesOrDilationsAreOne(i,d),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${i} and dilations '${d}'`));const p=a.backend_util.computePool2DInfo(s.shape,o,i,d,u),[h,f]=function(e,t,n,r){let a=new Na(n,"max",!1);const s=r.runWebGLProgram(a,[e],"float32");return a=new Na(n,"max",!0,!0,t),[s,r.runWebGLProgram(a,[e],"float32")]}(s,l,p,c);return[h,f]}};const Ei={kernelName:a.Mean,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:r}=e;const{x:s}=t,{keepDims:o,axis:i}=n,u=r,l=s.shape.length,c=a.util.parseAxisParam(i,s.shape);let d=c;const p=a.backend_util.getAxesPermutation(d,l),h=null!=p,f=u.shouldExecuteOnCPU([s]),m=[];let g=s;if(h){if(f){const e=u.texData.get(g.dataId).values,t=new Array(l);for(let r=0;r<t.length;r++)t[r]=s.shape[p[r]];const n=Fn(e,s.shape,s.dtype,p,t);g=u.makeTensorInfo(t,s.dtype);u.texData.get(g.dataId).values=n}else g=Vr(s,p,u);m.push(g),d=a.backend_util.getInnerMostAxes(d.length,l)}a.backend_util.assertAxesAreInnerMostDims("sum",d,l);const[y,x]=a.backend_util.computeOutAndReduceShapes(g.shape,d);let b=y;o&&(b=a.backend_util.expandShapeToKeepDim(y,c));const v=function(e,t,n,r){const s=a.util.sizeFromShape(t),o=Or({inputs:{x:e},attrs:{shape:[a.util.sizeFromShape(e.shape)/s,s]},backend:r}),i=Mr(o,"float32","mean",r),u=Or({inputs:{x:i},attrs:{shape:n},backend:r});return r.disposeIntermediateTensorInfo(o),r.disposeIntermediateTensorInfo(i),u}(g,x,b,u);for(const a of m)u.disposeIntermediateTensorInfo(a);return v}};const _i={kernelName:a.Min,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:o,keepDims:i}=r,u=s.shape.length,l=a.util.parseAxisParam(o,s.shape);let c=l;const d=a.backend_util.getAxesPermutation(c,u);let p=s;null!=d&&(p=Wr({inputs:{x:s},backend:n,attrs:{perm:d}}),c=a.backend_util.getInnerMostAxes(c.length,s.shape.length)),a.backend_util.assertAxesAreInnerMostDims("min",c,u);const[h,f]=a.backend_util.computeOutAndReduceShapes(p.shape,c),m=Or({inputs:{x:p},backend:n,attrs:{shape:[-1,a.util.sizeFromShape(f)]}}),g=Mr(m,m.dtype,"min",n);let y;if(i){y=Or({inputs:{x:g},backend:n,attrs:{shape:a.backend_util.expandShapeToKeepDim(h,l)}})}else y=Or({inputs:{x:g},backend:n,attrs:{shape:h}});return n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(g),null!=d&&n.disposeIntermediateTensorInfo(p),y}},Ri=Nr({opSnippet:"\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n\n  return min(a, b);\n",packedOpSnippet:"\n  vec4 result = vec4(min(a, b));\n  vec4 isNaN = min(vec4(isnan(a)) + vec4(isnan(b)), vec4(1.0));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n",cpuKernelImpl:hn}),Ai={kernelName:a.Minimum,backendName:"webgl",kernelFunc:Ri};class Oi{constructor(e,t,n){this.variableNames=["x"],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=he(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r),u="reflect"===n?0:1;this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        for (int i = 0; i < ${r}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${u};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${u};\n          }\n        }\n        ${a} coords = outC - start;\n        setOutput(getX(${i}));\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${u};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${u};\n          }\n          setOutput(getX(outC - start));\n        }\n      `}}class Di{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=he(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=Pn("rc",r),u=Pn("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,d="reflect"===n?0:1;let p="";if(1===r){const e=`\n        ${a} source = rc;\n        if (source < start) {\n          source = start * 2 - source - ${d};\n        } else if (source >= end) {\n          source = (end - 1) * 2 - source + ${d};\n        }\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n      `}else{const e=`\n        ${a} source = rc;\n        ${a} lt = ${a}(lessThan(source, start));\n        ${a} gte = ${a}(greaterThanEqual(source, end));\n        ${a} orig = 1 - (lt + gte);\n        source = orig * source +\n                lt * (start * 2 - source - ${d}) +\n                gte * ((end - 1) * 2 - source + ${d});\n        source -= start;\n      `;p=`\n        ${a} rc = outputLoc;\n        ${e}\n        result[0] = getChannel(getX(${u.join()}), ${c});\n        ${i[r-1]} += 1;\n        if(${l}) {\n          ${e}\n          result[1] = getChannel(getX(${u.join()}), ${c});\n        }\n        rc = outputLoc;\n        ${i[r-2]} += 1;\n        if(${i[r-2]} < ${this.outputShape[r-2]}) {\n          ${e}\n          result[2] = getChannel(getX(${u.join()}), ${c});\n          ${i[r-1]} += 1;\n          if(${l}) {\n            ${e}\n            result[3] = getChannel(getX(${u.join()}), ${c});\n          }\n        }\n      `}this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${p}\n        setOutput(result);\n      }\n    `}}const Fi={kernelName:a.MirrorPad,backendName:"webgl",kernelFunc:e=>{let{inputs:t,backend:n,attrs:r}=e;const{x:s}=t,{paddings:o,mode:i}=r,u=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Di(s.shape,o,i):new Oi(s.shape,o,i);return n.runWebGLProgram(u,[s],s.dtype)}},Bi=Nr({opSnippet:"if (b == 0.0) return NAN;\n  return mod(a, b);",packedOpSnippet:"\n  vec4 result = mod(a, b);\n  vec4 isNaN = vec4(equal(b, vec4(0.0)));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),Mi={kernelName:a.Mod,backendName:"webgl",kernelFunc:Bi};class Pi{constructor(e,t,n){this.variableNames=["probs"],this.customUniforms=[{name:"seed",type:"float"}],this.outputShape=[e,n],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n\n        float r = random(seed);\n        float cdf = 0.0;\n\n        for (int i = 0; i < ${t-1}; i++) {\n          cdf += getProbs(batch, i);\n\n          if (r < cdf) {\n            setOutput(float(i));\n            return;\n          }\n        }\n\n        // If no other event happened, last event happened.\n        setOutput(float(${t-1}));\n      }\n    `}}const Li=Nr({opSnippet:"\nif (a == b) {\n  return 1.0;\n};\nreturn a / b;",packedOpSnippet:"\n  // vec4 one = vec4(equal(a, b));\n  // return one + (vec4(1.0) - one) * a / b;\n  vec4 result = a / b;\n  if(a.x == b.x) {\n    result.x = 1.;\n  }\n  if(a.y == b.y) {\n    result.y = 1.;\n  }\n  if(a.z == b.z) {\n    result.z = 1.;\n  }\n  if(a.w == b.w) {\n    result.w = 1.;\n  }\n\n  return result;\n",checkOutOfBounds:!0}),Vi={kernelName:a.RealDiv,backendName:"webgl",kernelFunc:Li},zi="return a - b;",Ui=Nr({opSnippet:zi,packedOpSnippet:zi,supportsComplex:!0,cpuKernelImpl:An}),Wi={kernelName:a.Sub,backendName:"webgl",kernelFunc:Ui};function Gi(e){const{inputs:t,backend:n,attrs:r}=e,{logits:s}=t,{dim:o}=r,i=a.util.parseAxisParam([o],s.shape),u=xi({inputs:{x:s},backend:n,attrs:{reductionIndices:i,keepDims:!1}}),l=a.backend_util.expandShapeToKeepDim(u.shape,i),c=Or({inputs:{x:u},backend:n,attrs:{shape:l}}),d=Ui({inputs:{a:s,b:c},backend:n}),p=lo({inputs:{x:d},backend:n}),h=zr({inputs:{x:p},backend:n,attrs:{axis:i,keepDims:!1}}),f=Or({inputs:{x:h},backend:n,attrs:{shape:l}}),m=Li({inputs:{a:p,b:f},backend:n});return n.disposeIntermediateTensorInfo(u),n.disposeIntermediateTensorInfo(c),n.disposeIntermediateTensorInfo(d),n.disposeIntermediateTensorInfo(p),n.disposeIntermediateTensorInfo(h),n.disposeIntermediateTensorInfo(f),m}const Hi={kernelName:a.Softmax,backendName:"webgl",kernelFunc:Gi};const qi={kernelName:a.Multinomial,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{logits:a}=t,{numSamples:s,seed:o,normalized:i}=r,u=i?a:Gi({inputs:{logits:a},backend:n,attrs:{dim:a.shape.length-1}}),l=u.shape[0],c=u.shape[1],d=new Pi(l,c,s),p=[[o]],h=n.runWebGLProgram(d,[u],"int32",p);return i||n.disposeIntermediateTensorInfo(u),h}};const Xi={kernelName:a.Neg,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{x:r}=t;if(n.shouldExecuteOnCPU([r])){const e=n.texData.get(r.dataId),[t,a]=mn(e.values,r.shape,r.dtype);return n.makeTensorInfo(a,r.dtype,t)}let s;return s=(0,a.env)().getBool("WEBGL_PACK_UNARY_OPERATIONS")?new sr(r.shape,"\n  vec4 result = -x;\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"):new Hn(r.shape,"if (isnan(x)) return x;\n  return -x;\n"),n.runWebGLProgram(s,[r],r.dtype)}},Ki=a.kernel_impls.nonMaxSuppressionV3Impl;const ji={kernelName:a.NonMaxSuppressionV3,backendName:"webgl",kernelFunc:function(e){a.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l}=r,c=n.readSync(s.dataId),d=n.readSync(o.dataId),{selectedIndices:p}=Ki(c,d,i,u,l);return n.makeTensorInfo([p.length],"int32",new Int32Array(p))}},Yi=a.kernel_impls.nonMaxSuppressionV4Impl;const Qi={kernelName:a.NonMaxSuppressionV4,backendName:"webgl",kernelFunc:function(e){a.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,padToMaxOutputSize:c}=r,d=n.readSync(s.dataId),p=n.readSync(o.dataId),{selectedIndices:h,validOutputs:f}=Yi(d,p,i,u,l,c);return[n.makeTensorInfo([h.length],"int32",new Int32Array(h)),n.makeTensorInfo([],"int32",new Int32Array([f]))]}},Zi=a.kernel_impls.nonMaxSuppressionV5Impl;const Ji={kernelName:a.NonMaxSuppressionV5,backendName:"webgl",kernelFunc:function(e){a.backend_util.warn("tf.nonMaxSuppression() in webgl locks the UI thread. Call tf.nonMaxSuppressionAsync() instead");const{inputs:t,backend:n,attrs:r}=e,{boxes:s,scores:o}=t,{maxOutputSize:i,iouThreshold:u,scoreThreshold:l,softNmsSigma:c}=r,d=n.readSync(s.dataId),p=n.readSync(o.dataId),h=i,f=u,m=l,g=c,{selectedIndices:y,selectedScores:x}=Zi(d,p,h,f,m,g);return[n.makeTensorInfo([y.length],"int32",new Int32Array(y)),n.makeTensorInfo([x.length],"float32",new Float32Array(x))]}};class eu{constructor(e,t,n,r){this.variableNames=["indices"],this.outputShape=[e,t],this.userCode=`\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int index = round(getIndices(coords.x));\n        setOutput(mix(float(${r}), float(${n}),\n                      float(index == coords.y)));\n      }\n    `}}const tu={kernelName:a.OneHot,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{indices:s}=t,{depth:o,onValue:i,offValue:u}=r,l=a.util.sizeFromShape(s.shape),c=new eu(l,o,i,u),d=Or({inputs:{x:s},backend:n,attrs:{shape:[l]}}),p=n.runWebGLProgram(c,[d],s.dtype);n.disposeIntermediateTensorInfo(d);const h=Or({inputs:{x:p},backend:n,attrs:{shape:[...s.shape,o]}});return n.disposeIntermediateTensorInfo(p),h}};function nu(e){const{inputs:t,backend:n}=e,{x:r}=t;if("complex64"===r.dtype){const e=qa({inputs:{input:r},backend:n}),t=nu({inputs:{x:e},backend:n}),a=is({inputs:{input:r},backend:n}),s=nu({inputs:{x:a},backend:n}),o=mr({inputs:{real:t,imag:s},backend:n});return n.disposeIntermediateTensorInfo(e),n.disposeIntermediateTensorInfo(t),n.disposeIntermediateTensorInfo(a),n.disposeIntermediateTensorInfo(s),o}return wo({attrs:{shape:r.shape,dtype:r.dtype,value:"string"===r.dtype?"":0},backend:n})}const ru={kernelName:a.ZerosLike,backendName:"webgl",kernelFunc:nu};const au={kernelName:a.OnesLike,backendName:"webgl",kernelFunc:function e(t){const{inputs:n,backend:r}=t,{x:a}=n;if("string"===a.dtype)throw new Error("onesLike is not supported under string dtype");if("complex64"===a.dtype){const t=qa({inputs:{input:a},backend:r}),n=e({inputs:{x:t},backend:r}),s=is({inputs:{input:a},backend:r}),o=nu({inputs:{x:s},backend:r}),i=mr({inputs:{real:n,imag:o},backend:r});return r.disposeIntermediateTensorInfo(t),r.disposeIntermediateTensorInfo(n),r.disposeIntermediateTensorInfo(s),r.disposeIntermediateTensorInfo(o),i}return wo({attrs:{shape:a.shape,dtype:a.dtype,value:1},backend:r})}};const su={kernelName:a.Pack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{axis:s}=r;if(1===t.length)return po({inputs:{input:t[0]},backend:n,attrs:{dim:s}});const o=t[0].shape,i=t[0].dtype;t.forEach((e=>{a.util.assertShapesMatch(o,e.shape,"All tensors passed to stack must have matching shapes"),a.util.assert(i===e.dtype,(()=>"All tensors passed to stack must have matching dtypes"))}));const u=[],l=cs({inputs:t.map((e=>{const t=po({inputs:{input:e},backend:n,attrs:{dim:s}});return u.push(t),t})),backend:n,attrs:{axis:s}});return u.forEach((e=>n.disposeIntermediateTensorInfo(e))),l}};class ou{constructor(e,t,n){this.variableNames=["x"],this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=he(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=["coords[0]","coords[1]","coords[2]","coords[3]"].slice(0,r);this.userCode=1!==r?`\n      ${a} start = ${a}(${s});\n      ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${a} coords = outC - start;\n          setOutput(getX(${i}));\n        }\n      }\n    `:`\n        int start = ${s};\n        int end = ${o};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `}}class iu{constructor(e,t,n){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0,this.customUniforms=[{name:"value",type:"float"}],this.outputShape=t.map(((t,n)=>t[0]+e[n]+t[1]));const r=e.length,a=he(r),s=t.map((e=>e[0])).join(","),o=t.map(((t,n)=>t[0]+e[n])).join(","),i=Pn("rc",r),u=Pn("source",r),l=`${i[r-1]} < ${this.outputShape[r-1]}`,c=1===r?"source":`vec2(${u.slice(-2).join()})`,d=[`${a} rc = outputLoc;`,`${i[r-1]} += 1;\n       if(${l}) {\n      `,1===r?"":`}\n       rc = outputLoc;\n       ${i[r-2]} += 1;\n       if(${i[r-2]} < ${this.outputShape[r-2]}) {`,1===r?"":`  ${i[r-1]} += 1;\n         if(${l}) {`],p=1===r?"rc < start || rc >= end":"any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))";let h="";for(let f=0,m=1===r?2:4;f<m;f++)h+=`\n        ${d[f]}\n        if (${p}) {\n          result[${f}] = float(value);\n        } else {\n          ${a} source = rc - start;\n          result[${f}] = getChannel(getX(${u.join()}), ${c});\n        }\n      `;h+=1===r?"} ":"}}",this.userCode=`\n      const ${a} start = ${a}(${s});\n      const ${a} end = ${a}(${o});\n\n      void main() {\n        ${a} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${h}\n        setOutput(result);\n      }\n    `}}const uu=e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{paddings:o,constantValue:i}=r;if(0===a.util.sizeFromShape(s.shape)){return wo({backend:n,attrs:{shape:o.map(((e,t)=>e[0]+s.shape[t]+e[1])),value:i,dtype:s.dtype}})}const u=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new iu(s.shape,o,i):new ou(s.shape,o,i),l=[[i]];return n.runWebGLProgram(u,[s],s.dtype,l)},lu={kernelName:a.PadV2,backendName:"webgl",kernelFunc:uu},cu=Nr({opSnippet:"\n  if(a < 0.0 && floor(b) < b){\n    return NAN;\n  }\n  if (b == 0.0) {\n    return 1.0;\n  }\n  return (round(mod(b, 2.0)) != 1) ?\n      pow(abs(a), b) : sign(a) * pow(abs(a), b);\n",packedOpSnippet:"\n  // isModRound1 has 1 for components with round(mod(b, 2.0)) == 1, 0 otherwise.\n  vec4 isModRound1 = vec4(equal(round(mod(b, 2.0)), ivec4(1)));\n  vec4 multiplier = sign(a) * isModRound1 + (vec4(1.0) - isModRound1);\n  vec4 result = multiplier * pow(abs(a), b);\n\n  // Ensure that a^0 = 1, including 0^0 = 1 as this correspond to TF and JS\n  bvec4 isExpZero = equal(b, vec4(0.0));\n  result.r = isExpZero.r ? 1.0 : result.r;\n  result.g = isExpZero.g ? 1.0 : result.g;\n  result.b = isExpZero.b ? 1.0 : result.b;\n  result.a = isExpZero.a ? 1.0 : result.a;\n\n  vec4 isNaN = vec4(lessThan(a, vec4(0.0))) * vec4(lessThan(floor(b), b));\n  \n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n\n  return result;\n"}),du={kernelName:a.Pow,backendName:"webgl",kernelFunc:cu};const pu={kernelName:a.Prod,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{axis:o,keepDims:i}=r,u=s.shape.length,l=[],c=a.util.parseAxisParam(o,s.shape);let d=c;const p=a.backend_util.getAxesPermutation(d,u);let h,f=s;if(null!=p&&(f=Wr({inputs:{x:s},backend:n,attrs:{perm:p}}),d=a.backend_util.getInnerMostAxes(d.length,u),l.push(f)),a.backend_util.assertAxesAreInnerMostDims("prod",d,u),n.shouldExecuteOnCPU([f])){const e=n.texData.get(f.dataId).values,{outVals:t,outShape:r,outDtype:a}=yn(f.shape,f.dtype,e,d);h=n.makeTensorInfo(r,a,t)}else{const[e,t]=a.backend_util.computeOutAndReduceShapes(f.shape,d),r=a.util.sizeFromShape(t),o=Or({inputs:{x:f},backend:n,attrs:{shape:[-1,r]}}),i=Mr(o,(0,a.sumOutType)(s.dtype),"prod",n);h=Or({inputs:{x:i},backend:n,attrs:{shape:e}}),l.push(o),l.push(i)}if(i){l.push(h);const e=a.backend_util.expandShapeToKeepDim(h.shape,c);h=Or({inputs:{x:h},backend:n,attrs:{shape:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),h}},hu=e=>{const{backend:t,attrs:n}=e,{start:r,stop:a,step:s,dtype:o}=n,i=xn(r,a,s,o);return t.makeTensorInfo([i.length],o,i)},fu={kernelName:a.Range,backendName:"webgl",kernelFunc:hu},mu=Sr({opSnippet:"return 1.0 / x;"}),gu={kernelName:a.Reciprocal,backendName:"webgl",kernelFunc:mu},yu=Sr({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : x;\n",packedOpSnippet:"\n  vec4 result = x * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),xu={kernelName:a.Relu,backendName:"webgl",kernelFunc:yu},bu=Sr({opSnippet:"if (isnan(x)) return x;\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n",packedOpSnippet:"\n  vec4 result = min(x, vec4(6.)) * vec4(greaterThanEqual(x, vec4(0.0)));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n"}),vu={kernelName:a.Relu6,backendName:"webgl",kernelFunc:bu};class wu{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let d;d=a?"(vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC - vec2(0.5)":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec2 sourceFloorRC = ivec2(max(sourceFracIndexRC, vec2(0.0)));\n        ivec2 sourceCeilRC = ivec2(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        float topLeft = getA(b, sourceFloorRC.x, sourceFloorRC.y, d);\n        float bottomLeft = getA(b, sourceCeilRC.x, sourceFloorRC.y, d);\n        float topRight = getA(b, sourceFloorRC.x, sourceCeilRC.y, d);\n        float bottomRight = getA(b, sourceCeilRC.x, sourceCeilRC.y, d);\n\n        vec2 fracRC = sourceFracIndexRC - vec2(sourceFloorRC);\n\n        float top = topLeft + (topRight - topLeft) * fracRC.y;\n        float bottom = bottomLeft + (bottomRight - bottomLeft) * fracRC.y;\n        float newValue = top + (bottom - top) * fracRC.x;\n\n        setOutput(newValue);\n      }\n    `}}class ku{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n];let d;d=a?"(vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC - vec3(0.5)":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${d};\n\n        // Compute the four integer indices.\n        ivec3 sourceFloorRC = ivec3(max(sourceFracIndexRC, vec3(0.0)));\n        ivec3 sourceCeilRC = ivec3(\n          min(inputShapeRC - 1.0, ceil(sourceFracIndexRC)));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        // In parallel, construct four corners for all four components in\n        // packed 2x2 cell.\n        vec4 topLeft = vec4(\n          getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 bottomLeft = vec4(\n          getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceFloorRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceFloorRC.z, d + 1) : 0.0);\n\n        vec4 topRight = vec4(\n          getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceFloorRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceFloorRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec4 bottomRight = vec4(\n          getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d),\n          hasNextCol ? getAValue(b, sourceCeilRC.x, sourceCeilRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceCeilRC.x, sourceCeilRC.z, d + 1) : 0.0);\n\n        vec3 fracRC = sourceFracIndexRC - vec3(sourceFloorRC);\n\n        vec4 top = mix(topLeft, topRight, fracRC.yyzz);\n        vec4 bottom = mix(bottomLeft, bottomRight, fracRC.yyzz);\n        vec4 newValue = mix(top, bottom, fracRC.x);\n\n        setOutput(newValue);\n      }\n    `}}const Su={kernelName:a.ResizeBilinear,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:o,halfPixelCenters:i,size:u}=r,[l,c]=u,d=(0,a.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new ku(s.shape,l,c,o,i):new wu(s.shape,l,c,o,i);return n.runWebGLProgram(d,[s],"float32")}};class Nu{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(startRLerp - float(winHeight / 2));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(startCLerp - float(winWidth / 2));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float dxR = float(dyR) * heightScale;\n            int topDxRIndex = int(floor(dxR));\n            int bottomDxRIndex = int(min(ceil(dxR), ${r-1}.0));\n            float dxRLerp = dxR - float(topDxRIndex);\n            float inverseDxRLerp = 1.0 - dxRLerp;\n\n            float dxC = float(dyC) * widthScale;\n            int leftDxCIndex = int(floor(dxC));\n            int rightDxCIndex = int(min(ceil(dxC), ${a-1}.0));\n            float dxCLerp = dxC - float(leftDxCIndex);\n            float inverseDxCLerp = 1.0 - dxCLerp;\n\n            if (r == topDxRIndex && c == leftDxCIndex) {\n              // topLeft\n              accumulator +=\n                getDy(b, dyR, dyC, d) * inverseDxRLerp * inverseDxCLerp;\n            }\n\n            if (r == topDxRIndex && c == rightDxCIndex) {\n              // topRight\n              accumulator += getDy(b, dyR, dyC, d) * inverseDxRLerp * dxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == leftDxCIndex) {\n              // bottomLeft\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * inverseDxCLerp;\n            }\n\n            if (r == bottomDxRIndex && c == rightDxCIndex) {\n              // bottomRight\n              accumulator += getDy(b, dyR, dyC, d) * dxRLerp * dxCLerp;\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const Tu={kernelName:a.ResizeBilinearGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new Nu(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class Iu{constructor(e,t,n,r,a){this.variableNames=["A"],this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],d=r?"0.5":"0.0";let p;p=a?"max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC, vec2(0.0))":"vec2(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]});\n      const vec2 inputShapeRC = vec2(${o}.0, ${i}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `}}class $u{constructor(e,t,n,r,a){this.variableNames=["A"],this.packedInputs=!0,this.packedOutput=!0,this.outputShape=[];const[s,o,i,u]=e;this.outputShape=[s,t,n,u];const l=[r&&t>1?o-1:o,r&&n>1?i-1:i],c=[r&&t>1?t-1:t,r&&n>1?n-1:n],d=r?"0.5":"0.0";let p;p=a?"max((vec3(yRC) + vec3(0.5)) * effectiveInputOverOutputRatioRC, vec3(0.0))":"vec3(yRC) * effectiveInputOverOutputRatioRC",this.userCode=`\n      const vec3 effectiveInputOverOutputRatioRC = vec3(\n          ${l[0]/c[0]},\n          ${l[1]/c[1]},\n          ${l[1]/c[1]});\n      const vec3 inputShapeRC = vec3(${o}.0, ${i}.0,\n                                     ${i}.0);\n\n      float getAValue(int b, int r, int c, int d) {\n        return getChannel(getA(b, r, c, d), vec2(c, d));\n      }\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        // Calculate values for next column in yRC.z.\n        ivec3 yRC = coords.yzz + ivec3(0, 0, 1);\n\n        // Fractional source index.\n        vec3 sourceFracIndexRC = ${p};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec3 sourceNearestRC = ivec3(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${d})));\n\n        // Should we calculate next column and row elements in 2x2 packed cell.\n        bool hasNextCol = d < ${u-1};\n        bool hasNextRow = coords.z < ${n-1};\n\n        vec4 newValue = vec4(\n          getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d),\n          hasNextCol ? getAValue(b, sourceNearestRC.x, sourceNearestRC.y, d + 1)\n                     : 0.0,\n          hasNextRow ? getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d)\n                     : 0.0,\n          (hasNextRow && hasNextCol) ?\n            getAValue(b, sourceNearestRC.x, sourceNearestRC.z, d + 1) : 0.0);\n\n        setOutput(newValue);\n      }\n    `}}const Cu={kernelName:a.ResizeNearestNeighbor,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:s}=t,{alignCorners:o,halfPixelCenters:i,size:u}=r,[l,c]=u,d=(0,a.env)().getBool("WEBGL_PACK_IMAGE_OPERATIONS")?new $u(s.shape,l,c,o,i):new Iu(s.shape,l,c,o,i);return n.runWebGLProgram(d,[s],s.dtype)}};class Eu{constructor(e,t,n){this.variableNames=["dy"],this.outputShape=[],this.outputShape=t;const[,r,a]=t,[,s,o]=e,i=[n&&s>1?r-1:r,n&&o>1?a-1:a],u=[n&&s>1?s-1:s,n&&o>1?o-1:o],l=i[0]/u[0],c=i[1]/u[1],d=1/l,p=1/c,h=2*Math.ceil(d)+2,f=2*Math.ceil(p)+2;this.userCode=`\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        int r = coords[1];\n        int c = coords[2];\n\n        float accumulator = 0.0;\n\n        const float heightScale = float(${l});\n        const float widthScale = float(${c});\n\n        const float invHeightScale = float(${d});\n        const float invWidthScale = float(${p});\n\n        const int winHeight = int(${h});\n        const int winWidth = int(${f});\n\n        // Compute bounds for where in dy we will look\n        float startRLerp = floor(float(r) * invHeightScale);\n        int startDyR = int(floor(startRLerp - float(winHeight / 2)));\n\n        float startCLerp = floor(float(c) * invWidthScale);\n        int startDyC = int(floor(startCLerp - float(winWidth / 2)));\n\n        // Loop over dy\n        for (int dyROffset = 0; dyROffset < winHeight; dyROffset++) {\n          int dyR = dyROffset + startDyR;\n\n          // Guard against the window exceeding the bounds of dy\n          if (dyR < 0 || dyR >= ${s}) {\n            continue;\n          }\n\n          for (int dyCOffset = 0; dyCOffset < winWidth; dyCOffset++) {\n            int dyC = dyCOffset + startDyC;\n\n            // Guard against the window exceeding the bounds of dy\n            if (dyC < 0 || dyC >= ${o}) {\n              continue;\n            }\n\n            float sourceFracRow =\n              float(${i[0]}) *\n                (float(dyR) / float(${u[0]}));\n\n            float sourceFracCol =\n                float(${i[1]}) *\n                  (float(dyC) / float(${u[1]}));\n\n            int sourceNearestRow = int(min(\n                float(int(${r}) - 1),\n                ${n} ? float(round(sourceFracRow)) :\n                                  float(floor(sourceFracRow))));\n\n            int sourceNearestCol = int(min(\n                float(int(${a}) - 1),\n                ${n} ? float(round(sourceFracCol)) :\n                                  float(floor(sourceFracCol))));\n\n            if (r == sourceNearestRow && c == sourceNearestCol) {\n              accumulator += getDy(b, dyR, dyC, d);\n            }\n          }\n        }\n        // End loop over dy\n\n        setOutput(accumulator);\n      }\n    `}}const _u={kernelName:a.ResizeNearestNeighborGrad,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{images:a,dy:s}=t,{alignCorners:o}=r,i=new Eu(s.shape,a.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}};class Ru{constructor(e,t){this.variableNames=["x"];const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);if(this.outputShape=e,1===n)return void(this.userCode=`\n        void main() {\n          int coord = getOutputCoords();\n          setOutput(getX(${e[0]} - coord - 1));\n        }\n      `);const r=e.map(((n,r)=>(n=>-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - coords[${n}] - 1`:`coords[${n}]`)(r))).join(","),a=he(n);this.userCode=`\n      void main() {\n        ${a} coords = getOutputCoords();\n        setOutput(getX(${r}));\n      }\n    `}}class Au{constructor(e,t){this.variableNames=["x"],this.packedInputs=!0,this.packedOutput=!0;const n=e.length;if(n>4)throw new Error(`WebGL backend: Reverse of rank-${n} tensor is not yet supported`);this.outputShape=e;const r=Pn("rc",n),a=`${r[n-1]} + 1 < ${this.outputShape[n-1]}`,s=`${r[n-2]} + 1 < ${this.outputShape[n-2]}`,o=he(n);function i(n){const r=e.map(((r,a)=>function(n,r){return-1!==t.indexOf(n)&&1!==e[n]?`${e[n]} - ${r[n]} - 1`:`${r[n]}`}(a,n)));return`getChannel(getX(${r.join(",")}), vec2(${r.slice(-2).join(",")}))`}this.userCode=1===n?`\n        void main(){\n          int rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = getChannel(getX(${e[0]} - rc - 1),\n            ${e[0]} - rc - 1);\n          if(${a}){\n              result.g = getChannel(getX(${e[0]} - (rc  + 1) - 1),\n                ${e[0]} - (rc  + 1) - 1);\n          }\n          setOutput(result);\n        }\n      `:`\n        void main() {\n          ${o} rc = getOutputCoords();\n          vec4 result = vec4(0.);\n          result.r = ${function(e){return i(e)}(r.slice())};\n          if(${a}){\n            result.g = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",i(e)}(r.slice())};\n          }\n          if(${s}) {\n            result.b = ${function(e){return e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            if(${a}) {\n              result.a = ${function(e){return e[n-1]="("+e[n-1]+" + 1)",e[n-2]="("+e[n-2]+" + 1)",i(e)}(r.slice())};\n            }\n          }\n          setOutput(result);\n        }\n    `}}const Ou={kernelName:a.Reverse,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{dims:o}=r,i=s.shape.length,u=a.util.parseAxisParam(o,s.shape);if(0===i)return hr({inputs:{x:s},backend:n});const l=(0,a.env)().getBool("WEBGL_PACK_ARRAY_OPERATIONS")?new Au(s.shape,u):new Ru(s.shape,u);return n.runWebGLProgram(l,[s],s.dtype)}};class Du{constructor(e,t){this.variableNames=["Image"],this.outputShape=[],this.customUniforms=[{name:"params",type:"vec4"}];const n=e[1],r=e[2];this.outputShape=e;let a="";a="number"===typeof t?`float outputValue = ${t.toFixed(2)};`:`\n        vec3 fill = vec3(${t.join(",")});\n        float outputValue = fill[coords[3]];`,this.userCode=`\n        void main() {\n          ivec4 coords = getOutputCoords();\n          int x = coords[2];\n          int y = coords[1];\n          float coordXFloat = (float(x) - params[0]) * params[3] -\n            (float(y) - params[1]) * params[2];\n          float coordYFloat = (float(x) - params[0]) * params[2] +\n            (float(y) - params[1]) * params[3];\n          int coordX = int(round(coordXFloat + params[0]));\n          int coordY = int(round(coordYFloat + params[1]));\n          ${a}\n          if(coordX >= 0 && coordX < ${r} && coordY >= 0 && coordY < ${n}) {\n            outputValue = getImage(coords[0], coordY, coordX, coords[3]);\n          }\n          setOutput(outputValue);\n        }\n    `}}const Fu={kernelName:a.RotateWithOffset,backendName:"webgl",kernelFunc:e=>{let{inputs:t,attrs:n,backend:r}=e;const{image:s}=t,{radians:o,fillValue:i,center:u}=n,l=r,c=new Du(s.shape,i),[d,p]=a.backend_util.getImageCenter(u,s.shape[1],s.shape[2]),h=[[d,p,Math.sin(o),Math.cos(o)]];return l.runWebGLProgram(c,[s],s.dtype,h)}},Bu=Sr({opSnippet:"\n  // OpenGL ES does not support round function.\n  // The algorithm is based on banker's rounding.\n  float base = floor(x);\n  if ((x - base) < 0.5) {\n    return floor(x);\n  } else if ((x - base) > 0.5) {\n    return ceil(x);\n  } else {\n    if (mod(base, 2.0) == 0.0) {\n      return base;\n    } else {\n      return base + 1.0;\n    }\n  }\n"}),Mu={kernelName:a.Round,backendName:"webgl",kernelFunc:Bu},Pu=Sr({opSnippet:"return inversesqrt(x);",cpuKernelImpl:bn}),Lu={kernelName:a.Rsqrt,backendName:"webgl",kernelFunc:Pu};class Vu{constructor(e,t,n,r,a,s){this.variableNames=["updates","indices","defaultValue"],this.outputShape=s;const o=he(a.length),i=he(s.length);let u="";1===n?u="i":2===n&&(u="i, j");const l=`getIndices(${u})`;let c="";1===r?c="i":2===r&&(c="i, coords[1]");const d=`getUpdates(${c})`,p=t>1?"strides[j]":"strides";this.userCode=`\n        ${o} strides = ${o}(${a});\n\n        void main() {\n          ${i} coords = getOutputCoords();\n          float sum = 0.0;\n          bool found = false;\n          for (int i = 0; i < ${e}; i++) {\n            int flattenedIndex = 0;\n            for (int j = 0; j < ${t}; j++) {\n              int index = round(${l});\n              flattenedIndex += index * ${p};\n            }\n            if (flattenedIndex == coords[0]) {\n              sum += ${d};\n              found = true;\n            }\n          }\n          setOutput(mix(getDefaultValue(), sum, float(found)));\n        }\n      `}}const zu={kernelName:a.ScatterNd,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{indices:s,updates:o}=t,{shape:i}=r,{sliceRank:u,numUpdates:l,sliceSize:c,strides:d,outputSize:p}=a.backend_util.calculateShapes(o,s,i),h=[p/c,c];if(0===p)return n.makeTensorInfo(i,s.dtype);const f=Or({inputs:{x:s},backend:n,attrs:{shape:[l,u]}}),m=Or({inputs:{x:o},backend:n,attrs:{shape:[l,c]}}),g=n.makeTensorInfo([],"float32",new Float32Array([0])),y=new Vu(l,u,f.shape.length,m.shape.length,d,h),x=n.runWebGLProgram(y,[m,f,g],m.dtype),b=Or({inputs:{x:x},backend:n,attrs:{shape:i}});return n.disposeIntermediateTensorInfo(f),n.disposeIntermediateTensorInfo(m),n.disposeIntermediateTensorInfo(x),n.disposeIntermediateTensorInfo(g),b}};class Uu{constructor(e,t,n,r){this.variableNames=["sortedSequence","values"],this.customUniforms=[{name:"numInputs",type:"int"}],this.outputShape=[e,n];const s=`for (int i = 0; i < ${Math.ceil(Math.log2(t+1))}; ++i) { if (left >= right) break;`,o=2===(0,a.env)().getNumber("WEBGL_VERSION")?"while (left < right) {":s,i="left"===r?"<":"<=";this.userCode=`\n       int findBound(int batch, float value) {\n         int left = 0;\n         int right = numInputs;\n         int mid;\n         ${o}\n           mid = (left + right) / 2;\n           if (getSortedSequence(batch, mid) ${i} value) {\n             left = mid + 1;\n           } else {\n             right = mid;\n           }\n         }\n         return right;\n       }\n\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int valueIndex = coords[1];\n\n         float value = getValues(batch, valueIndex);\n\n         setOutput(float(findBound(batch, value)));\n       }\n     `}}const Wu={kernelName:a.SearchSorted,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sortedSequence:a,values:s}=t,{side:o}=r,i=new Uu(a.shape[0],a.shape[1],s.shape[1],o),u=[[a.shape[1]]];return n.runWebGLProgram(i,[a,s],"int32",u)}};class Gu{constructor(e,t,n){let r,a;if(this.variableNames=["c","a","b"],this.outputShape=t,n>4)throw Error(`Where for rank ${n} is not yet supported`);if(1===n)a="resRC",r="resRC";else{const n=["resRC.x","resRC.y","resRC.z","resRC.w"],s=[],o=[];for(let r=0;r<t.length;r++)o.push(`${n[r]}`),r<e&&s.push(`${n[r]}`);r=s.join(),a=o.join()}const s=he(n);this.userCode=`\n      void main() {\n        ${s} resRC = getOutputCoords();\n        float cVal = getC(${r});\n        if (cVal >= 1.0) {\n          setOutput(getA(${a}));\n        } else {\n          setOutput(getB(${a}));\n        }\n      }\n    `}}const Hu={kernelName:a.Select,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{condition:r,t:s,e:o}=t,i=new Gu(r.shape.length,s.shape,s.shape.length);return n.runWebGLProgram(i,[r,s,o],(0,a.upcastType)(s.dtype,o.dtype))}},qu=Sr({opSnippet:`\n  // Stable and Attracting Fixed Point (0, 1) for Normalized Weights.\n  // see: https://arxiv.org/abs/1706.02515\n  float scaleAlpha = ${a.backend_util.SELU_SCALEALPHA};\n  float scale = ${a.backend_util.SELU_SCALE};\n  return (x >= 0.0) ? scale * x : scaleAlpha * (exp(x) - 1.0);\n`}),Xu={kernelName:a.Selu,backendName:"webgl",kernelFunc:qu},Ku=Sr({opSnippet:"if (isnan(x)) return x;\n  return 1.0 / (1.0 + exp(-1.0 * x));\n",packedOpSnippet:"\n  vec4 result = 1.0 / (1.0 + exp(-1.0 * x));\n  bvec4 isNaN = isnan(x);\n\n  result.r = isNaN.r ? x.r : result.r;\n  result.g = isNaN.g ? x.g : result.g;\n  result.b = isNaN.b ? x.b : result.b;\n  result.a = isNaN.a ? x.a : result.a;\n\n  return result;\n",cpuKernelImpl:wn}),ju={kernelName:a.Sigmoid,backendName:"webgl",kernelFunc:Ku},Yu=Sr({opSnippet:"\n  if (isnan(x)) { return 0.0; }\n  return sign(x);\n"}),Qu={kernelName:a.Sign,backendName:"webgl",kernelFunc:Yu},Zu=Sr({opSnippet:"if (isnan(x)) return x;\n  return sin(x);\n"}),Ju={kernelName:a.Sin,backendName:"webgl",kernelFunc:Zu},el=Sr({opSnippet:"\n  float e2x = exp(x);\n  return (e2x - 1.0 / e2x) / 2.0;\n"}),tl={kernelName:a.Sinh,backendName:"webgl",kernelFunc:el},nl=Sr({opSnippet:"\n  float epsilon = 1.1920928955078125e-7;\n  float threshold = log(epsilon) + 2.0;\n\n  bool too_large = x > -threshold;\n  bool too_small = x < threshold;\n\n  float result;\n  float exp_x = exp(x);\n\n  if (too_large){\n    result = x;\n  }\n  else if (too_small){\n    result = exp_x;\n  }\n  else{\n    result = log(exp_x + 1.0);\n  }\n  return result;\n"}),rl={kernelName:a.Softplus,backendName:"webgl",kernelFunc:nl},al={kernelName:a.SpaceToBatchND,backendName:"webgl",kernelFunc:e=>{const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{blockShape:o,paddings:i}=r;a.util.assert(s.shape.length<=4,(()=>"spaceToBatchND for rank > 4 with a WebGL backend not implemented yet"));const u=o.reduce(((e,t)=>e*t)),l=[[0,0]];l.push(...i);for(let a=1+o.length;a<s.shape.length;++a)l.push([0,0]);const c=[],d=uu({inputs:{x:s},backend:n,attrs:{paddings:l,constantValue:0}}),p=a.backend_util.getReshaped(d.shape,o,u,!1),h=a.backend_util.getPermuted(p.length,o.length,!1),f=a.backend_util.getReshapedPermuted(d.shape,o,u,!1),m=Or({inputs:{x:d},backend:n,attrs:{shape:p}}),g=Wr({inputs:{x:m},backend:n,attrs:{perm:h}}),y=Or({inputs:{x:g},backend:n,attrs:{shape:f}});return c.push(d),c.push(m),c.push(g),c.forEach((e=>n.disposeIntermediateTensorInfo(e))),y}};const sl={kernelName:a.SparseFillEmptyRows,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{indices:r,values:a,denseShape:s,defaultValue:o}=t;if(1!==s.shape.length)throw new Error(`Dense shape must be a vector, saw:\n         ${s.shape}`);if(2!==r.shape.length)throw new Error(`Indices must be a matrix, saw:\n         ${r.shape}`);if(1!==a.shape.length)throw new Error(`Values must be a vector, saw:\n         ${a.shape}`);if(0!==o.shape.length)throw new Error(`Default value must be a scalar, saw:\n        ${o.shape}`);const i=n.readSync(r.dataId),u=n.readSync(a.dataId),l=n.readSync(s.dataId),c=n.readSync(o.dataId)[0],[d,p,h,f,m]=Nn(i,r.shape,r.dtype,u,a.dtype,l,c);return[n.makeTensorInfo(p,r.dtype,d),n.makeTensorInfo([p[0]],a.dtype,h),n.makeTensorInfo([f.length],"bool",new Uint8Array(f.map((e=>Number(e))))),n.makeTensorInfo([m.length],r.dtype,new Int32Array(m))]}};const ol={kernelName:a.SparseReshape,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{inputIndices:r,inputShape:a,newShape:s}=t;if(2!==r.shape.length)throw new Error(`Input indices should be a matrix but received shape ${r.shape}`);if(1!==a.shape.length)throw new Error(`Input shape should be a vector but received shape ${a.shape}`);if(1!==s.shape.length)throw new Error(`Target shape should be a vector but received shape ${s.shape}`);const o=Array.from(n.readSync(a.dataId)),i=n.readSync(r.dataId),u=Array.from(n.readSync(s.dataId)),[l,c,d]=Tn(i,r.shape,r.dtype,o,u);return[n.makeTensorInfo(c,r.dtype,l),n.makeTensorInfo([d.length],s.dtype,new Int32Array(d))]}};const il={kernelName:a.SparseSegmentMean,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n              ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n              ${s.shape}`);const o=n.readSync(r.dataId),i=n.readSync(a.dataId),u=n.readSync(s.dataId),[l,c]=In(o,r.shape,r.dtype,i,u,!0);return n.makeTensorInfo(c,r.dtype,l)}};const ul={kernelName:a.SparseSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n}=e,{data:r,indices:a,segmentIds:s}=t;if(r.shape.length<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.shape.length)throw new Error(`Indices should be a vector but received shape\n             ${a.shape}`);if(1!==s.shape.length)throw new Error(`Segment ids should be a vector but received shape\n             ${s.shape}`);const o=n.readSync(r.dataId),i=n.readSync(a.dataId),u=n.readSync(s.dataId),[l,c]=In(o,r.shape,r.dtype,i,u);return n.makeTensorInfo(c,r.dtype,l)}};const ll={kernelName:a.SparseToDense,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{sparseIndices:s,sparseValues:o,defaultValue:i}=t,{outputShape:u}=r,{sliceRank:l,numUpdates:c,sliceSize:d,strides:p,outputSize:h}=a.backend_util.calculateShapes(o,s,u);if("string"===o.dtype){const e=n.bufferSync(s),t=n.bufferSync(o),r=a.util.decodeString(n.readSync(i.dataId)[0]),f=vn(e,t,u,h,d,c,l,p,r,false);return n.makeTensorInfo(u,f.dtype,f.values)}const f=new Vu(c,l,s.shape.length,o.shape.length,p,[h,1],false),m=n.runWebGLProgram(f,[o,s,i],o.dtype),g=Or({inputs:{x:m},backend:n,attrs:{shape:u}});return n.disposeIntermediateTensorInfo(m),g}};const cl={kernelName:a.SplitV,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{numOrSizeSplits:o,axis:i}=r,u=a.util.parseAxisParam(i,s.shape)[0],l=a.backend_util.prepareSplitSize(s,o,u),c=s.shape.length,d=new Array(c).fill(0),p=s.shape.slice();return l.map((e=>{const t=[...p];t[u]=e;const r=La({inputs:{x:s},backend:n,attrs:{begin:d,size:t}});return d[u]+=e,r}))}},dl="return sqrt(x);",pl=Sr({opSnippet:dl,packedOpSnippet:dl,cpuKernelImpl:$n}),hl={kernelName:a.Sqrt,backendName:"webgl",kernelFunc:pl},fl=Sr({opSnippet:"return x * x;"}),ml={kernelName:a.Square,backendName:"webgl",kernelFunc:fl},gl="return (a - b) * (a - b);",yl=Nr({opSnippet:gl,packedOpSnippet:gl}),xl={kernelName:a.SquaredDifference,backendName:"webgl",kernelFunc:yl};const bl={kernelName:a.Step,backendName:"webgl",kernelFunc:function(e){let{inputs:t,attrs:n,backend:r}=e;const{x:a}=t,s=`if (isnan(x)) return x;\n    return x > 0.0 ? 1.0 : float(${n.alpha});\n  `,o=new Hn(a.shape,s);return r.runWebGLProgram(o,[a],a.dtype)}};class vl{constructor(e,t,n){this.variableNames=["x"],this.outputShape=n;const r=n.length,a=he(n.length),s=he(n.length);let o="";if(1===r)o="coords * strides + begin";else{let e=0;o=n.map(((t,r)=>(e++,1===n.length?`coords * strides[${r}] + begin[${r}]`:`coords[${e-1}] * strides[${r}] + begin[${r}]`))).join(",")}this.userCode=`\n      ${a} begin = ${a}(${e});\n      ${a} strides = ${a}(${t});\n\n      void main() {\n        ${s} coords = getOutputCoords();\n        setOutput(getX(${o}));\n      }\n    `}}const wl={kernelName:a.StridedSlice,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{begin:o,end:i,strides:u,beginMask:l,endMask:c,ellipsisMask:d,newAxisMask:p,shrinkAxisMask:h}=r,{finalShapeSparse:f,finalShape:m,isIdentity:g,sliceDim0:y,isSimpleSlice:x,begin:b,end:v,strides:w}=a.slice_util.sliceInfo(s.shape,o,i,u,l,c,d,p,h);let k;if(g)k=Or({inputs:{x:s},backend:n,attrs:{shape:m}});else if(y||x){a.util.assert(s.shape.length>=1,(()=>`Input must have rank at least 1, got: ${s.shape.length}`));const e=a.slice_util.computeOutShape(b,v,w),t=La({inputs:{x:s},backend:n,attrs:{begin:b,size:e}});k=Or({inputs:{x:t},backend:n,attrs:{shape:m}}),n.disposeIntermediateTensorInfo(t)}else{if(n.shouldExecuteOnCPU([s])){const e=n.readSync(s.dataId),t=(0,a.buffer)(s.shape,s.dtype,e),r=Cn(f,t,w,b);k=n.makeTensorInfo(m,s.dtype,r.values)}else{const e=new vl(b,w,f);k=n.runWebGLProgram(e,[s],s.dtype)}}const S=Or({inputs:{x:k},backend:n,attrs:{shape:m}});return n.disposeIntermediateTensorInfo(k),S}};const kl={kernelName:a.StringNGrams,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{separator:a,nGramWidths:s,leftPad:o,rightPad:i,padWidth:u,preserveShortSequences:l}=r,{data:c,dataSplits:d}=t,p=n.readSync(c.dataId),h=n.readSync(d.dataId),[f,m]=En(p,h,a,s,o,i,u,l);return[n.makeTensorInfo([f.length],"string",f),n.makeTensorInfo(d.shape,"int32",m)]}};const Sl={kernelName:a.StringSplit,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{skipEmpty:a}=r,{input:s,delimiter:o}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(1!==s.shape.length)throw new Error(`Input must be a vector, got shape: ${s.shape}`);if(0!==o.shape.length)throw new Error(`Delimiter must be a scalar, got shape: ${o.shape}`);const i=n.readSync(s.dataId),u=n.readSync(o.dataId)[0],[l,c,d]=_n(i,u,a),p=c.length;return[n.makeTensorInfo([p,2],"int32",l),n.makeTensorInfo([p],"string",c),n.makeTensorInfo([2],"int32",new Int32Array(d))]}};const Nl={kernelName:a.StringToHashBucketFast,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{numBuckets:a}=r,{input:s}=t;if("string"!==s.dtype)throw new Error("Input must be of datatype string");if(a<=0)throw new Error("Number of buckets must be at least 1");const o=n.readSync(s.dataId),i=Rn(o,a);return n.makeTensorInfo(s.shape,"int32",i)}},Tl=Sr({opSnippet:"return tan(x);"}),Il={kernelName:a.Tan,backendName:"webgl",kernelFunc:Tl},$l=Sr({opSnippet:"\n  float e2x = exp(-2.0 * abs(x));\n  return sign(x) * (1.0 - e2x) / (1.0 + e2x);\n"}),Cl={kernelName:a.Tanh,backendName:"webgl",kernelFunc:$l};class El{constructor(e,t){this.variableNames=["A"];const n=new Array(e.length);for(let s=0;s<n.length;s++)n[s]=e[s]*t[s];this.outputShape=n,this.rank=n.length;const r=he(this.rank),a=function(e){const t=e.length;if(t>5)throw Error(`Tile for rank ${t} is not yet supported`);if(1===t)return`imod(resRC, ${e[0]})`;const n=["resRC.x","resRC.y","resRC.z","resRC.w","resRC.u"],r=[];for(let a=0;a<e.length;a++)r.push(`imod(${n[a]}, ${e[a]})`);return r.join()}(e);this.userCode=`\n      void main() {\n        ${r} resRC = getOutputCoords();\n        setOutput(getA(${a}));\n      }\n    `}}function _l(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{reps:o}=r;if("string"===s.dtype||s.shape.length>5){const e=n.readSync(s.dataId),t="string"===s.dtype?e.map((e=>a.util.decodeString(e))):e,r=(0,a.buffer)(s.shape,s.dtype,t),i=On(r,o);return n.makeTensorInfo(i.shape,i.dtype,i.values)}const i=new El(s.shape,o);return n.runWebGLProgram(i,[s],s.dtype)}const Rl={kernelName:a.Tile,backendName:"webgl",kernelFunc:_l};class Al{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"negativeInf",type:"float"},{name:"dir",type:"int"},{name:"inc",type:"int"}],this.outputShape=e,this.userCode="\n       void main() {\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // We compare elements pair-wise within a group of size 2 * inc.\n         // The comparing rule for each group alternates between ascending\n         // and descending. Within each group, we compare each pair at\n         // positions i and i+inc. To decide whether an element at position i\n         // is x0 or x1, we mod it by 2 * inc, if the result is smaller than\n         // inc, it is in the first half of the group, we denote it as x0,\n         // otherwise we denote it as x1.\n         // For example, as shown in the Bitonic top K paper referenced above,\n         // Figure5(a) shows that element[1] is in the\n         // second half of the group when group size is 2, but it is in the\n         // first half of the group when group size is 4.\n\n         bool isFirstInPair = imod(elemIdx, 2 * inc) < inc;\n         int i = isFirstInPair ? elemIdx : elemIdx - inc;\n\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + inc : int(getIndices(batch, i + inc));\n         float x0 = i0 < n ? getX(batch, i0) : negativeInf;\n         float x1 = i1 < n ? getX(batch, i1) : negativeInf;\n\n         // Denotes which direction indices are in (ascending or descending).\n         bool reverse = imod(elemIdx, 2 * dir) >= dir;\n         bool isGreater = x0 > x1 || (x0 == x1 && i1 > i0);\n         if (reverse == isGreater) { // Elements in opposite order of direction\n           int iTemp = i0;\n           i0 = i1;\n           i1 = iTemp;\n         }\n         if (isFirstInPair) {\n            setOutput(float(i0));\n         } else {\n            setOutput(float(i1));\n         }\n       }\n     "}}class Ol{constructor(e){this.variableNames=["x","indices"],this.customUniforms=[{name:"n",type:"int"},{name:"firstPass",type:"int"},{name:"k",type:"int"}],this.outputShape=e,this.userCode="\n    void main() {\n         // Takes max of indices (0, k), (1, k + 1), (2, k + 2) ...\n         ivec2 coords = getOutputCoords();\n         int batch = coords[0];\n         int elemIdx = coords[1];\n\n         // The output size is half of the previous size.\n         // If the previous sequence is | | | | _ _ _ _  | | | |  _ _ _ _ (k=4),\n         // we only need to output the indices at positions |, the indices at\n         // positions _ can be thrown away, see Figure5(b) After Phase 2\n         // (Merge phase) in the Bitonic Top K paper referenced above.\n         // For example, the paper shows we only need to output the orange bars.\n         // The output sequence should look like this | | | | | | | |.\n         // Because the sequence is halved, to map the output index back\n         // to the previous sequence to find the corresponding value,\n         // we need to double the index. When we double the index,\n         // we basically interpolate a position, so 2i looks like\n         // | _ | _ | _ | _ | _ | _ | _. We move the | to the first k position\n         // of each 2k positions by - elemIdx % k. E.g. for output at\n         // index 4,5,6,7, we want to get the corresponding element at\n         // original index 8,9,10,11, for output at index 8,9,10,11,\n         // we want to get the corresponding element at original index\n         // 16,17,18,19, so on and so forth.\n\n         int i = elemIdx < k ? elemIdx : (elemIdx * 2 - imod(elemIdx, k));\n         int i0 = firstPass == 1 ? i : int(getIndices(batch, i));\n         int i1 = firstPass == 1 ? i + k : int(getIndices(batch, i + k));\n\n         float x0 = getX(batch, i0);\n         float x1 = i1 < n ? getX(batch, i1) : x0;\n\n         setOutput(x0 >= x1 ? float(i0) : float(i1));\n       }\n     "}}function Dl(e,t){null!==t&&e.disposeIntermediateTensorInfo(t)}function Fl(e){let t=1;for(;t<e;)t*=2;return t}const Bl={kernelName:a.TopK,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s}=t,{k:o,sorted:i}=r,u=(0,a.env)().getNumber("TOPK_LAST_DIM_CPU_HANDOFF_SIZE_THRESHOLD"),l=(0,a.env)().getNumber("TOPK_K_CPU_HANDOFF_THRESHOLD"),c=s.shape,d=c[c.length-1];if(n.shouldExecuteOnCPU([s])||d<u||o>l){const e=n.readSync(s.dataId),[t,r]=Dn(e,c,s.dtype,o,i);return[n.makeTensorInfo(t.shape,t.dtype,t.values),n.makeTensorInfo(r.shape,r.dtype,r.values)]}if(0===o)return c[c.length-1]=0,[n.makeTensorInfo(c,s.dtype,[]),n.makeTensorInfo(c,"int32",[])];if(1===d)return[s,wo({attrs:{shape:c,dtype:"int32",value:0},backend:n})];const p=n.texData.get(s.dataId),h=null!==p&&p.isPacked,f=h?n.unpackTensor(s):s,m=a.util.sizeFromShape(c)/d,g=Or({inputs:{x:f},attrs:{shape:[m,d]},backend:n});h&&Dl(n,f);const y=Fl(o),x=Fl(d);let b=null;const v=()=>null===b?[g,g]:[g,b],w=(e,t,r)=>{const a=v(),s=new Al(r),o=[[d],[null===b?1:0],[Number.NEGATIVE_INFINITY],[e],[t]],i=b;b=n.runWebGLProgram(s,a,"int32",o),Dl(n,i)};for(let a=1;a<y;a*=2){const e=2*a;for(let t=a;t>=1;t/=2)w(e,t,[m,x])}for(let a=x;a>y;a/=2){const e=v(),t=new Ol([m,a/2]),r=[[d],[null===b?1:0],[y]],s=b;b=n.runWebGLProgram(t,e,"int32",r),Dl(n,s);const o=y/2,i=2*o;for(let n=o;n>=1;n/=2)w(i,n,b.shape)}let k=b;b=La({inputs:{x:b},backend:n,attrs:{begin:0,size:[m,o]}}),Dl(n,k);let S=Lo({inputs:{x:g,indices:b},backend:n,attrs:{axis:1,batchDims:1}});Dl(n,g);const N=c.slice(0,-1);N.push(o),k=b,b=Or({inputs:{x:b},attrs:{shape:N},backend:n}),Dl(n,k);const T=S;return S=Or({inputs:{x:S},attrs:{shape:N},backend:n}),Dl(n,T),[S,b]}};class Ml{constructor(e,t,n,r,a,s){this.variableNames=["Image","Transforms"],this.outputShape=s;const o="nearest"===n?1:2;let i;switch(r){case"constant":default:i=1;break;case"reflect":i=2;break;case"wrap":i=3;break;case"nearest":i=4}this.userCode=`\n            float mapCoord(float outCoord, float len) {\n              float inCoord = outCoord;\n              if(${i} == 2) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    if (inCoord < sz2) {\n                      inCoord = sz2 * float(int(float(-inCoord / sz2))) +\n                      inCoord;\n                    }\n                    inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1.0;\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz2 = 2.0 * len;\n                    inCoord -= sz2 * float(int(float(inCoord / sz2)));\n                    if (inCoord >= len) {\n                      inCoord = sz2 - inCoord - 1.0;\n                    }\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 3) {\n                if (inCoord < 0.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord += len * (float(int(float(-inCoord / sz))) + 1.0);\n                  }\n                } else if (inCoord > len - 1.0) {\n                  if (len <= 1.0) {\n                    inCoord = 0.0;\n                  } else {\n                    float sz = len - 1.0;\n                    inCoord -= len * float(int(float(inCoord / sz)));\n                  }\n                }\n                return clamp(inCoord, 0.0, len - 1.0);\n              } else if (${i} == 4) {\n                return clamp(outCoord, 0.0, len - 1.0);\n              } else {\n                return outCoord;\n              }\n            }\n\n            float readWithFillValue(int batch, int coordY, int coordX,\n              int channel) {\n              float outputValue;\n              if (0 <= coordY && coordY < ${e} && 0 <= coordX && coordX < ${t}) {\n                  outputValue = getImage(batch, coordY, coordX, channel);\n              } else {\n                outputValue = float(${a});\n              }\n              return outputValue;\n            }\n\n            void main() {\n              ivec4 coords = getOutputCoords();\n              float outputValue;\n              int batch = coords[0];\n              int x = coords[2];\n              int y = coords[1];\n              int channel = coords[3];\n              float xf = float(x);\n              float yf = float(y);\n              float a1 = getTransforms(batch, 0);\n              float a2 = getTransforms(batch, 1);\n              float a3 = getTransforms(batch, 2);\n              float b1 = getTransforms(batch, 3);\n              float b2 = getTransforms(batch, 4);\n              float b3 = getTransforms(batch, 5);\n              float c1 = getTransforms(batch, 6);\n              float c2 = getTransforms(batch, 7);\n              float projection = c1 * xf + c2 * yf + 1.0;\n              if (projection == 0.0) {\n                outputValue = float(${a});\n              } else {\n                float inX = (a1 * xf + a2 * yf + a3) / projection;\n                float inY = (b1 * xf + b2 * yf + b3) / projection;\n                float mapX = mapCoord(inX, float(${t}));\n                float mapY = mapCoord(inY, float(${e}));\n\n                if (${o} == 1) {\n                  int coordY = int(round(mapY));\n                  int coordX = int(round(mapX));\n                  outputValue = readWithFillValue(batch, coordY, coordX,\n                    channel);\n                } else {\n                  float yFloor = floor(mapY);\n                  float xFloor = floor(mapX);\n                  float yCeil = yFloor + 1.0;\n                  float xCeil = xFloor + 1.0;\n                  float valueYFloor = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yFloor), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yFloor), int(xCeil), channel);\n                  float valueYCeil = (xCeil - mapX) *\n                  readWithFillValue(batch, int(yCeil), int(xFloor), channel) +\n                  (mapX - xFloor) *\n                  readWithFillValue(batch, int(yCeil), int(xCeil), channel);\n                  outputValue = (yCeil - mapY) * valueYFloor +\n                  (mapY - yFloor) * valueYCeil;\n                }\n              }\n              setOutput(outputValue);\n            }\n        `}}const Pl={kernelName:a.Transform,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{image:a,transforms:s}=t,{interpolation:o,fillMode:i,fillValue:u,outputShape:l}=r,[c,d,p,h]=a.shape,[f,m]=null!=l?l:[d,p],g=new Ml(d,p,o,i,u,[c,f,m,h]);return n.runWebGLProgram(g,[a,s],"float32")}};const Ll={kernelName:a.Unique,backendName:"webgl",kernelFunc:function(e){const{inputs:t,attrs:n,backend:r}=e,{axis:a}=n,{x:s}=t;L(s,"unique"),console.warn("WARNING: ","UI might be locked temporarily as data is being downloaded");const o=r.readSync(s.dataId),{outputValues:i,outputShape:u,indices:l}=Bn(o,a,s.shape,s.dtype);return[r.makeTensorInfo(u,s.dtype,i),r.makeTensorInfo([l.length],"int32",l)]}};const Vl={kernelName:a.Unpack,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{value:a}=t;let{axis:s}=r;s<0&&(s+=a.shape.length);const o=a,i=o.shape.length,u=a.shape[s],l=new Array(i-1);let c=0;for(let m=0;m<i;m++)m!==s&&(l[c++]=o.shape[m]);const d=[],p=new Array(i).fill(0),h=o.shape.slice();h[s]=1;const f=new Array(u);for(let m=0;m<f.length;m++){p[s]=m;const e=La({inputs:{x:o},backend:n,attrs:{begin:p,size:h}}),t=Or({inputs:{x:e},backend:n,attrs:{shape:l}});f[m]=t,d.push(e)}return d.forEach((e=>n.disposeIntermediateTensorInfo(e))),f}};class zl{constructor(e,t){this.variableNames=["x","segmentIds"];const n=e.windowSize,r=e.batchSize,a=e.inSize,s=e.numSegments,o=s*Math.ceil(a/n);this.outputShape=[r,o];const i=4*Math.floor(n/4),u=n%4,l="\n        sumValue += dot(values, segFilter);\n    ";let c="";a%n>0&&(c=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return initializationValue;\n        }\n      `);let d="";a%n>0&&(d=`\n        if (inIdx < 0 || inIdx >= ${a}) {\n          return -1.0;\n        }\n      `),this.userCode=`\n      const float initializationValue = 0.0;\n\n      float getValue(int batch, int inIdx) {\n        ${c}\n        return getX(batch, inIdx);\n      }\n\n      float getSegmentIdAtIndex(int inIdx) {\n        ${d}\n        return getSegmentIds(inIdx);\n      }\n\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = int(floor(float(outIdx) / float(\n          ${s})) * float(${n}));\n        int currentSeg = int(mod(float(outIdx), float(${s})));\n\n        float sumValue = 0.0;\n\n        for (int i = 0; i < ${i}; i += 4) {\n          int inIdx = inOffset + i;\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            getValue(batch, inIdx + 3)\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 3)) == currentSeg ? 1 : 0\n          );\n\n          ${l}\n        }\n\n        int inIdx = inOffset + ${i};\n        if (${1===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            initializationValue,\n            initializationValue,\n            initializationValue\n          );\n\n          int inIdxSeg = int(getSegmentIdAtIndex(inIdx));\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            0,\n            0,\n            0\n          );\n\n          ${l}\n        } else if (${2===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            initializationValue,\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n              0,\n              0\n          );\n\n          ${l}\n        } else if (${3===u}) {\n          vec4 values = vec4(\n            getValue(batch, inIdx),\n            getValue(batch, inIdx + 1),\n            getValue(batch, inIdx + 2),\n            initializationValue\n          );\n\n          vec4 segFilter = vec4(\n            int(getSegmentIdAtIndex(inIdx)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 1)) == currentSeg ? 1 : 0,\n            int(getSegmentIdAtIndex(inIdx + 2)) == currentSeg ? 1 : 0,\n            0\n          );\n\n          ${l}\n        }\n        setOutput(sumValue);\n      }\n    `}}const Ul=[qr,Kr,Yr,Zr,ta,aa,sa,oa,pa,ha,ma,ya,ba,wa,Sa,Ia,$a,_a,Ra,Aa,Fa,za,Ua,Wa,Ka,Qa,es,gr,rs,ds,xs,Ss,Ns,Ts,Is,$s,Es,Rs,Os,Ls,Vs,zs,Ws,qs,js,Ys,Zs,eo,to,ro,ao,oo,uo,co,ho,go,bo,ko,No,$o,Eo,Ao,Do,Fo,Mo,Vo,Uo,Go,fr,Ho,us,Xo,jo,Qo,br,Jo,ti,ni,ai,oi,ui,ci,pi,mi,yi,bi,wi,ki,Si,Ii,$i,Ci,Ei,_i,Ai,Fi,Mi,qi,Ar,Xi,ji,Qi,Ji,Ha,tu,au,su,lu,du,kr,pu,fu,Xa,Vi,gu,xu,vu,Dr,Su,Tu,Cu,_u,Ou,Fu,Mu,Lu,zu,Wu,Hu,Xu,ju,Qu,Ju,tl,Va,Hi,rl,al,sl,ol,il,ul,ll,cl,hl,ml,xl,bl,wl,kl,Sl,Nl,Wi,Ur,Il,Cl,Rl,Bl,Pl,Gr,Ll,Vl,{kernelName:a.UnsortedSegmentSum,backendName:"webgl",kernelFunc:function(e){const{inputs:t,backend:n,attrs:r}=e,{x:s,segmentIds:o}=t,{numSegments:i}=r,u=s.shape.length,l=[];let c=0;const d=a.backend_util.getAxesPermutation([c],u);let p=s;null!=d&&(p=Wr({inputs:{x:s},backend:n,attrs:{perm:d}}),l.push(p),c=a.backend_util.getInnerMostAxes(1,u)[0]);const h=a.backend_util.segment_util.computeOutShape(p.shape,c,i),f=a.util.sizeFromShape([p.shape[c]]),m=Or({inputs:{x:p},backend:n,attrs:{shape:[-1,f]}});l.push(m);const g=(0,a.sumOutType)(s.dtype),y=(e,t,r,s,o)=>{const i=e.shape[0],u=e.shape[1],c=a.backend_util.segment_util.segOpComputeOptimalWindowSize(u,o),d=new zl({windowSize:c,inSize:u,batchSize:i,numSegments:o},t),p=n.compileAndRun(d,[e,r],s);if(l.push(p),p.shape[1]===o)return p;const h=hu({backend:n,attrs:{start:0,stop:o,step:1,dtype:"float32"}}),f=_l({inputs:{x:h},backend:n,attrs:{reps:[u/c]}});l.push(h),l.push(f);return y(p,t,f,s,o)},x=Or({inputs:{x:y(m,"unsortedSegmentSum",o,g,i)},backend:n,attrs:{shape:h}});let b=x;if(null!=d){l.push(x);const e=a.backend_util.getUndoAxesPermutation(d);b=Wr({inputs:{x:b},backend:n,attrs:{perm:e}})}return l.forEach((e=>n.disposeIntermediateTensorInfo(e))),b}},ru];for(const Wl of Ul)(0,a.registerKernel)(Wl)},1393:(e,t,n)=>{"use strict";n.d(t,{YL:()=>at});var r={};n.r(r),n.d(r,{json:()=>F});var a={};n.r(a),n.d(a,{json:()=>B});var s={};n.r(s),n.d(s,{json:()=>M});var o={};n.r(o),n.d(o,{json:()=>P});var i={};n.r(i),n.d(i,{json:()=>L});var u={};n.r(u),n.d(u,{json:()=>V});var l={};n.r(l),n.d(l,{json:()=>z});var c={};n.r(c),n.d(c,{json:()=>U});var d={};n.r(d),n.d(d,{json:()=>W});var p={};n.r(p),n.d(p,{json:()=>G});var h={};n.r(h),n.d(h,{json:()=>H});var f={};n.r(f),n.d(f,{json:()=>q});var m={};n.r(m),n.d(m,{json:()=>X});var g={};n.r(g),n.d(g,{json:()=>K});var y={};n.r(y),n.d(y,{json:()=>j});var x={};n.r(x),n.d(x,{json:()=>Y});var b={};n.r(b),n.d(b,{json:()=>Q});var v={};n.r(v),n.d(v,{json:()=>Z});var w={};n.r(w),n.d(w,{json:()=>J});var k={};n.r(k),n.d(k,{OP_SCOPE_SUFFIX:()=>ge.zvA,abs:()=>ge.WnP,acos:()=>ge.Khb,acosh:()=>ge.__u,add:()=>ge.IHx,addN:()=>ge.QBD,all:()=>ge.$6P,any:()=>ge.YjB,argMax:()=>ge.NqF,argMin:()=>ge.vHJ,asin:()=>ge.ZRM,asinh:()=>ge.VfV,atan:()=>ge.z4N,atan2:()=>ge.fvJ,atanh:()=>ge.C80,avgPool:()=>ge.wS1,avgPool3d:()=>ge.uR5,basicLSTMCell:()=>ge.zEQ,batchNorm:()=>ge.tgs,batchNorm2d:()=>ge.Dxk,batchNorm3d:()=>ge.JY5,batchNorm4d:()=>ge.p3b,batchToSpaceND:()=>ge.E4h,bincount:()=>ge.yE8,booleanMaskAsync:()=>ge.anm,broadcastArgs:()=>ge.XsQ,broadcastTo:()=>ge.UFq,buffer:()=>ge.f3b,cast:()=>ge.pju,ceil:()=>ge.mDi,clipByValue:()=>ge.iUl,clone:()=>ge.d9v,complex:()=>ge.PYB,concat:()=>ge.zoF,concat1d:()=>ge.gME,concat2d:()=>ge.Izb,concat3d:()=>ge.MNy,concat4d:()=>ge.ZaL,conv1d:()=>ge.PAt,conv2d:()=>ge.Tek,conv2dTranspose:()=>ge.bc,conv3d:()=>ge.pdZ,conv3dTranspose:()=>ge.$QV,cos:()=>ge.mCk,cosh:()=>ge.f9Y,cosineWindow:()=>ge.mew,cumprod:()=>ge.$Gn,cumsum:()=>ge.zbp,denseBincount:()=>ge.ppE,depthToSpace:()=>ge.nTT,depthwiseConv2d:()=>ge.B10,diag:()=>ge.Ka3,dilation2d:()=>ge.WmZ,div:()=>ge.hiC,divNoNan:()=>ge.NTj,dot:()=>ge.AKD,dropout:()=>ge.rvX,einsum:()=>ge.WYO,elu:()=>ge.pyx,enclosingPowerOfTwo:()=>ge.GRh,equal:()=>ge.DgJ,erf:()=>ge.qNN,euclideanNorm:()=>ge.d2q,exp:()=>ge.Qqt,expandDims:()=>ge.dt4,expm1:()=>ge.t$B,eye:()=>ge.iyy,fft:()=>ge.kp_,fill:()=>ge.hlL,floor:()=>ge.GWj,floorDiv:()=>ge.qPi,fused:()=>ge.imm,gather:()=>ge.Iqj,gatherND:()=>ge.dbB,greater:()=>ge.pjt,greaterEqual:()=>ge.brS,ifft:()=>ge.Sxn,imag:()=>ge.asL,image:()=>ge.BHj,inTopKAsync:()=>ge.V3u,irfft:()=>ge.wx0,isFinite:()=>ge.xVT,isInf:()=>ge.UWc,isNaN:()=>ge.i2d,leakyRelu:()=>ge.hi7,less:()=>ge.d9m,lessEqual:()=>ge.zN1,linalg:()=>ge.$r2,linspace:()=>ge.SX3,localResponseNormalization:()=>ge.G9k,log:()=>ge.cM7,log1p:()=>ge.Krr,logSigmoid:()=>ge.e_t,logSoftmax:()=>ge.CmS,logSumExp:()=>ge.l_t,logicalAnd:()=>ge.HvI,logicalNot:()=>ge.hJK,logicalOr:()=>ge.K5V,logicalXor:()=>ge.egP,losses:()=>ge.MB5,lowerBound:()=>ge.eab,matMul:()=>ge.OI3,max:()=>ge.Fp7,maxPool:()=>ge._sB,maxPool3d:()=>ge.YQQ,maxPoolWithArgmax:()=>ge.Ip$,maximum:()=>ge.gWQ,mean:()=>ge.J69,meshgrid:()=>ge.ry_,min:()=>ge.VV$,minimum:()=>ge.LTh,mirrorPad:()=>ge.VdP,mod:()=>ge.wQq,moments:()=>ge.Gi7,movingAverage:()=>ge.p_,mul:()=>ge.dC7,multiRNNCell:()=>ge.rq4,multinomial:()=>ge.SJ_,neg:()=>ge.W76,norm:()=>ge.KOy,notEqual:()=>ge.Quu,oneHot:()=>ge.lfX,ones:()=>ge.iUs,onesLike:()=>ge.JpU,op:()=>ge.op,outerProduct:()=>ge.N2O,pad:()=>ge.vku,pad1d:()=>ge.pNR,pad2d:()=>ge.koy,pad3d:()=>ge.t1L,pad4d:()=>ge.lGY,pool:()=>ge.d_R,pow:()=>ge.sQ3,prelu:()=>ge.AL3,print:()=>ge.S0v,prod:()=>ge.WVs,rand:()=>ge.TN_,randomGamma:()=>ge.wzB,randomNormal:()=>ge.nGf,randomStandardNormal:()=>ge.ruB,randomUniform:()=>ge.LGj,range:()=>ge.w6H,real:()=>ge.kwC,reciprocal:()=>ge.M25,relu:()=>ge.UYe,relu6:()=>ge.btT,reshape:()=>ge.XLQ,reverse:()=>ge.GYS,reverse1d:()=>ge.SDf,reverse2d:()=>ge.diP,reverse3d:()=>ge.sx7,reverse4d:()=>ge.mG2,rfft:()=>ge.QEs,round:()=>ge.NMM,rsqrt:()=>ge.bp0,scalar:()=>ge.iD$,scatterND:()=>ge.snQ,searchSorted:()=>ge.zcT,selu:()=>ge.U8D,separableConv2d:()=>ge.U_I,setdiff1dAsync:()=>ge.ODp,sigmoid:()=>ge.XD2,sign:()=>ge.Xxe,signal:()=>ge.tdS,sin:()=>ge.O$l,sinh:()=>ge.R_K,slice:()=>ge.tPi,slice1d:()=>ge.jZU,slice2d:()=>ge.SmN,slice3d:()=>ge.CnO,slice4d:()=>ge.p0P,softmax:()=>ge.XAC,softplus:()=>ge.Wvh,spaceToBatchND:()=>ge.fBT,sparse:()=>ge.rVs,sparseToDense:()=>ge.ers,spectral:()=>ge.uN7,split:()=>ge.Vl2,sqrt:()=>ge._b3,square:()=>ge.h62,squaredDifference:()=>ge.$i,squeeze:()=>ge.L9e,stack:()=>ge.knu,step:()=>ge.Nbs,stridedSlice:()=>ge.NXj,string:()=>ge.Z_8,sub:()=>ge.luU,sum:()=>ge.Smz,tan:()=>ge.ORZ,tanh:()=>ge.AEp,tensor:()=>ge.XeE,tensor1d:()=>ge.RRF,tensor2d:()=>ge.odF,tensor3d:()=>ge.wOQ,tensor4d:()=>ge.yXz,tensor5d:()=>ge.Bfx,tensor6d:()=>ge.xZs,tile:()=>ge.Gg6,topk:()=>ge.hg7,transpose:()=>ge.p4s,truncatedNormal:()=>ge.Xu6,unique:()=>ge.Two,unsortedSegmentSum:()=>ge.pUJ,unstack:()=>ge.HHK,upperBound:()=>ge.GaM,variable:()=>ge.VD$,where:()=>ge.arb,whereAsync:()=>ge.itS,zeros:()=>ge.lls,zerosLike:()=>ge.P84});var S=n(37);var N,T;(0,S.env)().registerFlag("KEEP_INTERMEDIATE_TENSORS",(()=>!1),(e=>{e&&console.warn("Keep intermediate tensors is ON. This will print the values of all intermediate tensors during model inference. Not all models support this mode. For details, check e2e/benchmarks/ model_config.js. This significantly impacts performance.")})),function(e){e[e.DT_INVALID=0]="DT_INVALID",e[e.DT_FLOAT=1]="DT_FLOAT",e[e.DT_DOUBLE=2]="DT_DOUBLE",e[e.DT_INT32=3]="DT_INT32",e[e.DT_UINT8=4]="DT_UINT8",e[e.DT_INT16=5]="DT_INT16",e[e.DT_INT8=6]="DT_INT8",e[e.DT_STRING=7]="DT_STRING",e[e.DT_COMPLEX64=8]="DT_COMPLEX64",e[e.DT_INT64=9]="DT_INT64",e[e.DT_BOOL=10]="DT_BOOL",e[e.DT_QINT8=11]="DT_QINT8",e[e.DT_QUINT8=12]="DT_QUINT8",e[e.DT_QINT32=13]="DT_QINT32",e[e.DT_BFLOAT16=14]="DT_BFLOAT16",e[e.DT_QINT16=15]="DT_QINT16",e[e.DT_QUINT16=16]="DT_QUINT16",e[e.DT_UINT16=17]="DT_UINT16",e[e.DT_COMPLEX128=18]="DT_COMPLEX128",e[e.DT_HALF=19]="DT_HALF",e[e.DT_RESOURCE=20]="DT_RESOURCE",e[e.DT_VARIANT=21]="DT_VARIANT",e[e.DT_UINT32=22]="DT_UINT32",e[e.DT_UINT64=23]="DT_UINT64",e[e.DT_FLOAT_REF=101]="DT_FLOAT_REF",e[e.DT_DOUBLE_REF=102]="DT_DOUBLE_REF",e[e.DT_INT32_REF=103]="DT_INT32_REF",e[e.DT_UINT8_REF=104]="DT_UINT8_REF",e[e.DT_INT16_REF=105]="DT_INT16_REF",e[e.DT_INT8_REF=106]="DT_INT8_REF",e[e.DT_STRING_REF=107]="DT_STRING_REF",e[e.DT_COMPLEX64_REF=108]="DT_COMPLEX64_REF",e[e.DT_INT64_REF=109]="DT_INT64_REF",e[e.DT_BOOL_REF=110]="DT_BOOL_REF",e[e.DT_QINT8_REF=111]="DT_QINT8_REF",e[e.DT_QUINT8_REF=112]="DT_QUINT8_REF",e[e.DT_QINT32_REF=113]="DT_QINT32_REF",e[e.DT_BFLOAT16_REF=114]="DT_BFLOAT16_REF",e[e.DT_QINT16_REF=115]="DT_QINT16_REF",e[e.DT_QUINT16_REF=116]="DT_QUINT16_REF",e[e.DT_UINT16_REF=117]="DT_UINT16_REF",e[e.DT_COMPLEX128_REF=118]="DT_COMPLEX128_REF",e[e.DT_HALF_REF=119]="DT_HALF_REF",e[e.DT_RESOURCE_REF=120]="DT_RESOURCE_REF",e[e.DT_VARIANT_REF=121]="DT_VARIANT_REF",e[e.DT_UINT32_REF=122]="DT_UINT32_REF",e[e.DT_UINT64_REF=123]="DT_UINT64_REF"}(N||(N={})),function(e){let t;!function(e){e[e.LEGACY=0]="LEGACY",e[e.V1=1]="V1",e[e.V2=2]="V2"}(t=e.CheckpointFormatVersion||(e.CheckpointFormatVersion={}))}(T||(T={}));const I={};function $(e){return I[e]}function C(e,t,n,r,a){const s=t.inputParams[e];if(s&&void 0!==s.inputIndexStart){const e=s.inputIndexStart,o=0===s.inputIndexEnd?void 0:void 0===s.inputIndexEnd?e+1:s.inputIndexEnd;if("tensor"===s.type)return E(t.inputNames[s.inputIndexStart],n,r,a);if("tensors"===s.type){return t.inputNames.slice(e,o).map((e=>E(e,n,r,a)))}const i=E(t.inputNames.slice(e)[0],n,r,a),u=i.dataSync();return"number"===s.type?u[0]:S.util.toNestedArray(i.shape,u)}const o=t.attrParams[e];return o&&o.value}function E(e,t,n,r){const[a,s]=A(e);if(null!=r){const e=r.getHashTableHandleByName(a);if(null!=e)return e}const o=n.currentContextIds.find((e=>!!t[R(a,e)]));return void 0!==o?t[R(a,o)][s]:void 0}function _(e,t){const[n,r,a]=A(e);return[R(n,t&&t.currentContextId),r,a]}function R(e,t){return t?`${e}-${t}`:e}function A(e){const t=e.split(":");if(1===t.length)return[e,0,void 0];const n=t[0],r=3===t.length?t[1]:void 0;return[n,Number(t[t.length-1]),r]}function O(e,t,n){let r=C("pad",e,t,n);if("explicit"===r){r=C("explicitPaddings",e,t,n);const a=[[0,0],[0,0],[0,0],[0,0]];for(let e=0;e<4;e++)a[e][0]=r[2*e],a[e][1]=r[2*e+1];return a}return r}function D(e){return e.kept?e:(0,S.clone)(e)}const F=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],B=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],M=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcatV2",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListLength",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}]},{tfOpName:"TensorListResize",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"size",type:"number"}]}],P=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],L=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomStandardNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],V=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],z=[{tfOpName:"LowerBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"UpperBound",category:"evaluation",inputs:[{start:0,name:"sortedSequence",type:"tensor"},{start:1,name:"values",type:"tensor"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],U=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],W=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],G=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]},{tfOpName:"ImageProjectiveTransformV3",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"transforms",type:"tensor"},{start:2,name:"outputShape",type:"number[]"},{start:3,name:"fillValue",type:"number"}],attrs:[{tfName:"interpolation",name:"interpolation",type:"string"},{tfName:"fill_mode",name:"fillMode",type:"string"}]}],H=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],q=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],X=[{tfOpName:"EuclideanNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",defaultValue:!1}]},{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],K=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumprod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],j=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],Y=[{tfOpName:"SparseFillEmptyRows",category:"sparse",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"denseShape",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}]},{tfOpName:"SparseReshape",category:"sparse",inputs:[{start:0,name:"inputIndices",type:"tensor"},{start:1,name:"inputShape",type:"tensor"},{start:2,name:"newShape",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SparseSegmentMean",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]},{tfOpName:"SparseSegmentSum",category:"sparse",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"segmentIds",type:"tensor"}]}],Q=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],Z=[{tfOpName:"StringNGrams",category:"string",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"dataSplits",type:"tensor"}],attrs:[{tfName:"separator",name:"separator",type:"string"},{tfName:"ngram_widths",name:"nGramWidths",type:"number[]"},{tfName:"left_pad",name:"leftPad",type:"string"},{tfName:"right_pad",name:"rightPad",type:"string"},{tfName:"pad_width",name:"padWidth",type:"number"},{tfName:"preserve_short_sequences",name:"preserveShortSequences",type:"bool"}],outputs:["ngrams","ngrams_splits"]},{tfOpName:"StringSplit",category:"string",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"delimiter",type:"tensor"}],attrs:[{tfName:"skip_empty",name:"skipEmpty",type:"bool"}],outputs:["indices","values","shape"]},{tfOpName:"StringToHashBucketFast",category:"string",inputs:[{start:0,name:"input",type:"tensor"}],attrs:[{tfName:"num_buckets",name:"numBuckets",type:"number"}]}],J=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]},{tfOpName:"BroadcastArgs",category:"transformation",inputs:[{start:0,name:"s0",type:"tensor"},{start:1,name:"s1",type:"tensor"}],attrs:[]}];class ee{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const e=[].concat(...[r,a,s,o,i,u,l,c,d,p,h,f,m,g,y,x,b,v,w].map((e=>e.json)));this.opMappers=e.reduce(((e,t)=>(e[t.tfOpName]=t,e)),{})}transformGraph(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=e.node,r=[],a=[],s=[],o=n.reduce(((e,t)=>(e[t.name]=this.mapNode(t),t.op.startsWith("Placeholder")?r.push(e[t.name]):"Const"===t.op?a.push(e[t.name]):null!=t.input&&0!==t.input.length||s.push(e[t.name]),e)),{});let i=[];const u=[];let l={},c={};null!=t&&(l=this.mapSignatureEntries(t.inputs),c=this.mapSignatureEntries(t.outputs));const d=Object.keys(o);d.forEach((e=>{const t=o[e];t.inputNames.forEach(((e,n)=>{const[r,,a]=_(e),s=o[r];if(null!=s.outputs){const e=s.outputs.indexOf(a);if(-1!==e){const a=`${r}:${e}`;t.inputNames[n]=a}}t.inputs.push(s),s.children.push(t)}))})),0===Object.keys(c).length?d.forEach((e=>{const t=o[e];0===t.children.length&&u.push(t)})):Object.keys(c).forEach((e=>{const[t]=_(e),n=o[t];null!=n&&(n.signatureKey=c[e],u.push(n))})),Object.keys(l).length>0?Object.keys(l).forEach((e=>{const[t]=_(e),n=o[t];n&&(n.signatureKey=l[e],i.push(n))})):i=r;let p={};null!=e.library&&null!=e.library.function&&(p=e.library.function.reduce(((e,t)=>(e[t.signature.name]=this.mapFunction(t),e)),{}));const h={nodes:o,inputs:i,outputs:u,weights:a,placeholders:r,signature:t,functions:p};return s.length>0&&(h.initNodes=s),h}mapSignatureEntries(e){return Object.keys(e||{}).reduce(((t,n)=>(t[e[n].name]=n,t)),{})}mapNode(e){const t=$(e.op)||this.opMappers[e.op]||{};null==e.attr&&(e.attr={});const n={name:e.name,op:e.op,category:t.category,inputNames:(e.input||[]).map((e=>e.startsWith("^")?e.slice(1):e)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:e.attr,outputs:t.outputs};return null!=t.inputs&&(n.inputParams=t.inputs.reduce(((e,t)=>(e[t.name]={type:t.type,inputIndexStart:t.start,inputIndexEnd:t.end},e)),{})),null!=t.attrs&&(n.attrParams=t.attrs.reduce(((t,n)=>{const r=n.type;let a;switch(n.type){case"string":a=ne(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ne(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"string[]":a=pe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=pe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number":a=ae(e.attr,n.tfName,n.defaultValue||0),void 0===a&&n.tfDeprecatedName&&(a=ae(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"number[]":a=de(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=de(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool":a=re(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=re(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"bool[]":a=fe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=fe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape":a=ce(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ce(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"shape[]":a=he(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=he(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype":a=ie(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ie(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"dtype[]":a=ue(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=ue(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"func":a=oe(e.attr,n.tfName,n.defaultValue),void 0===a&&n.tfDeprecatedName&&(a=oe(e.attr,n.tfDeprecatedName,n.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${n.type} for op: ${e.op}`)}return t[n.name]={value:a,type:r},t}),{})),n}mapFunction(e){const t=e.nodeDef,n=[];let r={};null!=t&&(r=t.reduce(((e,t)=>(e[t.name]=this.mapNode(t),"Const"===t.op&&n.push(e[t.name]),e)),{}));const a=[],s=[];e.signature.inputArg.forEach((e=>{const[t]=_(e.name),n={name:t,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:se(e.type),type:"dtype"}},children:[]};n.signatureKey=e.name,a.push(n),r[t]=n}));Object.keys(r).forEach((e=>{const t=r[e];t.inputNames.forEach(((e,n)=>{const[a,,s]=_(e),o=r[a];if(null!=o.outputs){const e=o.outputs.indexOf(s);if(-1!==e){const r=`${a}:${e}`;t.inputNames[n]=r}}t.inputs.push(o),o.children.push(t)}))}));const o=e.ret;e.signature.outputArg.forEach((e=>{const[t,n]=_(o[e.name]),a=r[t];null!=a&&(a.defaultOutput=n,s.push(a))}));const i=this.mapArgsToSignature(e);return{nodes:r,inputs:a,outputs:s,weights:n,placeholders:[],signature:i}}mapArgsToSignature(e){return{methodName:e.signature.name,inputs:e.signature.inputArg.reduce(((e,t)=>(e[t.name]=this.mapArgToTensorInfo(t),e)),{}),outputs:e.signature.outputArg.reduce(((t,n)=>(t[n.name]=this.mapArgToTensorInfo(n,e.ret),t)),{})}}mapArgToTensorInfo(e,t){let n=e.name;return null!=t&&(n=t[n]),{name:n,dtype:e.type}}}function te(e,t){const n=Array.isArray(e)?String.fromCharCode.apply(null,e):function(e){const t=(0,S.env)().global;if("undefined"!==typeof t.atob)return t.atob(e);if("undefined"!==typeof Buffer)return new Buffer(e,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(e);return t?n:n.toLowerCase()}function ne(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=e[t];return null!=a?te(a.s,r):n}function re(e,t,n){const r=e[t];return r?r.b:n}function ae(e,t,n){const r=e[t]||{},a=null!=r.i?r.i:null!=r.f?r.f:n;return"number"===typeof a?a:parseInt(a,10)}function se(e){switch("string"===typeof e&&(e=N[e]),e){case N.DT_FLOAT:case N.DT_HALF:return"float32";case N.DT_INT32:case N.DT_INT64:case N.DT_INT8:case N.DT_UINT8:return"int32";case N.DT_BOOL:return"bool";case N.DT_DOUBLE:return"float32";case N.DT_STRING:return"string";default:return null}}function oe(e,t,n){const r=e[t];return r&&r.func?r.func.name:n}function ie(e,t,n){const r=e[t];return r&&r.type?se(r.type):n}function ue(e,t,n){const r=e[t];return r&&r.list&&r.list.type?r.list.type.map((e=>se(e))):n}function le(e){if(!e.unknownRank)return null!=e.dim?e.dim.map((e=>"number"===typeof e.size?e.size:parseInt(e.size,10))):[]}function ce(e,t,n){const r=e[t];return r&&r.shape?le(r.shape):n}function de(e,t,n){const r=e[t];return r?((r.list.f&&r.list.f.length?r.list.f:r.list.i)||[]).map((e=>"number"===typeof e?e:parseInt(e,10))):n}function pe(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=e[t];return a&&a.list&&a.list.s?a.list.s.map((e=>te(e,r))):n}function he(e,t,n){const r=e[t];return r&&r.list&&r.list.shape?r.list.shape.map((e=>le(e))):n}function fe(e,t,n){const r=e[t];return r&&r.list&&r.list.b?r.list.b:n}class me{constructor(e,t,n){this.node=e,this.tensorMap=t,this.context=n,this.inputs=[],this.attrs={},this.inputs=e.inputNames.map((e=>this.getInput(e))),null!=e.rawAttrs&&(this.attrs=Object.keys(e.rawAttrs).reduce(((e,t)=>(e[t]=this.getAttr(t),e)),{}))}getInput(e){return E(e,this.tensorMap,this.context)}getAttr(e,t){const n=this.node.rawAttrs[e];if(null!=n.tensor)return E(e,this.tensorMap,this.context);if(null!=n.i||null!=n.f)return ae(this.node.rawAttrs,e,t);if(null!=n.s)return ne(this.node.rawAttrs,e,t);if(null!=n.b)return re(this.node.rawAttrs,e,t);if(null!=n.shape)return ce(this.node.rawAttrs,e,t);if(null!=n.type)return ie(this.node.rawAttrs,e,t);if(null!=n.list){if(null!=n.list.i||null!=n.list.f)return de(this.node.rawAttrs,e,t);if(null!=n.list.s)return pe(this.node.rawAttrs,e,t);if(null!=n.list.shape)return he(this.node.rawAttrs,e,t);if(null!=n.list.b)return fe(this.node.rawAttrs,e,t);if(null!=n.list.type)return ue(this.node.rawAttrs,e,t)}return t}}var ge=n(9300);const ye=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"BiasAdd":case"AddV2":case"Add":return[r.add(C("a",e,t,n),C("b",e,t,n))];case"AddN":return[r.addN(C("tensors",e,t,n))];case"FloorMod":case"Mod":return[r.mod(C("a",e,t,n),C("b",e,t,n))];case"Mul":return[r.mul(C("a",e,t,n),C("b",e,t,n))];case"RealDiv":case"Div":return[r.div(C("a",e,t,n),C("b",e,t,n))];case"DivNoNan":return[r.divNoNan(C("a",e,t,n),C("b",e,t,n))];case"FloorDiv":return[r.floorDiv(C("a",e,t,n),C("b",e,t,n))];case"Sub":return[r.sub(C("a",e,t,n),C("b",e,t,n))];case"Minimum":return[r.minimum(C("a",e,t,n),C("b",e,t,n))];case"Maximum":return[r.maximum(C("a",e,t,n),C("b",e,t,n))];case"Pow":return[r.pow(C("a",e,t,n),C("b",e,t,n))];case"SquaredDifference":return[r.squaredDifference(C("a",e,t,n),C("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},xe=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"Abs":case"ComplexAbs":return[r.abs(C("x",e,t,n))];case"Acos":return[r.acos(C("x",e,t,n))];case"Acosh":return[r.acosh(C("x",e,t,n))];case"Asin":return[r.asin(C("x",e,t,n))];case"Asinh":return[r.asinh(C("x",e,t,n))];case"Atan":return[r.atan(C("x",e,t,n))];case"Atan2":return[r.atan2(C("x",e,t,n),C("y",e,t,n))];case"Atanh":return[r.atanh(C("x",e,t,n))];case"Ceil":return[r.ceil(C("x",e,t,n))];case"Complex":return[r.complex(C("real",e,t,n),C("imag",e,t,n))];case"Cos":return[r.cos(C("x",e,t,n))];case"Cosh":return[r.cosh(C("x",e,t,n))];case"Elu":return[r.elu(C("x",e,t,n))];case"Erf":return[r.erf(C("x",e,t,n))];case"Exp":return[r.exp(C("x",e,t,n))];case"Expm1":return[r.expm1(C("x",e,t,n))];case"Floor":return[r.floor(C("x",e,t,n))];case"Log":return[r.log(C("x",e,t,n))];case"Log1p":return[r.log1p(C("x",e,t,n))];case"Imag":return[r.imag(C("x",e,t,n))];case"Neg":return[r.neg(C("x",e,t,n))];case"Reciprocal":return[r.reciprocal(C("x",e,t,n))];case"Real":return[r.real(C("x",e,t,n))];case"Relu":return[r.relu(C("x",e,t,n))];case"Round":return[r.round(C("x",e,t,n))];case"Selu":return[r.selu(C("x",e,t,n))];case"Sigmoid":return[r.sigmoid(C("x",e,t,n))];case"Sin":return[r.sin(C("x",e,t,n))];case"Sign":return[r.sign(C("x",e,t,n))];case"Sinh":return[r.sinh(C("x",e,t,n))];case"Softplus":return[r.softplus(C("x",e,t,n))];case"Sqrt":return[r.sqrt(C("x",e,t,n))];case"Square":return[r.square(C("x",e,t,n))];case"Tanh":return[r.tanh(C("x",e,t,n))];case"Tan":return[r.tan(C("x",e,t,n))];case"ClipByValue":return[r.clipByValue(C("x",e,t,n),C("clipValueMin",e,t,n),C("clipValueMax",e,t,n))];case"Relu6":return[r.relu6(C("x",e,t,n))];case"Rsqrt":return[r.rsqrt(E(e.inputNames[0],t,n))];case"Prod":return[r.prod(C("x",e,t,n),C("axes",e,t,n))];case"LeakyRelu":return[r.leakyRelu(C("x",e,t,n),C("alpha",e,t,n))];case"Prelu":return[r.prelu(C("x",e,t,n),C("alpha",e,t,n))];case"IsNan":return[r.isNaN(E(e.inputNames[0],t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function be(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";if("number"!==typeof e&&"number"!==typeof t){S.util.assert(e.length===t.length,(()=>n+` Shapes ${e} and ${t} must match`));for(let r=0;r<e.length;r++){const a=e[r],s=t[r];S.util.assert(a<0||s<0||a===s,(()=>n+` Shapes ${e} and ${t} must match`))}}}function ve(e){return"number"!==typeof e&&!e.some((e=>e<0))}function we(e,t,n){let r=ke(e,n);const a=!ve(r);if(a&&0===t.length)throw new Error(`Tried to calculate elements of an empty list with non-fully-defined elementShape: ${r}`);if(a&&t.forEach((e=>{r=ke(e.shape,r)})),!ve(r))throw new Error(`Non-fully-defined elementShape: ${r}`);return r}function ke(e,t){if("number"===typeof e)return t;if("number"===typeof t)return e;if(e.length!==t.length)throw new Error(`Incompatible ranks during merge: ${e} vs. ${t}`);const n=[];for(let r=0;r<e.length;++r){const a=e[r],s=t[r];if(a>=0&&s>=0&&a!==s)throw new Error(`Incompatible shape during merge: ${e} vs. ${t}`);n[r]=a>=0?a:s}return n}class Se{constructor(e,t,n,r,a,s,o){this.name=e,this.dtype=t,this.maxSize=n,this.elementShape=r,this.identicalElementShapes=a,this.dynamicSize=s,this.clearAfterRead=o,this.tensors=[],this.closed_=!1,this.idTensor=(0,S.scalar)(0),(0,S.keep)(this.idTensor)}get id(){return this.idTensor.id}get closed(){return this.closed_}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.tensor.id)||t.tensor.dispose()})),this.tensors=[],this.closed_=!0,this.idTensor.dispose()}size(){return this.tensors.length}read(e){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||e>=this.size())throw new Error(`Tried to read from index ${e}, but array size is: ${this.size()}`);const t=this.tensors[e];if(t.cleared)throw new Error(`TensorArray ${this.name}: Could not read index ${e} twice because it was cleared after a previous read (perhaps try setting clear_after_read = false?).`);return this.clearAfterRead&&(t.cleared=!0),t.read=!0,t.tensor}readMany(e){return e.map((e=>this.read(e)))}write(e,t){if(this.closed_)throw new Error(`TensorArray ${this.name} has already been closed.`);if(e<0||!this.dynamicSize&&e>=this.maxSize)throw new Error(`Tried to write to index ${e}, but array is not resizeable and size is: ${this.maxSize}`);const n=this.tensors[e]||{};if(t.dtype!==this.dtype)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e},\n          because the value dtype is ${t.dtype}, but TensorArray dtype is ${this.dtype}.`);if(0!==this.size()||null!=this.elementShape&&0!==this.elementShape.length||(this.elementShape=t.shape),be(this.elementShape,t.shape,`TensorArray ${this.name}: Could not write to TensorArray index ${e}.`),n.read)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been read.`);if(n.written)throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${e}, because it has already been written.`);n.tensor=t,(0,S.keep)(t),n.written=!0,this.tensors[e]=n}writeMany(e,t){if(e.length!==t.length)throw new Error(`TensorArray ${this.name}: could not write multiple tensors,because the index size: ${e.length} is not the same as tensors size: ${t.length}.`);e.forEach(((e,n)=>this.write(e,t[n])))}gather(e,t){if(t&&t!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${t}`);if(e)e=e.slice(0,this.size());else{e=[];for(let t=0;t<this.size();t++)e.push(t)}if(0===e.length)return(0,S.tensor)([],[0].concat(this.elementShape));const n=this.readMany(e);return be(this.elementShape,n[0].shape,"TensorArray shape mismatch: "),(0,S.stack)(n,0)}concat(e){if(e&&e!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${e}`);if(0===this.size())return(0,S.tensor)([],[0].concat(this.elementShape));const t=[];for(let r=0;r<this.size();r++)t.push(r);const n=this.readMany(t);return be(this.elementShape,n[0].shape,`TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${n[0].shape})`),(0,S.concat)(n,0)}scatter(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);if(e.length!==t.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${e.length} vs. ${t.shape[0]}`);const n=Math.max(...e);if(!this.dynamicSize&&n>=this.maxSize)throw new Error(`Max index must be < array size (${n}  vs. ${this.maxSize})`);this.writeMany(e,(0,S.unstack)(t,0))}split(e,t){if(t.dtype!==this.dtype)throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${t.dtype}`);let n=0;const r=e.map((e=>(n+=e,n)));if(n!==t.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${n}, and tensor's shape is: ${t.shape}`);if(!this.dynamicSize&&e.length!==this.maxSize)throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${e.length}), and the TensorArray is not marked as dynamically resizeable`);const a=0===n?0:t.size/n,s=[];(0,S.tidy)((()=>{t=(0,S.reshape)(t,[1,n,a]);for(let n=0;n<e.length;++n){const o=[0,0===n?0:r[n-1],0],i=[1,e[n],a];s[n]=(0,S.reshape)((0,S.slice)(t,o,i),this.elementShape)}return s}));const o=[];for(let i=0;i<e.length;i++)o[i]=i;this.writeMany(o,s)}}class Ne{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:-1;this.tensors=e,this.elementShape=t,this.elementDtype=n,null!=e&&e.forEach((e=>{if(n!==e.dtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${e.dtype}`);be(t,e.shape,"TensorList shape mismatch: "),(0,S.keep)(e)})),this.idTensor=(0,S.scalar)(0),this.maxNumElements=r,(0,S.keep)(this.idTensor)}get id(){return this.idTensor.id}copy(){return new Ne([...this.tensors],this.elementShape,this.elementDtype)}clearAndClose(e){this.tensors.forEach((t=>{null!=e&&e.has(t.id)||t.dispose()})),this.tensors.length=0,this.idTensor.dispose()}size(){return this.tensors.length}stack(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(-1!==n&&this.tensors.length!==n)throw new Error(`Operation expected a list with ${n} elements but got a list with ${this.tensors.length} elements.`);be(e,this.elementShape,"TensorList shape mismatch: ");const r=we(this.elementShape,this.tensors,e);return(0,S.tidy)((()=>{const e=this.tensors.map((e=>(0,S.reshape)(e,r)));return(0,S.stack)(e,0)}))}popBack(e,t){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);if(0===this.size())throw new Error("Trying to pop from an empty list.");const n=we(this.elementShape,this.tensors,e),r=this.tensors.pop();return be(r.shape,e,"TensorList shape mismatch: "),(0,S.reshape)(r,n)}pushBack(e){if(e.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${this.elementDtype}`);if(be(e.shape,this.elementShape,"TensorList shape mismatch: "),this.maxNumElements===this.size())throw new Error("Trying to push element into a full list.");(0,S.keep)(e),this.tensors.push(e)}resize(e){if(e<0)throw new Error(`TensorListResize expects size to be non-negative. Got: ${e}`);if(-1!==this.maxNumElements&&e>this.maxNumElements)throw new Error(`TensorListResize input size ${e} is greater maxNumElement ${this.maxNumElements}.`);const t=new Ne([],this.elementShape,this.elementDtype,this.maxNumElements);t.tensors.length=e;for(let n=0;n<Math.min(this.tensors.length,e);++n)t.tensors[n]=this.tensors[n];return t}getItem(e,t,n){if(n!==this.elementDtype)throw new Error(`Invalid data types; op elements ${n}, but list elements ${this.elementDtype}`);if(e<0||e>this.tensors.length)throw new Error(`Trying to access element ${e} in a list with ${this.tensors.length} elements.`);if(null==this.tensors[e])throw new Error(`element at index ${e} is null.`);be(this.tensors[e].shape,t,"TensorList shape mismatch: ");const r=we(this.elementShape,this.tensors,t);return(0,S.reshape)(this.tensors[e],r)}setItem(e,t){if(t.dtype!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t.dtype}, but list elements ${this.elementDtype}`);if(e<0||-1!==this.maxNumElements&&e>=this.maxNumElements)throw new Error(`Trying to set element ${e} in a list with max ${this.maxNumElements} elements.`);be(this.elementShape,t.shape,"TensorList shape mismatch: "),(0,S.keep)(t),this.tensors[e]=t}gather(e,t,n){if(t!==this.elementDtype)throw new Error(`Invalid data types; op elements ${t}, but list elements ${this.elementDtype}`);be(this.elementShape,n,"TensorList shape mismatch: "),e=e.slice(0,this.size());const r=we(this.elementShape,this.tensors,n);return 0===e.length?(0,S.tensor)([],[0].concat(r)):(0,S.tidy)((()=>{const t=e.map((e=>(0,S.reshape)(this.tensors[e],r)));return(0,S.stack)(t,0)}))}concat(e,t){if(e&&e!==this.elementDtype)throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${e}`);be(this.elementShape,t,"TensorList shape mismatch: ");const n=we(this.elementShape,this.tensors,t);return 0===this.size()?(0,S.tensor)([],[0].concat(n)):(0,S.tidy)((()=>{const e=this.tensors.map((e=>(0,S.reshape)(e,n)));return(0,S.concat)(e,0)}))}}const Te=async(e,t,n)=>{switch(e.op){case"If":case"StatelessIf":{const r=C("thenBranch",e,t,n),a=C("elseBranch",e,t,n),s=C("cond",e,t,n),o=C("args",e,t,n);return(await s.data())[0]?n.functionMap[r].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap):n.functionMap[a].executeFunctionAsync(o,n.tensorArrayMap,n.tensorListMap)}case"While":case"StatelessWhile":{const r=C("body",e,t,n),a=C("cond",e,t,n),s=C("args",e,t,n),o=await n.functionMap[a].executeFunctionAsync(s,n.tensorArrayMap,n.tensorListMap),i=s.map((e=>e.id));let u=await o[0].data();o.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||e.dispose()}));let l=s;for(;u[0];){const e=l;l=await n.functionMap[r].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);const t=l.map((e=>e.id));e.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}));const s=await n.functionMap[a].executeFunctionAsync(l,n.tensorArrayMap,n.tensorListMap);u=await s[0].data(),s.forEach((e=>{e.kept||-1!==i.indexOf(e.id)||-1!==t.indexOf(e.id)||e.dispose()}))}return l}case"LoopCond":return[D(C("pred",e,t,n))];case"Switch":{const r=C("pred",e,t,n);let a=C("data",e,t,n);return a.kept||(a=D(a)),(await r.data())[0]?[void 0,a]:[a,void 0]}case"Merge":{const r=e.inputNames.find((e=>void 0!==E(e,t,n)));if(r){return[D(E(r,t,n))]}return}case"Enter":{const r=C("frameName",e,t,n),a=C("tensor",e,t,n);return n.enterFrame(r),[D(a)]}case"Exit":{const r=C("tensor",e,t,n);return n.exitFrame(),[D(r)]}case"NextIteration":{const r=C("tensor",e,t,n);return n.nextIteration(),[D(r)]}case"TensorArrayV3":{const r=C("size",e,t,n),a=C("dtype",e,t,n),s=C("elementShape",e,t,n),o=C("dynamicSize",e,t,n),i=C("clearAfterRead",e,t,n),u=C("identicalElementShapes",e,t,n),l=C("name",e,t,n),c=new Se(l,a,r,s,u,o,i);return n.addTensorArray(c),[c.idTensor,(0,S.scalar)(1)]}case"TensorArrayWriteV3":{const r=C("tensorArrayId",e,t,n),a=C("index",e,t,n),s=C("tensor",e,t,n),o=n.getTensorArray(r.id);return o.write(a,s),[o.idTensor]}case"TensorArrayReadV3":{const r=C("tensorArrayId",e,t,n),a=C("index",e,t,n);return[n.getTensorArray(r.id).read(a)]}case"TensorArrayGatherV3":{const r=C("tensorArrayId",e,t,n),a=C("indices",e,t,n),s=C("dtype",e,t,n);return[n.getTensorArray(r.id).gather(a,s)]}case"TensorArrayScatterV3":{const r=C("tensorArrayId",e,t,n),a=C("indices",e,t,n),s=C("tensor",e,t,n),o=n.getTensorArray(r.id);return o.scatter(a,s),[o.idTensor]}case"TensorArrayConcatV3":{const r=C("tensorArrayId",e,t,n),a=n.getTensorArray(r.id),s=C("dtype",e,t,n);return[a.concat(s)]}case"TensorArraySplitV3":{const r=C("tensorArrayId",e,t,n),a=C("tensor",e,t,n),s=C("lengths",e,t,n),o=n.getTensorArray(r.id);return o.split(s,a),[o.idTensor]}case"TensorArraySizeV3":{const r=C("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return[(0,S.scalar)(a.size(),"int32")]}case"TensorArrayCloseV3":{const r=C("tensorArrayId",e,t,n),a=n.getTensorArray(r.id);return a.clearAndClose(),[a.idTensor]}case"TensorListSetItem":{const r=C("tensorListId",e,t,n),a=C("index",e,t,n),s=C("tensor",e,t,n),o=n.getTensorList(r.id);return o.setItem(a,s),[o.idTensor]}case"TensorListGetItem":{const r=C("tensorListId",e,t,n),a=C("index",e,t,n),s=C("elementShape",e,t,n),o=C("elementDType",e,t,n);return[n.getTensorList(r.id).getItem(a,s,o)]}case"TensorListScatterV2":case"TensorListScatter":{const r=C("indices",e,t,n),a=function(e,t,n,r){if(t.length!==e.shape[0])throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${t.length} vs. ${e.shape[0]}`);const a=Math.max(...t);if(null!=r&&-1!==r&&a>=r)throw new Error(`Max index must be < array size (${a}  vs. ${r})`);const s=new Ne([],n,e.dtype,r),o=(0,S.unstack)(e,0);return t.forEach(((e,t)=>{s.setItem(e,o[t])})),s}(C("tensor",e,t,n),r,C("elementShape",e,t,n),C("numElements",e,t,n));return n.addTensorList(a),[a.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const r=C("elementShape",e,t,n),a=C("elementDType",e,t,n);let s;s="TensorListReserve"===e.op?"numElements":"maxNumElements";const o=C(s,e,t,n),i=function(e,t,n,r){return new Ne([],e,t,r)}(r,a,0,"TensorListReserve"===e.op?-1:o);return n.addTensorList(i),[i.idTensor]}case"TensorListGather":{const r=C("tensorListId",e,t,n),a=C("indices",e,t,n),s=C("elementShape",e,t,n),o=C("elementDType",e,t,n);return[n.getTensorList(r.id).gather(a,o,s)]}case"TensorListStack":{const r=C("tensorListId",e,t,n),a=C("elementShape",e,t,n),s=C("elementDType",e,t,n),o=C("numElements",e,t,n);return[n.getTensorList(r.id).stack(a,s,o)]}case"TensorListFromTensor":{const r=function(e,t,n){const r=e.dtype;if(e.shape.length<1)throw new Error(`Tensor must be at least a vector, but saw shape: ${e.shape}`);if(e.dtype!==n)throw new Error(`Invalid data types; op elements ${e.dtype}, but list elements ${n}`);be(e.shape.slice(1),t,"TensorList shape mismatch: ");const a=(0,S.unstack)(e);return new Ne(a,t,r)}(C("tensor",e,t,n),C("elementShape",e,t,n),C("elementDType",e,t,n));return n.addTensorList(r),[r.idTensor]}case"TensorListConcat":case"TensorListConcatV2":{const r=C("tensorListId",e,t,n),a=n.getTensorList(r.id),s=C("dtype",e,t,n),o=C("elementShape",e,t,n);return[a.concat(s,o)]}case"TensorListPushBack":{const r=C("tensorListId",e,t,n),a=C("tensor",e,t,n),s=n.getTensorList(r.id);return s.pushBack(a),[s.idTensor]}case"TensorListPopBack":{const r=C("tensorListId",e,t,n),a=C("elementShape",e,t,n),s=C("elementDType",e,t,n);return[n.getTensorList(r.id).popBack(a,s)]}case"TensorListSplit":{const r=C("tensor",e,t,n),a=C("elementShape",e,t,n),s=function(e,t,n){let r=0;const a=t.map((e=>(r+=e,r)));if(r!==e.shape[0])throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${r}, and tensor's shape is: ${e.shape}`);const s=ke(e.shape.slice(1),n),o=0===r?0:e.size/r,i=(0,S.tidy)((()=>{const n=[];e=(0,S.reshape)(e,[1,r,o]);for(let r=0;r<t.length;++r){const i=[0,0===r?0:a[r-1],0],u=[1,t[r],o];n[r]=(0,S.reshape)((0,S.slice)(e,i,u),s)}return e.dispose(),n})),u=new Ne([],n,e.dtype,t.length);for(let l=0;l<i.length;l++)u.setItem(l,i[l]);return u}(r,C("lengths",e,t,n),a);return n.addTensorList(s),[s.idTensor]}case"TensorListLength":{const r=C("tensorListId",e,t,n),a=n.getTensorList(r.id);return[(0,S.scalar)(a.size(),"int32")]}case"TensorListResize":{const r=C("tensorListId",e,t,n),a=C("size",e,t,n),s=n.getTensorList(r.id).resize(a);return n.addTensorList(s),[s.idTensor]}default:throw TypeError(`Node type ${e.op} is not implemented`)}};function Ie(e,t,n){const[r,a]=C("fusedOps",e,t,n),s="biasadd"===r,o=!s,i="prelu"===a,u="fusedbatchnorm"===r,l=C("numArgs",e,t,n);if(s){if(i&&2!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&s&&1!==l)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(u)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const c=C("strides",e,t,n),d=O(e,t,n),p=C("dataFormat",e,t,n).toUpperCase(),h=C("dilations",e,t,n);let[f,m]=C("args",e,t,n);o&&(m=f,f=void 0);return{stride:c,pad:d,dataFormat:p,dilations:h,biasArg:f,preluArg:m,activationFunc:a,leakyreluAlpha:C("leakyreluAlpha",e,t,n)}}const $e=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"Conv1D":{const a=C("stride",e,t,n),s=C("pad",e,t,n),o=C("dataFormat",e,t,n).toUpperCase(),i=C("dilation",e,t,n);return[r.conv1d(C("x",e,t,n),C("filter",e,t,n),a,s,o,i)]}case"Conv2D":{const a=C("strides",e,t,n),s=O(e,t,n),o=C("dataFormat",e,t,n).toUpperCase(),i=C("dilations",e,t,n);return[r.conv2d(C("x",e,t,n),C("filter",e,t,n),[a[1],a[2]],s,o,[i[1],i[2]])]}case"_FusedConv2D":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:d}=Ie(e,t,n);return[r.fused.conv2d({x:C("x",e,t,n),filter:C("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:d})]}case"FusedDepthwiseConv2dNative":{const{stride:a,pad:s,dataFormat:o,dilations:i,biasArg:u,preluArg:l,activationFunc:c,leakyreluAlpha:d}=Ie(e,t,n);return[r.fused.depthwiseConv2d({x:C("x",e,t,n),filter:C("filter",e,t,n),strides:[a[1],a[2]],pad:s,dataFormat:o,dilations:[i[1],i[2]],bias:u,activation:c,preluActivationWeights:l,leakyreluAlpha:d})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const a=C("outputShape",e,t,n),s=C("strides",e,t,n),o=O(e,t,n);return[r.conv2dTranspose(C("x",e,t,n),C("filter",e,t,n),a,[s[1],s[2]],o)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const a=C("strides",e,t,n),s=O(e,t,n),o=C("dilations",e,t,n),i=C("dataFormat",e,t,n).toUpperCase();return[r.depthwiseConv2d(C("input",e,t,n),C("filter",e,t,n),[a[1],a[2]],s,i,[o[1],o[2]])]}case"Conv3D":{const a=C("strides",e,t,n),s=C("pad",e,t,n),o=C("dataFormat",e,t,n).toUpperCase(),i=C("dilations",e,t,n);return[r.conv3d(C("x",e,t,n),C("filter",e,t,n),[a[1],a[2],a[3]],s,o,[i[1],i[2],i[3]])]}case"AvgPool":{const a=C("strides",e,t,n),s=C("pad",e,t,n),o=C("kernelSize",e,t,n);return[r.avgPool(C("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPool":{const a=C("strides",e,t,n),s=C("pad",e,t,n),o=C("kernelSize",e,t,n);return[r.maxPool(C("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s)]}case"MaxPoolWithArgmax":{const a=C("strides",e,t,n),s=C("pad",e,t,n),o=C("kernelSize",e,t,n),i=C("includeBatchInIndex",e,t,n),{result:u,indexes:l}=r.maxPoolWithArgmax(C("x",e,t,n),[o[1],o[2]],[a[1],a[2]],s,i);return[u,l]}case"AvgPool3D":{const a=C("strides",e,t,n),s=C("pad",e,t,n),o=C("kernelSize",e,t,n);return[r.avgPool3d(C("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"MaxPool3D":{const a=C("strides",e,t,n),s=C("pad",e,t,n),o=C("kernelSize",e,t,n);return[r.maxPool3d(C("x",e,t,n),[o[1],o[2],o[3]],[a[1],a[2],a[3]],s)]}case"Dilation2D":{const a=C("strides",e,t,n),s=C("pad",e,t,n),o=C("dilations",e,t,n),i=a[1],u=a[2],l=o[1],c=o[2];return[r.dilation2d(C("x",e,t,n),C("filter",e,t,n),[i,u],s,[l,c],"NHWC")]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},Ce=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"Fill":{const a=C("shape",e,t,n),s=C("dtype",e,t,n),o=C("value",e,t,n);return[r.fill(a,o,s)]}case"LinSpace":{const a=C("start",e,t,n),s=C("stop",e,t,n),o=C("num",e,t,n);return[r.linspace(a,s,o)]}case"Multinomial":{const a=C("logits",e,t,n),s=C("numSamples",e,t,n),o=C("seed",e,t,n);return[r.multinomial(a,s,o)]}case"OneHot":{const a=C("indices",e,t,n),s=C("depth",e,t,n),o=C("onValue",e,t,n),i=C("offValue",e,t,n);return[r.oneHot(a,s,o,i)]}case"Ones":return[r.ones(C("shape",e,t,n),C("dtype",e,t,n))];case"OnesLike":return[r.onesLike(C("x",e,t,n))];case"RandomStandardNormal":return[r.randomStandardNormal(C("shape",e,t,n),C("dtype",e,t,n),C("seed",e,t,n))];case"RandomUniform":return[r.randomUniform(C("shape",e,t,n),C("minval",e,t,n),C("maxval",e,t,n),C("dtype",e,t,n))];case"Range":{const a=C("start",e,t,n),s=C("stop",e,t,n),o=C("step",e,t,n);return[r.range(a,s,o,C("dtype",e,t,n))]}case"TruncatedNormal":{const a=C("shape",e,t,n),s=C("mean",e,t,n),o=C("stdDev",e,t,n),i=C("seed",e,t,n);return[r.truncatedNormal(a,s,o,C("dtype",e,t,n),i)]}case"Zeros":return[r.zeros(C("shape",e,t,n),C("dtype",e,t,n))];case"ZerosLike":return[r.zerosLike(C("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function Ee(e,t,n){return{boxes:C("boxes",e,t,n),scores:C("scores",e,t,n),maxOutputSize:C("maxOutputSize",e,t,n),iouThreshold:C("iouThreshold",e,t,n),scoreThreshold:C("scoreThreshold",e,t,n),softNmsSigma:C("softNmsSigma",e,t,n)}}const _e=async function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:k;switch(e.op){case"NonMaxSuppressionV5":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u,softNmsSigma:l}=Ee(e,t,n),c=await a.image.nonMaxSuppressionWithScoreAsync(r,s,o,i,u,l);return[c.selectedIndices,c.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=Ee(e,t,n),l=C("padToMaxOutputSize",e,t,n),c=await a.image.nonMaxSuppressionPaddedAsync(r,s,o,i,u,l);return[c.selectedIndices,c.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:r,scores:s,maxOutputSize:o,iouThreshold:i,scoreThreshold:u}=Ee(e,t,n);return[await a.image.nonMaxSuppressionAsync(r,s,o,i,u)]}case"Where":{const r=a.cast(C("condition",e,t,n),"bool"),s=[await a.whereAsync(r)];return r.dispose(),s}case"ListDiff":return a.setdiff1dAsync(C("x",e,t,n),C("y",e,t,n));default:throw TypeError(`Node type ${e.op} is not implemented`)}},Re=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"LowerBound":{const a=C("sortedSequence",e,t,n),s=C("values",e,t,n);return[r.lowerBound(a,s)]}case"TopKV2":{const a=C("x",e,t,n),s=C("k",e,t,n),o=C("sorted",e,t,n),i=r.topk(a,s,o);return[i.values,i.indices]}case"UpperBound":{const a=C("sortedSequence",e,t,n),s=C("values",e,t,n);return[r.upperBound(a,s)]}case"Unique":{const a=C("x",e,t,n),s=r.unique(a);return[s.values,s.indices]}case"UniqueV2":{const a=C("x",e,t,n),s=C("axis",e,t,n),o=r.unique(a,s);return[o.values,o.indices]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},Ae=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"Const":return t[e.name];case"PlaceholderWithDefault":const a=C("default",e,t,n);return[E(e.name,t,n)||a];case"Placeholder":return[E(e.name,t,n)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":return[D(C("x",e,t,n))];case"IdentityN":return C("x",e,t,n).map((e=>D(e)));case"Snapshot":return[D(C("x",e,t,n))];case"Shape":return[r.tensor1d(C("x",e,t,n).shape,"int32")];case"ShapeN":return C("x",e,t,n).map((e=>r.tensor1d(e.shape)));case"Size":return[r.scalar(C("x",e,t,n).size,"int32")];case"Rank":return[r.scalar(C("x",e,t,n).rank,"int32")];case"NoOp":return[r.scalar(1)];case"Print":const s=C("x",e,t,n),o=C("data",e,t,n),i=C("message",e,t,n),u=C("summarize",e,t,n);console.warn("The graph has a tf.print() operation,usually used for debugging, which slows down performance."),console.log(i);for(let e=0;e<o.length;e++)console.log(Array.prototype.slice.call(o[e].dataSync()).slice(0,u));return[s];default:throw TypeError(`Node type ${e.op} is not implemented`)}};var Oe=n(1480);class De{constructor(e,t){this.keyDType=e,this.valueDType=t,this.handle=(0,S.scalar)(0),this.tensorMap=new Map,(0,S.keep)(this.handle)}get id(){return this.handle.id}clearAndClose(){this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),this.handle.dispose()}size(){return this.tensorMap.size}tensorSize(){return Oe.i(this.size(),"int32")}async import(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return this.tensorMap.forEach((e=>e.dispose())),this.tensorMap.clear(),(0,S.tidy)((()=>{const e=(0,S.unstack)(t),r=n.length,a=e.length;S.util.assert(r===a,(()=>`The number of elements doesn't match, keys has ${r} elements, the values has ${a} elements.`));for(let t=0;t<r;t++){const r=n[t],a=e[t];(0,S.keep)(a),this.tensorMap.set(r,a)}return this.handle}))}async find(e,t){this.checkKeyAndValueTensor(e,t);const n=await e.data();return(0,S.tidy)((()=>{const e=[];for(let r=0;r<n.length;r++){const a=n[r],s=this.findWithDefault(a,t);e.push(s)}return(0,S.stack)(e)}))}findWithDefault(e,t){const n=this.tensorMap.get(e);return null!=n?n:t}checkKeyAndValueTensor(e,t){if(e.dtype!==this.keyDType)throw new Error(`Expect key dtype ${this.keyDType}, but got ${e.dtype}`);if(t.dtype!==this.valueDType)throw new Error(`Expect value dtype ${this.valueDType}, but got ${t.dtype}`)}}const Fe=async(e,t,n,r)=>{switch(e.op){case"HashTable":case"HashTableV2":{const a=C("keyDType",e,t,n),s=C("valueDType",e,t,n),o=new De(a,s);return r.addHashTable(e.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const a=C("tableHandle",e,t,n,r),s=C("keys",e,t,n),o=C("values",e,t,n),i=r.getHashTableById(a.id);return[await i.import(s,o)]}case"LookupTableFind":case"LookupTableFindV2":{const a=C("tableHandle",e,t,n,r),s=C("keys",e,t,n),o=C("defaultValue",e,t,n),i=r.getHashTableById(a.id);return[await i.find(s,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const a=C("tableHandle",e,t,n,r);return[r.getHashTableById(a.id).tensorSize()]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},Be=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"ResizeBilinear":{const a=C("images",e,t,n),s=C("size",e,t,n),o=C("alignCorners",e,t,n),i=C("halfPixelCenters",e,t,n);return[r.image.resizeBilinear(a,[s[0],s[1]],o,i)]}case"ResizeNearestNeighbor":{const a=C("images",e,t,n),s=C("size",e,t,n),o=C("alignCorners",e,t,n),i=C("halfPixelCenters",e,t,n);return[r.image.resizeNearestNeighbor(a,[s[0],s[1]],o,i)]}case"CropAndResize":{const a=C("image",e,t,n),s=C("boxes",e,t,n),o=C("boxInd",e,t,n),i=C("cropSize",e,t,n),u=C("method",e,t,n),l=C("extrapolationValue",e,t,n);return[r.image.cropAndResize(a,s,o,i,u,l)]}case"ImageProjectiveTransformV3":{const a=C("images",e,t,n),s=C("transforms",e,t,n),o=C("outputShape",e,t,n),i=C("fillValue",e,t,n),u=C("interpolation",e,t,n),l=C("fillMode",e,t,n);return[r.image.transform(a,s,u.toLowerCase(),l.toLowerCase(),i,o)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},Me=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"Equal":return[r.equal(C("a",e,t,n),C("b",e,t,n))];case"NotEqual":return[r.notEqual(C("a",e,t,n),C("b",e,t,n))];case"Greater":return[r.greater(C("a",e,t,n),C("b",e,t,n))];case"GreaterEqual":return[r.greaterEqual(C("a",e,t,n),C("b",e,t,n))];case"Less":return[r.less(C("a",e,t,n),C("b",e,t,n))];case"LessEqual":return[r.lessEqual(C("a",e,t,n),C("b",e,t,n))];case"LogicalAnd":return[r.logicalAnd(C("a",e,t,n),C("b",e,t,n))];case"LogicalNot":return[r.logicalNot(C("a",e,t,n))];case"LogicalOr":return[r.logicalOr(C("a",e,t,n),C("b",e,t,n))];case"Select":case"SelectV2":return[r.where(C("condition",e,t,n),C("a",e,t,n),C("b",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},Pe=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[r.matMul(C("a",e,t,n),C("b",e,t,n),C("transposeA",e,t,n),C("transposeB",e,t,n))];case"Einsum":return[r.einsum(C("equation",e,t,n),...C("tensors",e,t,n))];case"Transpose":return[r.transpose(C("x",e,t,n),C("perm",e,t,n))];case"_FusedMatMul":const[a,s]=C("fusedOps",e,t,n),o="biasadd"===a,i="prelu"===s,u=C("numArgs",e,t,n),l=C("leakyreluAlpha",e,t,n);if(o){if(i&&2!==u)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!i&&1!==u)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[c,d]=C("args",e,t,n);return[r.fused.matMul({a:C("a",e,t,n),b:C("b",e,t,n),transposeA:C("transposeA",e,t,n),transposeB:C("transposeB",e,t,n),bias:c,activation:s,preluActivationWeights:d,leakyreluAlpha:l})];default:throw TypeError(`Node type ${e.op} is not implemented`)}},Le=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"EuclideanNorm":return[r.euclideanNorm(C("x",e,t,n),C("axis",e,t,n),C("keepDims",e,t,n))];case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[r.batchNorm(C("x",e,t,n),C("mean",e,t,n),C("variance",e,t,n),C("offset",e,t,n),C("scale",e,t,n),C("epsilon",e,t,n))];case"LRN":return[r.localResponseNormalization(C("x",e,t,n),C("radius",e,t,n),C("bias",e,t,n),C("alpha",e,t,n),C("beta",e,t,n))];case"Softmax":return[r.softmax(C("x",e,t,n))];case"LogSoftmax":return[r.logSoftmax(C("x",e,t,n))];case"SparseToDense":return[r.sparseToDense(C("sparseIndices",e,t,n),C("outputShape",e,t,n),C("sparseValues",e,t,n),C("defaultValue",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},Ve=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"Max":{const a=C("axis",e,t,n),s=C("keepDims",e,t,n);return[r.max(C("x",e,t,n),a,s)]}case"Mean":{const a=C("axis",e,t,n),s=C("keepDims",e,t,n);return[r.mean(C("x",e,t,n),a,s)]}case"Min":{const a=C("axis",e,t,n),s=C("keepDims",e,t,n);return[r.min(C("x",e,t,n),a,s)]}case"Sum":{const a=C("axis",e,t,n),s=C("keepDims",e,t,n);return[r.sum(C("x",e,t,n),a,s)]}case"All":{const a=C("axis",e,t,n),s=C("keepDims",e,t,n);return[r.all(C("x",e,t,n),a,s)]}case"Any":{const a=C("axis",e,t,n),s=C("keepDims",e,t,n);return[r.any(C("x",e,t,n),a,s)]}case"ArgMax":{const a=C("axis",e,t,n);return[r.argMax(C("x",e,t,n),a)]}case"ArgMin":{const a=C("axis",e,t,n);return[r.argMin(C("x",e,t,n),a)]}case"Prod":{const a=C("axis",e,t,n),s=C("keepDims",e,t,n);return[r.prod(C("x",e,t,n),a,s)]}case"Cumprod":{const a=C("axis",e,t,n),s=C("exclusive",e,t,n),o=C("reverse",e,t,n);return[r.cumprod(C("x",e,t,n),a,s,o)]}case"Cumsum":{const a=C("axis",e,t,n),s=C("exclusive",e,t,n),o=C("reverse",e,t,n);return[r.cumsum(C("x",e,t,n),a,s,o)]}case"Bincount":const a=C("x",e,t,n),s=C("weights",e,t,n),o=C("size",e,t,n);return[r.bincount(a,s,o)];case"DenseBincount":{const a=C("x",e,t,n),s=C("weights",e,t,n),o=C("size",e,t,n),i=C("binaryOutput",e,t,n);return[r.denseBincount(a,s,o,i)]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},ze=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"ConcatV2":case"Concat":{const a=C("n",e,t,n),s=C("axis",e,t,n);let o=C("tensors",e,t,n);return o=o.slice(0,a),[r.concat(o,s)]}case"Gather":{const a=C("x",e,t,n),s=C("indices",e,t,n);return[r.gather(a,r.cast(s,"int32"),0)]}case"GatherV2":{const a=C("axis",e,t,n),s=C("batchDims",e,t,n),o=C("x",e,t,n),i=C("indices",e,t,n);return[r.gather(o,r.cast(i,"int32"),a,s)]}case"Reverse":{const a=C("dims",e,t,n),s=[];for(let e=0;e<a.length;e++)a[e]&&s.push(e);const o=C("x",e,t,n);return[r.reverse(o,s)]}case"ReverseV2":{const a=C("axis",e,t,n),s=C("x",e,t,n);return[r.reverse(s,a)]}case"Slice":{const a=C("begin",e,t,n),s=C("size",e,t,n);return[r.slice(C("x",e,t,n),a,s)]}case"StridedSlice":{const a=C("begin",e,t,n),s=C("end",e,t,n),o=C("strides",e,t,n),i=C("beginMask",e,t,n),u=C("endMask",e,t,n),l=C("ellipsisMask",e,t,n),c=C("newAxisMask",e,t,n),d=C("shrinkAxisMask",e,t,n),p=C("x",e,t,n);return[r.stridedSlice(p,a,s,o,i,u,l,c,d)]}case"Pack":return(0,S.tidy)((()=>{const a=C("axis",e,t,n),s=C("tensors",e,t,n),o=s[0].shape,i=r.squeeze(s[0]).shape,u=s.map((e=>{const t=S.util.arraysEqual(e.shape,o);if(!t&&!S.util.arraysEqual(r.squeeze(e).shape,i))throw new Error("the input tensors shape does not match");return t?e:r.reshape(e,o)}));return[r.stack(u,a)]}));case"Unpack":{const a=C("axis",e,t,n),s=C("tensor",e,t,n);return r.unstack(s,a)}case"Tile":{const a=C("reps",e,t,n);return[r.tile(C("x",e,t,n),a)]}case"Split":case"SplitV":{const a=C("axis",e,t,n),s=C("numOrSizeSplits",e,t,n),o=C("x",e,t,n);return r.split(o,s,a)}case"ScatterNd":{const a=C("indices",e,t,n),s=C("values",e,t,n),o=C("shape",e,t,n);return[r.scatterND(a,s,o)]}case"GatherNd":{const a=C("x",e,t,n),s=C("indices",e,t,n);return[r.gatherND(a,s)]}case"SparseToDense":{const a=C("sparseIndices",e,t,n),s=C("outputShape",e,t,n),o=C("sparseValues",e,t,n),i=C("defaultValue",e,t,n);return[r.sparseToDense(a,o,s,o.dtype===i.dtype?i:r.cast(i,o.dtype))]}default:throw TypeError(`Node type ${e.op} is not implemented`)}},Ue=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"SparseFillEmptyRows":{const{outputIndices:a,outputValues:s,emptyRowIndicator:o,reverseIndexMap:i}=r.sparse.sparseFillEmptyRows(C("indices",e,t,n),C("values",e,t,n),C("denseShape",e,t,n),C("defaultValue",e,t,n));return[a,s,o,i]}case"SparseReshape":{const{outputIndices:a,outputShape:s}=r.sparse.sparseReshape(C("inputIndices",e,t,n),C("inputShape",e,t,n),C("newShape",e,t,n));return[a,s]}case"SparseSegmentMean":return[r.sparse.sparseSegmentMean(C("data",e,t,n),C("indices",e,t,n),C("segmentIds",e,t,n))];case"SparseSegmentSum":return[r.sparse.sparseSegmentSum(C("data",e,t,n),C("indices",e,t,n),C("segmentIds",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},We=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"FFT":return[r.fft(C("x",e,t,n))];case"IFFT":return[r.ifft(C("x",e,t,n))];case"RFFT":return[r.rfft(C("x",e,t,n))];case"IRFFT":return[r.irfft(C("x",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},Ge=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"StringNGrams":{const{nGrams:a,nGramsSplits:s}=r.string.stringNGrams(C("data",e,t,n),C("dataSplits",e,t,n),C("separator",e,t,n),C("nGramWidths",e,t,n),C("leftPad",e,t,n),C("rightPad",e,t,n),C("padWidth",e,t,n),C("preserveShortSequences",e,t,n));return[a,s]}case"StringSplit":{const{indices:a,values:s,shape:o}=r.string.stringSplit(C("input",e,t,n),C("delimiter",e,t,n),C("skipEmpty",e,t,n));return[a,s,o]}case"StringToHashBucketFast":return[r.string.stringToHashBucketFast(C("input",e,t,n),C("numBuckets",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}},He=function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:k;switch(e.op){case"Cast":return[r.cast(C("x",e,t,n),C("dtype",e,t,n))];case"ExpandDims":{const a=C("axis",e,t,n);return[r.expandDims(C("x",e,t,n),a)]}case"Squeeze":{const a=C("axis",e,t,n);return[r.squeeze(C("x",e,t,n),a)]}case"Reshape":return[r.reshape(C("x",e,t,n),C("shape",e,t,n))];case"MirrorPad":return[r.mirrorPad(C("x",e,t,n),C("padding",e,t,n),C("mode",e,t,n))];case"PadV2":case"Pad":return[r.pad(C("x",e,t,n),C("padding",e,t,n),C("constantValue",e,t,n))];case"SpaceToBatchND":{const a=C("blockShape",e,t,n),s=C("paddings",e,t,n);return[r.spaceToBatchND(C("x",e,t,n),a,s)]}case"BatchToSpaceND":{const a=C("blockShape",e,t,n),s=C("crops",e,t,n);return[r.batchToSpaceND(C("x",e,t,n),a,s)]}case"DepthToSpace":{const a=C("blockSize",e,t,n),s=C("dataFormat",e,t,n).toUpperCase();return[r.depthToSpace(C("x",e,t,n),a,s)]}case"BroadcastTo":return[r.broadcastTo(C("x",e,t,n),C("shape",e,t,n))];case"BroadcastArgs":return[r.broadcastArgs(C("s0",e,t,n),C("s1",e,t,n))];default:throw TypeError(`Node type ${e.op} is not implemented`)}};function qe(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:S.tidy;const s=((e,t,n)=>{switch(e.category){case"arithmetic":return a((()=>ye(e,t,n)));case"basic_math":return a((()=>xe(e,t,n)));case"control":return Te(e,t,n);case"convolution":return a((()=>$e(e,t,n)));case"creation":return a((()=>Ce(e,t,n)));case"dynamic":return _e(e,t,n);case"evaluation":return a((()=>Re(e,t,n)));case"image":return a((()=>Be(e,t,n)));case"graph":return a((()=>Ae(e,t,n)));case"logical":return a((()=>Me(e,t,n)));case"matrices":return a((()=>Pe(e,t,n)));case"normalization":return a((()=>Le(e,t,n)));case"reduction":return a((()=>Ve(e,t,n)));case"slice_join":return a((()=>ze(e,t,n)));case"sparse":return a((()=>Ue(e,t,n)));case"spectral":return a((()=>We(e,t,n)));case"string":return a((()=>Ge(e,t,n)));case"transformation":return a((()=>He(e,t,n)));case"hash_table":return Fe(e,t,n,r);case"custom":const s=$(e.op);if(s&&s.customExecutor)return s.customExecutor(new me(e,t,n));throw TypeError(`Custom op ${e.op} is not registered.`);default:throw TypeError(`Unknown op '${e.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(e,t,n);return S.util.isPromise(s)?s.then((e=>[].concat(e))):[].concat(s)}class Xe{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};this.weightMap=e,this.tensorArrayMap=t,this.tensorListMap=n,this.functionMap=r,this.rootContext={id:0,frameName:"",iterationId:0},this.contexts=[this.rootContext],this.lastId=0,this.generateCurrentContextIds()}newFrame(e,t){return{id:e,frameName:t,iterationId:0}}set currentContext(e){this.contexts!==e&&(this.contexts=e,this.generateCurrentContextIds())}get currentContext(){return this.contexts}get currentContextId(){return this._currentContextIds[0]}get currentContextIds(){return this._currentContextIds}generateCurrentContextIds(){const e=[];for(let t=0;t<this.contexts.length-1;t++){const n=this.contexts.slice(0,this.contexts.length-t);e.push(this.contextIdforContexts(n))}e.push(""),this._currentContextIds=e}contextIdforContexts(e){return e?e.map((e=>0===e.id&&0===e.iterationId?"":`${e.frameName}-${e.iterationId}`)).join("/"):""}enterFrame(e){this.contexts&&(this.lastId++,this.contexts=this.contexts.slice(),this.contexts.push(this.newFrame(this.lastId,e)),this._currentContextIds.unshift(this.contextIdforContexts(this.contexts)))}exitFrame(){if(!(this.contexts&&this.contexts.length>1))throw new Error("Cannot exit frame, the context is empty");this.contexts=this.contexts.slice(),this.contexts.splice(-1),this.currentContextIds.shift()}nextIteration(){if(!(this.contexts&&this.contexts.length>0))throw new Error("Cannot increase frame iteration, the context is empty");{this.contexts=this.contexts.slice(),this.lastId++;const e=Object.assign({},this.contexts[this.contexts.length-1]);e.iterationId+=1,e.id=this.lastId,this.contexts.splice(-1,1,e),this._currentContextIds.splice(0,1,this.contextIdforContexts(this.contexts))}}getWeight(e){return this.weightMap[e]}addTensorArray(e){this.tensorArrayMap[e.id]=e}getTensorArray(e){return this.tensorArrayMap[e]}addTensorList(e){this.tensorListMap[e.id]=e}getTensorList(e){return this.tensorListMap[e]}dispose(e){for(const t in this.tensorArrayMap)this.tensorArrayMap[t].clearAndClose(e);for(const t in this.tensorListMap)this.tensorListMap[t].clearAndClose(e)}}function Ke(e,t,n,r){const a=new Set,s=[];let o=null,i=null;const u=new Set,l=Object.keys(e).map((e=>A(e)[0]));let c=[];null!=r&&(c=r.map((e=>A(e.name)[0])));const d=[...t];for(;d.length>0;){const e=d.pop();(Ze(e)||Je(e)||et(e))&&null==o&&(o=e,i=o.children.map((e=>e.name)).filter((e=>a.has(e)))),a.add(e.name),null==n[e.name]&&(-1===l.indexOf(e.name)&&-1===c.indexOf(e.name)&&(0!==e.inputs.length?e.inputs.forEach((e=>{u.has(e.name)||(u.add(e.name),d.push(e))})):s.push(e.name)))}return{inputs:e,outputs:t,usedNodes:a,missingInputs:s,dynamicNode:o,syncInputs:i}}const je=["Switch","Merge","Enter","Exit","NextIteration","StatelessIf","StatelessWhile","if","While"],Ye=["NonMaxSuppressionV2","NonMaxSuppressionV3","NonMaxSuppressionV5","Where"],Qe=["HashTable","HashTableV2","LookupTableImport","LookupTableImportV2","LookupTableFind","LookupTableFindV2","LookupTableSize","LookupTableSizeV2"];function Ze(e){return je.indexOf(e.op)>=0}function Je(e){return Ye.indexOf(e.op)>=0}function et(e){return Qe.indexOf(e.op)>=0}class tt{constructor(e,t){this.graph=e,this.parent=t,this.compiledMap=new Map,this._weightMap={},this.SEPERATOR=",",this._functions={},this._functionExecutorMap={},this.intermediateTensors={},this.keepTensorForDebug=!1,this._outputs=e.outputs,this._inputs=e.inputs,this._initNodes=e.initNodes,this._signature=e.signature,this._functions=e.functions,null!=e.functions&&Object.keys(e.functions).forEach((t=>{this._functionExecutorMap[t]=new tt(e.functions[t],this)}))}get weightIds(){return this.parent?this.parent.weightIds:this._weightIds}get functionExecutorMap(){return this.parent?this.parent.functionExecutorMap:this._functionExecutorMap}get weightMap(){return this.parent?this.parent.weightMap:this._weightMap}set weightMap(e){const t=Object.keys(e).map((t=>e[t].map((e=>e.id))));this._weightIds=[].concat(...t),this._weightMap=e}set resourceManager(e){this._resourceManager=e}get inputs(){return this._inputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get outputs(){return this._outputs.map((e=>({name:e.name,shape:e.attrParams.shape?e.attrParams.shape.value:void 0,dtype:e.attrParams.dtype?e.attrParams.dtype.value:void 0})))}get inputNodes(){return this._inputs.map((e=>e.signatureKey||e.name))}get outputNodes(){return this._outputs.map((e=>{const t=e.signatureKey||e.name;return e.defaultOutput?`${t}:${e.defaultOutput}`:t}))}get functions(){return Object.keys(this._functions).reduce(((e,t)=>(e[t]=this._functions[t].signature,e)),{})}getCompilationKey(e,t){const n=e.map((e=>e.name)).sort(),r=t.map((e=>e.name)).sort();return n.join(this.SEPERATOR)+"--"+r.join(this.SEPERATOR)}compile(e,t){const n=Ke(e,t,this.weightMap,this._initNodes),{missingInputs:r,dynamicNode:a,syncInputs:s}=n;if(null!=a)throw new Error(`This execution contains the node '${a.name}', which has the dynamic op '${a.op}'. Please use model.executeAsync() instead. Alternatively, to avoid the dynamic ops, specify the inputs [${s}]`);if(r.length>0){const n=t.map((e=>e.name)),a=Object.keys(e);throw new Error(`Cannot compute the outputs [${n}] from the provided inputs [${a}]. Missing the following inputs: [${r}]`)}return function(e,t,n){const{usedNodes:r,inputs:a}=n,s=[],o=Object.keys(a).map((e=>A(e)[0])).map((t=>e.nodes[t])),i=e.initNodes;o.forEach((e=>{r.has(e.name)&&s.push(e)})),e.weights.forEach((e=>{r.has(e.name)&&s.push(e)})),null!=i&&i.forEach((e=>{r.has(e.name)&&s.push(e)}));const u=new Set,l=[];for(;s.length>0;){const e=s.pop();u.add(e.name),t[e.name]||l.push(e),e.children.forEach((e=>{!u.has(e.name)&&r.has(e.name)&&e.inputs.every((e=>u.has(e.name)))&&s.push(e)}))}return l}(this.graph,this.weightMap,n)}execute(e,t){e=this.mapInputs(e);const n=Object.keys(e).sort();this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t);const r=n.map((e=>this.graph.nodes[A(e)[0]])),a=t.map((e=>A(e)[0]));let s=a.map((e=>this.graph.nodes[e]));this.resetIntermediateTensors(),0===s.length&&(s=this._outputs);const o=this.getCompilationKey(r,s);let i=this.compiledMap.get(o);null==i&&(i=this.compile(e,s),this.compiledMap.set(o,i));const u={},l={};return(0,S.tidy)((()=>{const n=new Xe(this.weightMap,u,l,this.functionExecutorMap),r=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,a]=A(t),s=[];s[a]=e[t],r[n]=s}));const s=this.getFrozenTensorIds(r),o={};for(let e=0;e<i.length;e++){const t=i[e];if(!r[t.name]){const e=qe(t,r,n,this._resourceManager);if(S.util.isPromise(e))throw new Error(`The execution of the op '${t.op}' returned a promise. Please use model.executeAsync() instead.`);r[t.name]=e,this.checkTensorForDisposal(t.name,t,r,n,s,a,o)}}return null==this.parent&&n.dispose(s),t.map((e=>E(e,r,n)))}))}getFrozenTensorIds(e){const t=[].concat.apply([],Object.keys(e).map((t=>e[t])).map((e=>e.map((e=>e.id)))));return new Set(t)}checkTensorForDisposal(e,t,n,r,a,s,o){"control"!==t.category&&-1===s.indexOf(e)&&(n[e].forEach((e=>{null!=e&&(o[e.id]=(o[e.id]||0)+t.children.length)})),t.inputs.forEach((e=>{if("control"!==e.category){const s=function(e,t,n){return t[R(e,n.currentContextId)]}(e.name,n,r);null!=s&&s.forEach((e=>{if(e&&!e.kept&&!a.has(e.id)){const n=o[e.id];if(1===n){if(this.keepTensorForDebug){const[n,a]=_(t.name,r);this.intermediateTensors[n]||(this.intermediateTensors[n]=[]),this.intermediateTensors[n][a]=e}else e.dispose();delete o[e.id]}else null!=n&&o[e.id]--}}))}})))}async executeAsync(e,t){return this._executeAsync(e,t)}disposeIntermediateTensors(){this.intermediateTensors&&(Object.keys(this.intermediateTensors).forEach((e=>this.intermediateTensors[e].forEach((e=>e.dispose())))),this.disposeTensorsMap())}disposeTensorsMap(){this.tensorsMap&&Object.keys(this.tensorsMap).forEach((e=>{this.tensorsMap[e].forEach((e=>{!e||e.kept||e.isDisposed||this.keepIds.has(e.id)||e.dispose()}))}))}getIntermediateTensors(){return this.tensorsMap}resetIntermediateTensors(){for(const e in this.intermediateTensors)this.intermediateTensors[e].forEach((e=>e.dispose())),delete this.intermediateTensors[e]}async _executeAsync(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{};n||(e=this.mapInputs(e),this.checkInputs(e),this.checkInputShapeAndType(e),t=this.mapOutputs(t),this.checkOutputs(t));try{this.keepTensorForDebug=(0,S.env)().getBool("KEEP_INTERMEDIATE_TENSORS")}catch(l){console.warn(l.message)}this.resetIntermediateTensors();const s=new Xe(this.weightMap,r,a,this.functionExecutorMap);this.tensorsMap=await this.executeWithControlFlow(e,s,t,n);const o=t.map((e=>E(e,this.tensorsMap,s))),i=o.map((e=>e.id)),u=Object.keys(e).map((t=>e[t].id));return this.keepIds=new Set([...i,...u,...this.weightIds]),this.keepTensorForDebug||this.disposeTensorsMap(),null==this.parent&&s.dispose(this.keepIds),o}async executeFunctionAsync(e,t,n){const r=e.reduce(((e,t,n)=>(e[this.inputs[n].name]=t,e)),{});return this._executeAsync(r,this.outputNodes,!0,t,n)}async executeWithControlFlow(e,t,n,r){const a=Object.keys(e),s=a.map((e=>this.graph.nodes[A(e)[0]])),o=n.map((e=>A(e)[0]));let i=o.map((e=>this.graph.nodes[e]));0===i.length&&(i=this._outputs);const{usedNodes:u,missingInputs:l,dynamicNode:c,syncInputs:d}=Ke(e,i,this.weightMap,this._initNodes),p=[...s,...this.graph.weights,...this._initNodes||[]].map((e=>({node:e,contexts:t.currentContext}))),h=Object.assign({},this.weightMap);Object.keys(e).forEach((t=>{const[n,r]=A(t),a=[];a[r]=e[t],h[n]=a}));const f={},m=this.getFrozenTensorIds(h),g={};for(;p.length>0;){const e=this.processStack(s,p,t,h,g,m,o,f,u);await Promise.all(e)}null!=c||r||console.warn("This model execution did not contain any nodes with control flow or dynamic output shapes. You can use model.execute() instead.");const y=i.filter((e=>!Ze(e)&&!E(e.name,h,t))).map((e=>e.name));if(y.length>0){let e="";throw null!=c&&(e=`Alternatively, to avoid the dynamic ops, use model.execute() and specify the inputs [${d}]`),new Error(`Cannot compute the outputs [${y}] from the provided inputs [${a}]. Consider providing the following inputs: [${l}]. ${e}`)}return h}processStack(e,t,n,r,a,s,o,i,u){const l=[];for(;t.length>0;){const e=t.pop();n.currentContext=e.contexts;let c="";if("Enter"===e.node.op&&C("isConstant",e.node,r,n)&&([c]=_(e.node.name,n)),null==r[e.node.name]){const d=qe(e.node,r,n,this._resourceManager);c||([c]=_(e.node.name,n));const p=n.currentContext;S.util.isPromise(d)?l.push(d.then((l=>(r[c]=l,n.currentContext=p,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u),l)))):(r[c]=d,this.checkTensorForDisposal(c,e.node,r,n,s,o,i),this.processChildNodes(e.node,t,n,r,a,u))}else this.processChildNodes(e.node,t,n,r,a,u)}return l}processChildNodes(e,t,n,r,a,s){e.children.forEach((e=>{const[o]=_(e.name,n);!a[o]&&s.has(e.name)&&("Merge"===e.op?e.inputNames.some((e=>!!E(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})):e.inputNames.every((e=>!!E(e,r,n)))&&(a[o]=!0,t.push({contexts:n.currentContext,node:e})))}))}dispose(){Object.keys(this.weightMap).forEach((e=>this.weightMap[e].forEach((e=>e.dispose()))))}checkInputShapeAndType(e){Object.keys(e).forEach((t=>{const n=e[t],[r]=A(t),a=this.graph.nodes[r];if(a.attrParams.shape&&a.attrParams.shape.value){const e=a.attrParams.shape.value,t=e.length===n.shape.length&&n.shape.every(((t,n)=>-1===e[n]||e[n]===t));S.util.assert(t,(()=>`The shape of dict['${a.name}'] provided in model.execute(dict) must be [${e}], but was [${n.shape}]`))}a.attrParams.dtype&&a.attrParams.dtype.value&&S.util.assert(n.dtype===a.attrParams.dtype.value,(()=>`The dtype of dict['${a.name}'] provided in model.execute(dict) must be ${a.attrParams.dtype.value}, but was ${n.dtype}`))}))}mapInputs(e){const t={};for(const n in e)if(null!=this._signature&&null!=this._signature.inputs&&null!=this._signature.inputs[n]){t[this._signature.inputs[n].name]=e[n]}else t[n]=e[n];return t}checkInputs(e){const t=Object.keys(e).filter((e=>{const[t]=A(e);return null==this.graph.nodes[t]}));if(t.length>0)throw new Error(`The dict provided in model.execute(dict) has keys: [${t}] that are not part of graph`)}mapOutputs(e){return e.map((e=>{if(null!=this._signature&&null!=this._signature.outputs&&null!=this._signature.outputs[e]){return this._signature.outputs[e].name}return e}),{})}checkOutputs(e){e.forEach((e=>{const[t]=A(e);if(!this.graph.nodes[t])throw new Error(`The output '${e}' is not found in the graph`)}))}}class nt{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.hashTableNameToHandle=e,this.hashTableMap=t}addHashTable(e,t){this.hashTableNameToHandle[e]=t.handle,this.hashTableMap[t.id]=t}getHashTableHandleByName(e){return this.hashTableNameToHandle[e]}getHashTableById(e){return this.hashTableMap[e]}dispose(){for(const e in this.hashTableMap)this.hashTableMap[e].clearAndClose(),delete this.hashTableMap[e];for(const e in this.hashTableNameToHandle)this.hashTableNameToHandle[e].dispose(),delete this.hashTableNameToHandle[e]}}class rt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:S.io;this.modelUrl=e,this.loadOptions=t,this.version="n/a",this.io=n,null==t&&(this.loadOptions={}),this.resourceManager=new nt}get modelVersion(){return this.version}get inputNodes(){return this.executor.inputNodes}get outputNodes(){return this.executor.outputNodes}get inputs(){return this.executor.inputs}get outputs(){return this.executor.outputs}get weights(){return this.executor.weightMap}get metadata(){return this.artifacts.userDefinedMetadata}get modelSignature(){return this.signature}get modelStructuredOutputKeys(){return this.structuredOutputKeys}findIOHandler(){const e=this.modelUrl;if(null!=e.load)this.handler=e;else if(null!=this.loadOptions.requestInit)this.handler=this.io.browserHTTPRequest(e,this.loadOptions);else{const t=this.io.getLoadHandlers(e,this.loadOptions);if(0===t.length)t.push(this.io.browserHTTPRequest(e,this.loadOptions));else if(t.length>1)throw new Error(`Found more than one (${t.length}) load handlers for URL '${[e]}'`);this.handler=t[0]}}load(){if(this.findIOHandler(),null==this.handler.load)throw new Error("Cannot proceed with model loading because the IOHandler provided does not have the `load` method implemented.");const e=this.handler.load();return S.util.isPromise(e)?e.then((e=>this.loadSync(e))):this.loadSync(e)}loadSync(e){this.artifacts=e;const t=this.artifacts.modelTopology;let n=this.artifacts.signature;if(null!=this.artifacts.userDefinedMetadata){const e=this.artifacts.userDefinedMetadata;null!=e.signature&&(n=e.signature),null!=e.structuredOutputKeys&&(this.structuredOutputKeys=e.structuredOutputKeys)}this.signature=n,this.version=`${t.versions.producer}.${t.versions.minConsumer}`;const r=this.io.decodeWeights(this.artifacts.weightData,this.artifacts.weightSpecs);if(this.executor=new tt(ee.Instance.transformGraph(t,this.signature)),this.executor.weightMap=this.convertTensorMapToTensorsMap(r),this.executor.resourceManager=this.resourceManager,null!=e.modelInitializer&&null!=e.modelInitializer.node){const t=ee.Instance.transformGraph(e.modelInitializer);this.initializer=new tt(t),this.initializer.weightMap=this.executor.weightMap,this.initializer.resourceManager=this.resourceManager,this.initializer.executeAsync({},[])}return!0}async save(e,t){if("string"===typeof e){const t=this.io.getSaveHandlers(e);if(0===t.length)throw new Error(`Cannot find any save handlers for URL '${e}'`);if(t.length>1)throw new Error(`Found more than one (${t.length}) save handlers for URL '${e}'`);e=t[0]}if(null==e.save)throw new Error("GraphModel.save() cannot proceed because the IOHandler provided does not have the `save` attribute defined.");return e.save(this.artifacts)}predict(e,t){const n=this.execute(e,this.outputNodes);if(this.structuredOutputKeys){const e=n instanceof S.Tensor?[n]:n,t={};return e.forEach(((e,n)=>t[this.structuredOutputKeys[n]]=e)),t}return n}normalizeInputs(e){if(!(e instanceof S.Tensor)&&!Array.isArray(e))return e;if((e=Array.isArray(e)?e:[e]).length!==this.inputNodes.length)throw new Error(`Input tensor count mismatch,the graph model has ${this.inputNodes.length} placeholders, while there are ${e.length} input tensors.`);return this.inputNodes.reduce(((t,n,r)=>(t[n]=e[r],t)),{})}normalizeOutputs(e){return e=e||this.outputNodes,Array.isArray(e)?e:[e]}execute(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=this.executor.execute(e,t);return n.length>1?n:n[0]}async executeAsync(e,t){e=this.normalizeInputs(e),t=this.normalizeOutputs(t);const n=await this.executor.executeAsync(e,t);return n.length>1?n:n[0]}getIntermediateTensors(){return this.executor.getIntermediateTensors()}disposeIntermediateTensors(){this.executor.disposeIntermediateTensors()}convertTensorMapToTensorsMap(e){return Object.keys(e).reduce(((t,n)=>(t[n]=[e[n]],t)),{})}dispose(){this.executor.dispose(),this.initializer&&this.initializer.dispose(),this.resourceManager.dispose()}}async function at(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:S.io;if(null==e)throw new Error("modelUrl in loadGraphModel() cannot be null. Please provide a url or an IOHandler that loads the model");null==t&&(t={}),t.fromTFHub&&"string"===typeof e&&(e=st(e));const r=new rt(e,t,n);return await r.load(),r}function st(e){return e.endsWith("/")||(e+="/"),`${e}model.json?tfjs-format=file`}},6232:(e,t,n)=>{"use strict";n.d(t,{JL:()=>r,Zu:()=>a});class r{constructor(e,t){this.backend=e,this.dataMover=t,this.data=new WeakMap,this.dataIdsCount=0}get(e){return this.data.has(e)||this.dataMover.moveData(this.backend,e),this.data.get(e)}set(e,t){this.dataIdsCount++,this.data.set(e,t)}has(e){return this.data.has(e)}delete(e){return this.dataIdsCount--,this.data.delete(e)}numDataIds(){return this.dataIdsCount}}class a{refCount(e){return s("refCount")}incRef(e){return s("incRef")}timerAvailable(){return!0}time(e){return s("time")}read(e){return s("read")}readSync(e){return s("readSync")}readToGPU(e,t){return s("readToGPU")}numDataIds(){return s("numDataIds")}disposeData(e,t){return s("disposeData")}write(e,t,n){return s("write")}move(e,t,n,r,a){return s("move")}memory(){return s("memory")}floatPrecision(){return s("floatPrecision")}epsilon(){return 32===this.floatPrecision()?1e-7:1e-4}dispose(){return s("dispose")}}function s(e){throw new Error(`'${e}' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen`)}},3036:(e,t,n)=>{"use strict";function r(e,t,n){const r=function(e,t,n){return function(e,t,n){let r=0,a=e.length,s=0,o=!1;for(;r<a;){s=r+(a-r>>>1);const i=n(t,e[s]);i>0?r=s+1:(a=s,o=!i)}return o?r:-r-1}(e,t,n||a)}(e,t,n),s=r<0?-(r+1):r;e.splice(s,0,t)}function a(e,t){return e>t?1:e<t?-1:0}function s(e,t,n,r,a){return u(e,t,n,r,a,0)}function o(e,t,n,r,a,s){return u(e,t,n,r,a,0,!1,s,!0)}function i(e,t,n,r,a,s){return u(e,t,n,r,a,s,!0)}function u(e,t,n,a,s,o){let i=arguments.length>6&&void 0!==arguments[6]&&arguments[6],u=arguments.length>7&&void 0!==arguments[7]&&arguments[7],p=arguments.length>8&&void 0!==arguments[8]&&arguments[8];const h=[];for(let r=0;r<t.length;r++)t[r]>s&&h.push({score:t[r],boxIndex:r,suppressBeginIndex:0});h.sort(d);const f=o>0?-.5/o:0,m=[],g=[];for(;m.length<n&&h.length>0;){const t=h.pop(),{score:n,boxIndex:o,suppressBeginIndex:i}=t;if(n<s)break;let u=!1;for(let r=m.length-1;r>=i;--r){const n=l(e,o,m[r]);if(n>=a){u=!0;break}if(t.score=t.score*c(a,f,n),t.score<=s)break}t.suppressBeginIndex=m.length,u||(t.score===n?(m.push(o),g.push(t.score)):t.score>s&&r(h,t,d))}const y=m.length,x=n-y;u&&x>0&&(m.push(...new Array(x).fill(0)),g.push(...new Array(x).fill(0)));const b={selectedIndices:m};return i&&(b.selectedScores=g),p&&(b.validOutputs=y),b}function l(e,t,n){const r=e.subarray(4*t,4*t+4),a=e.subarray(4*n,4*n+4),s=Math.min(r[0],r[2]),o=Math.min(r[1],r[3]),i=Math.max(r[0],r[2]),u=Math.max(r[1],r[3]),l=Math.min(a[0],a[2]),c=Math.min(a[1],a[3]),d=Math.max(a[0],a[2]),p=Math.max(a[1],a[3]),h=(i-s)*(u-o),f=(d-l)*(p-c);if(h<=0||f<=0)return 0;const m=Math.max(s,l),g=Math.max(o,c),y=Math.min(i,d),x=Math.min(u,p),b=Math.max(y-m,0)*Math.max(x-g,0);return b/(h+f-b)}function c(e,t,n){const r=Math.exp(t*n*n);return n<=e?r:0}function d(e,t){return e.score-t.score||e.score===t.score&&t.boxIndex-e.boxIndex}n.d(t,{GP:()=>s,qP:()=>o,pA:()=>i})},6791:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a});var r=n(3332);function a(e,t){const n=[];for(let r=0;r<t.length;r++)t[r]&&n.push(r);const a=(0,r.f)(e,"int32"),s=(0,r.f)([n.length,e.length],"int32");for(let r=0;r<n.length;r++){const t=a.indexToLoc(n[r]),o=r*e.length;s.values.set(t,o)}return s.toTensor()}},16:(e,t,n)=>{"use strict";n.d(t,{BV:()=>v,wv:()=>b});var r=n(6232),a=n(1283),s=n(1903),o=n(8994),i=n(6137),u=n(4146),l=n(7240),c=n(7258);class d{constructor(e,t){this.backendTimer=e,this.logger=t,null==t&&(this.logger=new h)}profileKernel(e,t,n){let r;const s=()=>{r=n()};let o;const i=l.now();if(this.backendTimer.timerAvailable())o=this.backendTimer.time(s);else{s();for(const e of r)e.dataSync();o=Promise.resolve({kernelMs:l.now()-i})}if((0,a.OB)().getBool("CHECK_COMPUTATION_FOR_ERRORS"))for(let a=0;a<r.length;a++){const t=r[a];t.data().then((n=>{p(n,t.dtype,e)}))}return{kernelName:e,outputs:r,inputs:t,timeMs:o.then((e=>e.kernelMs)),extraInfo:o.then((e=>null!=e.getExtraProfileInfo?e.getExtraProfileInfo():""))}}logKernelProfile(e){const{kernelName:t,outputs:n,timeMs:r,inputs:a,extraInfo:s}=e;n.forEach((e=>{Promise.all([e.data(),r,s]).then((n=>{this.logger.logKernelProfile(t,e,n[0],n[1],a,n[2])}))}))}}function p(e,t,n){if("float32"!==t)return!1;for(let r=0;r<e.length;r++){const t=e[r];if(isNaN(t)||!isFinite(t))return console.warn(`Found ${t} in the result of '${n}'`),!0}return!1}class h{logKernelProfile(e,t,n,r,a,s){const o="number"===typeof r?c.oj(`${r}ms`,9):r.error,i=c.oj(e,25),u=t.rank,l=t.size,d=c.oj(t.shape.toString(),14);let p="";for(const c in a){const e=a[c];if(null!=e){const n=e.shape||t.shape,r=n.length;p+=`${c}: ${r}D ${r>0?n:""} `}}console.log(`%c${i}\t%c${o}\t%c${u}D ${d}\t%c${l}\t%c${p}\t%c${s}`,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")}}var f=n(5426),m=n(9337);function g(e){return null!=e.kernelName}class y{constructor(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null,get kernelNames(){return Array.from(new Set(this.kernels.map((e=>e.name))))}}}dispose(){for(const e in this.registeredVariables)this.registeredVariables[e].dispose()}}class x{constructor(e){this.ENV=e,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new y}async ready(){if(null!=this.pendingBackendInit)return this.pendingBackendInit.then((()=>{}));if(null!=this.backendInstance)return;const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t];if(await this.initializeBackend(n).success)return void await this.setBackend(n)}throw new Error("Could not initialize any backends, all backend initializations failed.")}get backend(){if(null!=this.pendingBackendInit)throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);if(null==this.backendInstance){const{name:e,asyncInit:t}=this.initializeBackendsAndReturnBest();if(t)throw new Error(`The highest priority backend '${e}' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods`);this.setBackend(e)}return this.backendInstance}backendNames(){return Object.keys(this.registryFactory)}findBackend(e){if(!(e in this.registry)){if(!(e in this.registryFactory))return null;{const{asyncInit:t}=this.initializeBackend(e);if(t)return null}}return this.registry[e]}findBackendFactory(e){return e in this.registryFactory?this.registryFactory[e].factory:null}registerBackend(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return e in this.registryFactory?(u.Z(`${e} backend was already registered. Reusing existing backend factory.`),!1):(this.registryFactory[e]={factory:t,priority:n},!0)}async setBackend(e){if(null==this.registryFactory[e])throw new Error(`Backend name '${e}' not found in registry`);if(this.backendName=e,null==this.registry[e]){this.backendInstance=null;const{success:t,asyncInit:n}=this.initializeBackend(e);if(!(n?await t:t))return!1}return this.backendInstance=this.registry[e],this.setupRegisteredKernels(),this.profiler=new d(this.backendInstance),!0}setupRegisteredKernels(){(0,i.tr)(this.backendName).forEach((e=>{null!=e.setupFunc&&e.setupFunc(this.backendInstance)}))}disposeRegisteredKernels(e){(0,i.tr)(e).forEach((t=>{null!=t.disposeFunc&&t.disposeFunc(this.registry[e])}))}initializeBackend(e){const t=this.registryFactory[e];if(null==t)throw new Error(`Cannot initialize backend ${e}, no registration found.`);try{const n=t.factory();if(!n||n instanceof r.Zu||"function"!==typeof n.then)return this.registry[e]=n,{success:!0,asyncInit:!1};{const t=++this.pendingBackendInitId,r=n.then((n=>!(t<this.pendingBackendInitId)&&(this.registry[e]=n,this.pendingBackendInit=null,!0))).catch((n=>(t<this.pendingBackendInitId||(this.pendingBackendInit=null,u.Z(`Initialization of backend ${e} failed`),u.Z(n.stack||n.message)),!1)));return this.pendingBackendInit=r,{success:r,asyncInit:!0}}}catch(n){return u.Z(`Initialization of backend ${e} failed`),u.Z(n.stack||n.message),{success:!1,asyncInit:!1}}}removeBackend(e){if(!(e in this.registryFactory))throw new Error(`${e} backend not found in registry`);this.backendName===e&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,e in this.registry&&(this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e]),delete this.registryFactory[e],this.backendName===e&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)}getSortedBackends(){if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort(((e,t)=>this.registryFactory[t].priority-this.registryFactory[e].priority))}initializeBackendsAndReturnBest(){const e=this.getSortedBackends();for(let t=0;t<e.length;t++){const n=e[t],{success:r,asyncInit:a}=this.initializeBackend(n);if(a||r)return{name:n,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")}moveData(e,t){const n=this.state.tensorInfo.get(t),r=n.backend,a=this.readSync(t),s=r.refCount(t);r.disposeData(t,!0),n.backend=e,e.move(t,a,n.shape,n.dtype,s),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++}tidy(e,t){let n,r=null;if(null==t){if("function"!==typeof e)throw new Error("Please provide a function to tidy()");t=e}else{if("string"!==typeof e&&!(e instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!==typeof t)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");r=e}return this.scopedRun((()=>this.startScope(r)),(()=>this.endScope(n)),(()=>(n=t(),n instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),n)))}scopedRun(e,t,n){e();try{const e=n();return t(),e}catch(r){throw t(),r}}nextTensorId(){return x.nextTensorId++}nextVariableId(){return x.nextVariableId++}clone(e){const t=v.runKernel(o.iJ,{x:e}),n={x:e};return this.addTapeNode(this.state.activeScope.name,n,[t],(e=>({x:()=>{const t={x:e},n={dtype:"float32"};return v.runKernel(o.RF,t,n)}})),[],{}),t}runKernel(e,t,n){null==this.backendName&&this.backend;if(!(null!=(0,i.pI)(e,this.backendName)))throw new Error(`Kernel '${e}' not registered for backend '${this.backendName}'`);return this.runKernelFunc({kernelName:e,inputs:t,attrs:n})}shouldCheckForMemLeaks(){return this.ENV.getBool("IS_TEST")}checkKernelForMemLeak(e,t,n){const r=this.backend.numDataIds();let a=0;n.forEach((e=>{a+="complex64"===e.dtype?3:1}));const s=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],o=r-t-a-s;if(o>0)throw new Error(`Backend '${this.backendName}' has an internal memory leak (${o} data ids) after running '${e}'`)}runKernelFunc(e){let t,n=[];const r=this.isTapeOn(),a=this.state.numBytes,s=this.state.numTensors;let o,u;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0),null==this.backendName&&this.backend;const l=g(e)?e.kernelName:null!=this.state.activeScope?this.state.activeScope.name:"";if(g(e)){const{kernelName:t,inputs:a,attrs:s}=e;null==this.backendName&&this.backend;const l=(0,i.pI)(t,this.backendName);c.hu(null!=l,(()=>`Cannot find registered kernel '${t}' for backend '${this.backendName}'`)),o=()=>{const e=this.backend.numDataIds();u=l.kernelFunc({inputs:a,attrs:s,backend:this.backend});const o=Array.isArray(u)?u:[u];this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(t,e,o);const i=o.map((e=>null!=e.rank?e:this.makeTensorFromTensorInfo(e)));if(r){const e=this.getTensorsForGradient(t,a,i);n=this.saveTensorsForBackwardMode(e)}return i}}else{const{forwardFunc:t}=e,a=e=>{r&&(n=e.map((e=>this.keep(this.clone(e)))))};o=()=>{const e=this.backend.numDataIds();u=this.tidy((()=>t(this.backend,a)));const n=Array.isArray(u)?u:[u];return this.shouldCheckForMemLeaks()&&this.checkKernelForMemLeak(l,e,n),n}}const{inputs:d,attrs:p}=e,h=g(e)?null:e.backwardsFunc;let f;return this.scopedRun((()=>this.state.kernelDepth++),(()=>this.state.kernelDepth--),(()=>{this.ENV.getBool("DEBUG")||this.state.profiling?(f=this.profiler.profileKernel(l,d,(()=>o())),this.ENV.getBool("DEBUG")&&this.profiler.logKernelProfile(f),t=f.outputs):t=o()})),r&&this.addTapeNode(l,d,t,h,n,p),this.state.profiling&&this.state.activeProfile.kernels.push({name:l,bytesAdded:this.state.numBytes-a,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-s,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(d).map((e=>null!=d[e]?d[e].shape:null)),outputShapes:t.map((e=>e.shape)),kernelTimeMs:f.timeMs,extraInfo:f.extraInfo}),Array.isArray(u)?t:t[0]}saveTensorsForBackwardMode(e){const t=e.map((e=>this.keep(this.clone(e))));return t}getTensorsForGradient(e,t,n){const r=(0,i.uk)(e);if(null!=r){const e=r.inputsToSave||[],a=r.outputsToSave||[];let s;r.saveAllInputs?(c.hu(Array.isArray(t),(()=>"saveAllInputs is true, expected inputs to be an array.")),s=Object.keys(t).map((e=>t[e]))):s=e.map((e=>t[e]));const o=n.filter(((e,t)=>a[t]));return s.concat(o)}return[]}makeTensor(e,t,n,r){if(null==e)throw new Error("Values passed to engine.makeTensor() are null");n=n||"float32",r=r||this.backend;let a=e;"string"===n&&c.HD(e[0])&&(a=e.map((e=>l.encodeString(e))));const s=r.write(a,t,n),o=new f.es(t,n,s,this.nextTensorId());if(this.trackTensor(o,r),"string"===n){const e=this.state.tensorInfo.get(s),t=(0,c.Ub)(a);this.state.numBytes+=t-e.bytes,e.bytes=t}return o}makeTensorFromDataId(e,t,n,r){const a={dataId:e,shape:t,dtype:n=n||"float32"};return this.makeTensorFromTensorInfo(a,r)}makeTensorFromTensorInfo(e,t){const{dataId:n,shape:r,dtype:a}=e,s=new f.es(r,a,n,this.nextTensorId());return this.trackTensor(s,t),s}makeVariable(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;n=n||this.nextVariableId().toString(),null!=r&&r!==e.dtype&&(e=e.cast(r));const a=new f._w(e,t,n,this.nextTensorId());if(null!=this.state.registeredVariables[a.name])throw new Error(`Variable with name ${a.name} was already registered`);return this.state.registeredVariables[a.name]=a,this.incRef(a,this.backend),a}trackTensor(e,t){this.state.numTensors++,"string"===e.dtype&&this.state.numStringTensors++;let n=0;"complex64"!==e.dtype&&"string"!==e.dtype&&(n=e.size*c.bT(e.dtype)),this.state.numBytes+=n,this.state.tensorInfo.has(e.dataId)||(this.state.numDataBuffers++,this.state.tensorInfo.set(e.dataId,{backend:t||this.backend,dtype:e.dtype,shape:e.shape,bytes:n})),e instanceof f._w||this.track(e)}incRef(e,t){this.trackTensor(e,t),this.backend.incRef(e.dataId)}removeDataId(e,t){this.state.tensorInfo.has(e)&&this.state.tensorInfo.get(e).backend===t&&(this.state.tensorInfo.delete(e),this.state.numDataBuffers--)}disposeTensor(e){if(!this.state.tensorInfo.has(e.dataId))return;const t=this.state.tensorInfo.get(e.dataId);if(this.state.numTensors--,"string"===e.dtype&&(this.state.numStringTensors--,this.state.numBytes-=t.bytes),"complex64"!==e.dtype&&"string"!==e.dtype){const t=e.size*c.bT(e.dtype);this.state.numBytes-=t}t.backend.disposeData(e.dataId)&&this.removeDataId(e.dataId,t.backend)}disposeVariables(){for(const e in this.state.registeredVariables){const t=this.state.registeredVariables[e];this.disposeVariable(t)}}disposeVariable(e){this.disposeTensor(e),null!=this.state.registeredVariables[e.name]&&delete this.state.registeredVariables[e.name]}memory(){const e=this.backend.memory();return e.numTensors=this.state.numTensors,e.numDataBuffers=this.state.numDataBuffers,e.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(e.unreliable=!0,null==e.reasons&&(e.reasons=[]),e.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),e}async profile(e){this.state.profiling=!0;const t=this.state.numBytes,n=this.state.numTensors;this.state.activeProfile.kernels=[],this.state.activeProfile.result=await e(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max(...this.state.activeProfile.kernels.map((e=>e.totalBytesSnapshot))),this.state.activeProfile.newBytes=this.state.numBytes-t,this.state.activeProfile.newTensors=this.state.numTensors-n;for(const r of this.state.activeProfile.kernels)r.kernelTimeMs=await r.kernelTimeMs,r.extraInfo=await r.extraInfo;return this.state.activeProfile}isTapeOn(){return this.state.gradientDepth>0&&0===this.state.kernelDepth}addTapeNode(e,t,n,r,a,s){const o={id:this.state.nextTapeNodeId++,kernelName:e,inputs:t,outputs:n,saved:a},u=(0,i.uk)(e);null!=u&&(r=u.gradFunc),null!=r&&(o.gradient=e=>(e=e.map(((e,t)=>{if(null==e){const e=n[t],r=c.wT(e.size,e.dtype);return this.makeTensor(r,e.shape,e.dtype)}return e})),r(e.length>1?e:e[0],a,s))),this.state.activeTape.push(o)}keep(e){return e.kept=!0,e}startTape(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++}endTape(){this.state.gradientDepth--}startScope(e){const t={track:[],name:"unnamed scope",id:this.state.nextScopeId++};e&&(t.name=e),this.state.scopeStack.push(t),this.state.activeScope=t}endScope(e){const t=(0,m.getTensorsInContainer)(e),n=new Set(t.map((e=>e.id)));for(let a=0;a<this.state.activeScope.track.length;a++){const e=this.state.activeScope.track[a];e.kept||n.has(e.id)||e.dispose()}const r=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],t.forEach((e=>{e.kept||e.scopeId!==r.id||this.track(e)}))}gradients(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];if(c.hu(t.length>0,(()=>"gradients() received an empty list of xs.")),null!=n&&"float32"!==n.dtype)throw new Error(`dy must have 'float32' dtype, but has '${n.dtype}'`);const a=this.scopedRun((()=>this.startTape()),(()=>this.endTape()),(()=>this.tidy("forward",e)));c.hu(a instanceof f.es,(()=>"The result y returned by f() must be a tensor."));const s=function(e,t,n){const r={},a={};for(let u=0;u<t.length;u++)r[t[u].id]=!0;for(let u=0;u<e.length;u++){const n=e[u],s=n.inputs;for(const e in s){const o=s[e];let i=!1;for(let e=0;e<t.length;e++)if(r[o.id]){n.outputs.forEach((e=>r[e.id]=!0)),i=!0,a[n.id]=!0;break}if(i)break}}const s={};s[n.id]=!0;const o={};for(let u=e.length-1;u>=0;u--){const t=e[u],n=t.inputs;for(let e=0;e<t.outputs.length;e++)if(s[t.outputs[e].id]){for(const e in n)s[n[e].id]=!0,o[t.id]=!0;break}}const i=[];for(let u=0;u<e.length;u++){const t=e[u];if(a[t.id]&&o[t.id]){const e={};for(const a in t.inputs){const n=t.inputs[a];r[n.id]&&(e[a]=n)}const n=Object.assign({},t);n.inputs=e,n.outputs=t.outputs,i.push(n)}}return i}(this.state.activeTape,t,a);if(!r&&0===s.length&&t.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(()=>{const e={};e[a.id]=null==n?function(e){const t=(0,c.p8)((0,c.NA)(e),"float32");return v.makeTensor(t,e,"float32")}(a.shape):n,function(e,t,n,r){for(let a=t.length-1;a>=0;a--){const s=t[a],o=[];if(s.outputs.forEach((t=>{const n=e[t.id];null!=n?o.push(n):o.push(null)})),null==s.gradient)throw new Error(`Cannot compute gradient: gradient function not found for ${s.kernelName}.`);const i=s.gradient(o);for(const t in s.inputs){if(!(t in i))throw new Error(`Cannot backprop through input ${t}. Available gradients found: ${Object.keys(i)}.`);const a=n((()=>i[t]()));if("float32"!==a.dtype)throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input ${t} must have 'float32' dtype, but has '${a.dtype}'`);const o=s.inputs[t];if(!c.cO(a.shape,o.shape))throw new Error(`Error in gradient for op ${s.kernelName}. The gradient of input '${t}' has shape '${a.shape}', which does not match the shape of the input '${o.shape}'`);if(null==e[o.id])e[o.id]=a;else{const t=e[o.id];e[o.id]=r(t,a),t.dispose()}}}}(e,s,(e=>this.tidy(e)),w);const r=t.map((t=>e[t.id]));return 0===this.state.gradientDepth&&(this.state.activeTape.forEach((e=>{for(const t of e.saved)t.dispose()})),this.state.activeTape=null),{value:a,grads:r}}))}customGrad(e){var t=this;return c.hu(c.mf(e),(()=>"The f passed in customGrad(f) must be a function.")),function(){for(var n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];let s;c.hu(r.every((e=>e instanceof f.es)),(()=>"The args passed in customGrad(f)(x1, x2,...) must all be tensors"));const o={};r.forEach(((e,t)=>{o[t]=e}));const i=(t,n)=>(s=e(...r,n),c.hu(s.value instanceof f.es,(()=>"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor")),c.hu(c.mf(s.gradFunc),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function.")),s.value),u=(e,t)=>{const n=s.gradFunc(e,t),a=Array.isArray(n)?n:[n];c.hu(a.length===r.length,(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...).")),c.hu(a.every((e=>e instanceof f.es)),(()=>"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."));const o={};return a.forEach(((e,t)=>{o[t]=()=>e})),o};return t.runKernelFunc({forwardFunc:i,backwardsFunc:u,inputs:o})}}readSync(e){return this.state.tensorInfo.get(e).backend.readSync(e)}read(e){return this.state.tensorInfo.get(e).backend.read(e)}readToGPU(e,t){return this.state.tensorInfo.get(e).backend.readToGPU(e,t)}async time(e){const t=(0,l.now)(),n=await this.backend.time(e);return n.wallMs=(0,l.now)()-t,n}track(e){return null!=this.state.activeScope&&(e.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(e)),e}get registeredVariables(){return this.state.registeredVariables}reset(){this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new y;for(const e in this.registry)this.disposeRegisteredKernels(e),this.registry[e].dispose(),delete this.registry[e];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null}}function b(){const e=(0,s.D)();if(null==e._tfengine){const t=new a.qA(e);e._tfengine=new x(t)}return(0,a.iG)(e._tfengine.ENV),(0,f.Vi)((()=>e._tfengine)),e._tfengine}x.nextTensorId=0,x.nextVariableId=0;const v=b();function w(e,t){const n={a:e,b:t};return v.runKernel(o.mm,n)}},1283:(e,t,n)=>{"use strict";n.d(t,{OB:()=>u,Vi:()=>l,iG:()=>c,qA:()=>s});var r=n(7258);const a="tfjsflags";class s{constructor(e){this.global=e,this.flags={},this.flagRegistry={},this.urlFlags={},this.getQueryParams=o,this.populateURLFlags()}setPlatform(e,t){null!=this.platform&&(u().getBool("IS_TEST")||u().getBool("PROD")||console.warn(`Platform ${this.platformName} has already been set. Overwriting the platform with ${e}.`)),this.platformName=e,this.platform=t}registerFlag(e,t,n){if(this.flagRegistry[e]={evaluationFn:t,setHook:n},null!=this.urlFlags[e]){const t=this.urlFlags[e];u().getBool("IS_TEST")||u().getBool("PROD")||console.warn(`Setting feature override from URL ${e}: ${t}.`),this.set(e,t)}}async getAsync(e){return e in this.flags||(this.flags[e]=await this.evaluateFlag(e)),this.flags[e]}get(e){if(e in this.flags)return this.flags[e];const t=this.evaluateFlag(e);if((0,r.tI)(t))throw new Error(`Flag ${e} cannot be synchronously evaluated. Please use getAsync() instead.`);return this.flags[e]=t,this.flags[e]}getNumber(e){return this.get(e)}getBool(e){return this.get(e)}getFlags(){return this.flags}get features(){return this.flags}set(e,t){if(null==this.flagRegistry[e])throw new Error(`Cannot set flag ${e} as it has not been registered.`);this.flags[e]=t,null!=this.flagRegistry[e].setHook&&this.flagRegistry[e].setHook(t)}evaluateFlag(e){if(null==this.flagRegistry[e])throw new Error(`Cannot evaluate flag '${e}': no evaluation function found.`);return this.flagRegistry[e].evaluationFn()}setFlags(e){this.flags=Object.assign({},e)}reset(){this.flags={},this.urlFlags={},this.populateURLFlags()}populateURLFlags(){if("undefined"===typeof this.global||"undefined"===typeof this.global.location||"undefined"===typeof this.global.location.search)return;const e=this.getQueryParams(this.global.location.search);if(a in e){e.tfjsflags.split(",").forEach((e=>{const[t,n]=e.split(":");this.urlFlags[t]=function(e,t){if("true"===(t=t.toLowerCase())||"false"===t)return"true"===t;if(""+ +t===t)return+t;throw new Error(`Could not parse value flag value ${t} for flag ${e}.`)}(t,n)}))}}}function o(e){const t={};return e.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(e){for(var n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];return i(t,r[0],r[1]),r.join("=")})),t}function i(e,t,n){e[decodeURIComponent(t)]=decodeURIComponent(n||"")}function u(){return l}let l=null;function c(e){l=e}},1903:(e,t,n)=>{"use strict";let r;function a(){if(null==r){let e;if("undefined"!==typeof window)e=window;else if("undefined"!==typeof n.g)e=n.g;else if("undefined"!==typeof process)e=process;else{if("undefined"===typeof self)throw new Error("Could not find a global object");e=self}r=e}return r}function s(e,t){const n=function(){const e=a();return null==e._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals}();if(n.has(e))return n.get(e);{const r=t();return n.set(e,r),n.get(e)}}n.d(t,{D:()=>a,R:()=>s})},5087:(e,t,n)=>{"use strict";n.d(t,{B9:()=>g,CQ:()=>b,Cd:()=>v,Cn:()=>y,G4:()=>i,MX:()=>c,N5:()=>f,N8:()=>d,N_:()=>w,R:()=>u,SR:()=>p,VY:()=>$,XV:()=>x,cF:()=>l,cj:()=>k,jq:()=>T,lu:()=>m,sq:()=>h,x3:()=>S,y3:()=>I,ze:()=>N});var r=n(16),a=n(1283),s=n(5426),o=n(9337);function i(){(0,a.OB)().set("PROD",!0)}function u(){(0,a.OB)().set("DEBUG",!0)}function l(){(0,a.OB)().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")}function c(e){(0,a.OB)().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(e+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function d(){r.BV.disposeVariables()}function p(){return r.BV}function h(){return r.BV.memory()}function f(e){return r.BV.profile(e)}function m(e,t){return r.BV.tidy(e,t)}function g(e){(0,o.getTensorsInContainer)(e).forEach((e=>e.dispose()))}function y(e){return r.BV.keep(e)}function x(e){return r.BV.time(e)}function b(e){return r.BV.setBackend(e)}function v(){return r.BV.ready()}function w(){return r.BV.backendName}function k(e){r.BV.removeBackend(e)}function S(e){return r.BV.findBackend(e)}function N(e){return r.BV.findBackendFactory(e)}function T(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;return r.BV.registerBackend(e,t,n)}function I(){return r.BV.backend}function $(e,t){(0,a.OB)().setPlatform(e,t)}(0,s.FZ)(c)},8933:(e,t,n)=>{"use strict";n.d(t,{UQ:()=>i,cb:()=>p,fN:()=>c,h7:()=>l,pn:()=>d,ti:()=>u});var r=n(16),a=n(5426),s=n(3994),o=n(7258);function i(e){return o.hu(o.mf(e),(()=>"The f passed in grad(f) must be a function")),(t,n)=>{const a=(0,s._1)(t,"x","tf.grad","string_or_numeric"),i=null!=n?(0,s._1)(n,"dy","tf.grad"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(a)),[a],i);return null!=i&&o.k5(t.shape,i.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),h(n),n[0]}))}}function u(e){return o.hu(o.mf(e),(()=>"The f passed in grads(f) must be a function")),(t,n)=>{o.hu(Array.isArray(t),(()=>"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"));const a=(0,s.sI)(t,"args","tf.grads","string_or_numeric"),i=null!=n?(0,s._1)(n,"dy","tf.grads"):null;return r.BV.tidy((()=>{const{value:t,grads:n}=r.BV.gradients((()=>e(...a)),a,i);return null!=i&&o.k5(t.shape,i.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(n),n}))}}function l(e){return o.hu(o.mf(e),(()=>"The f passed in valueAndGrad(f) must be a function")),(t,n)=>{o.hu(t instanceof a.es,(()=>"The x passed in valueAndGrad(f)(x) must be a tensor")),o.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"));const{grads:s,value:i}=r.BV.gradients((()=>e(t)),[t],n);return h(s),{grad:s[0],value:i}}}function c(e){return o.hu(o.mf(e),(()=>"The f passed in valueAndGrads(f) must be a function")),(t,n)=>{o.hu(Array.isArray(t)&&t.every((e=>e instanceof a.es)),(()=>"The args passed in valueAndGrads(f)(args) must be array of tensors")),o.hu(null==n||n instanceof a.es,(()=>"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"));const s=r.BV.gradients((()=>e(...t)),t,n);return null!=n&&o.k5(s.value.shape,n.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),h(s.grads),s}}function d(e,t){o.hu(o.mf(e),(()=>"The f passed in variableGrads(f) must be a function")),o.hu(null==t||Array.isArray(t)&&t.every((e=>e instanceof a._w)),(()=>"The varList passed in variableGrads(f, varList) must be an array of variables"));const n=null!=t;if(!n){t=[];for(const e in r.BV.registeredVariables)t.push(r.BV.registeredVariables[e])}const s=n?t.filter((e=>!e.trainable)):null,i=t.length;t=t.filter((e=>e.trainable)),o.hu(t.length>0,(()=>`variableGrads() expects at least one of the input variables to be trainable, but none of the ${i} variables is trainable.`));const{value:u,grads:l}=r.BV.gradients(e,t,null,!0);o.hu(l.some((e=>null!=e)),(()=>"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize().")),o.hu(0===u.rank,(()=>`The f passed in variableGrads(f) must return a scalar, but it returned a rank-${u.rank} tensor`));const c={};return t.forEach(((e,t)=>{null!=l[t]&&(c[e.name]=l[t])})),null!=s&&s.forEach((e=>c[e.name]=null)),{value:u,grads:c}}function p(e){return r.BV.customGrad(e)}function h(e){if(e.filter((e=>null==e)).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}},37:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Abs:()=>Je.SY,Acos:()=>Je.VG,Acosh:()=>Je.Sp,AdadeltaOptimizer:()=>en,AdagradOptimizer:()=>nn,AdamOptimizer:()=>sn,AdamaxOptimizer:()=>ln,Add:()=>Je.mm,AddN:()=>Je.Xz,All:()=>Je.oT,Any:()=>Je.IK,ArgMax:()=>Je.sJ,ArgMin:()=>Je.aJ,Asin:()=>Je.M2,Asinh:()=>Je.qw,Atan:()=>Je.jM,Atan2:()=>Je.QC,Atanh:()=>Je.Oy,AvgPool:()=>Je.Jh,AvgPool3D:()=>Je._k,AvgPool3DGrad:()=>Je.IM,AvgPoolGrad:()=>Je.RO,BatchMatMul:()=>Je.XL,BatchToSpaceND:()=>Je.zw,Bincount:()=>Je.zv,BroadcastArgs:()=>Je.eE,BroadcastTo:()=>Je.Ly,Cast:()=>Je.RF,Ceil:()=>Je.gJ,ClipByValue:()=>Je.xn,Complex:()=>Je.Zz,ComplexAbs:()=>Je.yj,Concat:()=>Je.Eh,Conv2D:()=>Je.mh,Conv2DBackpropFilter:()=>Je.wU,Conv2DBackpropInput:()=>Je.wm,Conv3D:()=>Je.x1,Conv3DBackpropFilterV2:()=>Je.o2,Conv3DBackpropInputV2:()=>Je.ik,Cos:()=>Je.mc,Cosh:()=>Je.TR,CropAndResize:()=>Je.Vc,Cumprod:()=>Je.By,Cumsum:()=>Je.iH,DataStorage:()=>Nr.JL,DenseBincount:()=>Je.QR,DepthToSpace:()=>Je.T0,DepthwiseConv2dNative:()=>Je.ci,DepthwiseConv2dNativeBackpropFilter:()=>Je.sL,DepthwiseConv2dNativeBackpropInput:()=>Je.y7,Diag:()=>Je.$w,Dilation2D:()=>Je.p4,Dilation2DBackpropFilter:()=>Je.Vn,Dilation2DBackpropInput:()=>Je.ek,ENV:()=>b.Vi,Einsum:()=>Je.$g,Elu:()=>Je.SX,EluGrad:()=>Je.HE,Environment:()=>b.qA,Equal:()=>Je.hd,Erf:()=>Je.Om,Exp:()=>Je.NE,ExpandDims:()=>Je.YF,Expm1:()=>Je.Y0,FFT:()=>Je.vw,Fill:()=>Je.de,FlipLeftRight:()=>Je.Uy,Floor:()=>Je.OR,FloorDiv:()=>Je.je,FromPixels:()=>Je.eB,FusedBatchNorm:()=>Je.sH,FusedConv2D:()=>Je._V,FusedDepthwiseConv2D:()=>Je.lu,GatherNd:()=>Je.q1,GatherV2:()=>Je.qi,Greater:()=>Je.iZ,GreaterEqual:()=>Je.Ac,IFFT:()=>Je.Qg,Identity:()=>Je.iJ,Imag:()=>Je.J_,IsFinite:()=>Je.av,IsInf:()=>Je.iW,IsNan:()=>Je.r7,KernelBackend:()=>Nr.Zu,LRN:()=>Je.eZ,LRNGrad:()=>Je.Hh,LeakyRelu:()=>Je.J$,Less:()=>Je.vt,LessEqual:()=>Je.CA,LinSpace:()=>Je.e7,Log:()=>Je.Zb,Log1p:()=>Je.kU,LogSoftmax:()=>Je.qC,LogicalAnd:()=>Je.PY,LogicalNot:()=>Je.Vf,LogicalOr:()=>Je.MZ,LogicalXor:()=>Je.w6,LowerBound:()=>Je.qI,Max:()=>Je.Yo,MaxPool:()=>Je.mT,MaxPool3D:()=>Je.OA,MaxPool3DGrad:()=>Je.OU,MaxPoolGrad:()=>Je.OV,MaxPoolWithArgmax:()=>Je.vF,Maximum:()=>Je.BM,Mean:()=>Je.q2,Min:()=>Je.c1,Minimum:()=>Je.q8,MirrorPad:()=>Je.jQ,Mod:()=>Je.Vb,MomentumOptimizer:()=>dn,Multinomial:()=>Je.NZ,Multiply:()=>Je.wY,Neg:()=>Je.ku,NonMaxSuppressionV3:()=>Je.uv,NonMaxSuppressionV4:()=>Je.cy,NonMaxSuppressionV5:()=>Je.W0,NotEqual:()=>Je.yQ,OP_SCOPE_SUFFIX:()=>mn.zvA,OneHot:()=>Je.we,OnesLike:()=>Je.qW,Optimizer:()=>Jt,OptimizerConstructors:()=>hn,Pack:()=>Je.Qi,PadV2:()=>Je.ly,Pool:()=>Je.Kg,Pow:()=>Je.pe,Prelu:()=>Je.o0,Prod:()=>Je.Dl,RMSPropOptimizer:()=>pn,Range:()=>Je.e6,Rank:()=>fn.yw,Real:()=>Je.xJ,RealDiv:()=>Je.oH,Reciprocal:()=>Je.$H,Reduction:()=>gn.I,Relu:()=>Je.qk,Relu6:()=>Je.Sb,Reshape:()=>Je.HZ,ResizeBilinear:()=>Je._Y,ResizeBilinearGrad:()=>Je.zb,ResizeNearestNeighbor:()=>Je.dp,ResizeNearestNeighborGrad:()=>Je.Hm,Reverse:()=>Je.mK,RotateWithOffset:()=>Je.b9,Round:()=>Je.e0,Rsqrt:()=>Je.bV,SGDOptimizer:()=>cn,ScatterNd:()=>Je.xQ,SearchSorted:()=>Je.nr,Select:()=>Je.Ph,Selu:()=>Je.oF,Sigmoid:()=>Je.a5,Sign:()=>Je.i5,Sin:()=>Je.RQ,Sinh:()=>Je.w3,Slice:()=>Je.p2,Softmax:()=>Je.Gc,Softplus:()=>Je.MR,SpaceToBatchND:()=>Je.TQ,SparseFillEmptyRows:()=>Je.O3,SparseReshape:()=>Je.nh,SparseSegmentMean:()=>Je.YW,SparseSegmentSum:()=>Je.Zj,SparseToDense:()=>Je.D2,SplitV:()=>Je.L8,Sqrt:()=>Je.FK,Square:()=>Je.bK,SquaredDifference:()=>Je._t,Step:()=>Je.h8,StridedSlice:()=>Je.m2,StringNGrams:()=>Je._J,StringSplit:()=>Je.s1,StringToHashBucketFast:()=>Je.Xk,Sub:()=>Je.Tr,Sum:()=>Je.GB,Tan:()=>Je.sE,Tanh:()=>Je.MI,Tensor:()=>Ne.es,TensorBuffer:()=>Ne.YD,Tile:()=>Je.n9,TopK:()=>Je.cW,Transform:()=>Je.wx,Transpose:()=>Je.G3,Unique:()=>Je.kp,Unpack:()=>Je.To,UnsortedSegmentSum:()=>Je.Qv,UpperBound:()=>Je.XD,Variable:()=>Ne._w,ZerosLike:()=>Je.Ru,_FusedMatMul:()=>Je.us,abs:()=>mn.WnP,acos:()=>mn.Khb,acosh:()=>mn.__u,add:()=>mn.IHx,addN:()=>mn.QBD,all:()=>mn.$6P,any:()=>mn.YjB,argMax:()=>mn.NqF,argMin:()=>mn.vHJ,asin:()=>mn.ZRM,asinh:()=>mn.VfV,atan:()=>mn.z4N,atan2:()=>mn.fvJ,atanh:()=>mn.C80,avgPool:()=>mn.wS1,avgPool3d:()=>mn.uR5,backend:()=>Gt.y3,backend_util:()=>p,basicLSTMCell:()=>mn.zEQ,batchNorm:()=>mn.tgs,batchNorm2d:()=>mn.Dxk,batchNorm3d:()=>mn.JY5,batchNorm4d:()=>mn.p3b,batchToSpaceND:()=>mn.E4h,bincount:()=>mn.yE8,booleanMaskAsync:()=>mn.anm,broadcastArgs:()=>mn.XsQ,broadcastTo:()=>mn.UFq,broadcast_util:()=>Ze,browser:()=>o,buffer:()=>mn.f3b,cast:()=>mn.pju,ceil:()=>mn.mDi,clipByValue:()=>mn.iUl,clone:()=>mn.d9v,complex:()=>mn.PYB,concat:()=>mn.zoF,concat1d:()=>mn.gME,concat2d:()=>mn.Izb,concat3d:()=>mn.MNy,concat4d:()=>mn.ZaL,conv1d:()=>mn.PAt,conv2d:()=>mn.Tek,conv2dTranspose:()=>mn.bc,conv3d:()=>mn.pdZ,conv3dTranspose:()=>mn.$QV,copyRegisteredKernels:()=>et.T3,cos:()=>mn.mCk,cosh:()=>mn.f9Y,cosineWindow:()=>mn.mew,cumprod:()=>mn.$Gn,cumsum:()=>mn.zbp,customGrad:()=>Qt.cb,denseBincount:()=>mn.ppE,deprecationWarn:()=>Gt.MX,depthToSpace:()=>mn.nTT,depthwiseConv2d:()=>mn.B10,device_util:()=>r,diag:()=>mn.Ka3,dilation2d:()=>mn.WmZ,disableDeprecationWarnings:()=>Gt.cF,dispose:()=>Gt.B9,disposeVariables:()=>Gt.N8,div:()=>mn.hiC,divNoNan:()=>mn.NTj,dot:()=>mn.AKD,dropout:()=>mn.rvX,einsum:()=>mn.WYO,elu:()=>mn.pyx,enableDebugMode:()=>Gt.R,enableProdMode:()=>Gt.G4,enclosingPowerOfTwo:()=>mn.GRh,engine:()=>Gt.SR,env:()=>b.OB,equal:()=>mn.DgJ,erf:()=>mn.qNN,euclideanNorm:()=>mn.d2q,exp:()=>mn.Qqt,expandDims:()=>mn.dt4,expm1:()=>mn.t$B,eye:()=>mn.iyy,fft:()=>mn.kp_,fill:()=>mn.hlL,findBackend:()=>Gt.x3,findBackendFactory:()=>Gt.ze,floor:()=>mn.GWj,floorDiv:()=>mn.qPi,fused:()=>mn.imm,gather:()=>mn.Iqj,gatherND:()=>mn.dbB,gather_util:()=>i,getBackend:()=>Gt.N_,getGradient:()=>et.uk,getKernel:()=>et.pI,getKernelsForBackend:()=>et.tr,grad:()=>Qt.UQ,grads:()=>Qt.ti,greater:()=>mn.pjt,greaterEqual:()=>mn.brS,ifft:()=>mn.Sxn,imag:()=>mn.asL,image:()=>mn.BHj,inTopKAsync:()=>mn.V3u,io:()=>a,irfft:()=>mn.wx0,isFinite:()=>mn.xVT,isInf:()=>mn.UWc,isNaN:()=>mn.i2d,keep:()=>Gt.Cn,kernel_impls:()=>h,leakyRelu:()=>mn.hi7,less:()=>mn.d9m,lessEqual:()=>mn.zN1,linalg:()=>mn.$r2,linspace:()=>mn.SX3,localResponseNormalization:()=>mn.G9k,log:()=>mn.cM7,log1p:()=>mn.Krr,logSigmoid:()=>mn.e_t,logSoftmax:()=>mn.CmS,logSumExp:()=>mn.l_t,logicalAnd:()=>mn.HvI,logicalNot:()=>mn.hJK,logicalOr:()=>mn.K5V,logicalXor:()=>mn.egP,losses:()=>mn.MB5,lowerBound:()=>mn.eab,matMul:()=>mn.OI3,math:()=>s,max:()=>mn.Fp7,maxPool:()=>mn._sB,maxPool3d:()=>mn.YQQ,maxPoolWithArgmax:()=>mn.Ip$,maximum:()=>mn.gWQ,mean:()=>mn.J69,memory:()=>Gt.sq,meshgrid:()=>mn.ry_,min:()=>mn.VV$,minimum:()=>mn.LTh,mirrorPad:()=>mn.VdP,mod:()=>mn.wQq,moments:()=>mn.Gi7,movingAverage:()=>mn.p_,mul:()=>mn.dC7,multiRNNCell:()=>mn.rq4,multinomial:()=>mn.SJ_,neg:()=>mn.W76,nextFrame:()=>bn,norm:()=>mn.KOy,notEqual:()=>mn.Quu,oneHot:()=>mn.lfX,ones:()=>mn.iUs,onesLike:()=>mn.JpU,op:()=>mn.op,outerProduct:()=>mn.N2O,pad:()=>mn.vku,pad1d:()=>mn.pNR,pad2d:()=>mn.koy,pad3d:()=>mn.t1L,pad4d:()=>mn.lGY,pool:()=>mn.d_R,pow:()=>mn.sQ3,prelu:()=>mn.AL3,print:()=>mn.S0v,prod:()=>mn.WVs,profile:()=>Gt.N5,rand:()=>mn.TN_,randomGamma:()=>mn.wzB,randomNormal:()=>mn.nGf,randomStandardNormal:()=>mn.ruB,randomUniform:()=>mn.LGj,range:()=>mn.w6H,ready:()=>Gt.Cd,real:()=>mn.kwC,reciprocal:()=>mn.M25,registerBackend:()=>Gt.jq,registerGradient:()=>et.Li,registerKernel:()=>et.wC,relu:()=>mn.UYe,relu6:()=>mn.btT,removeBackend:()=>Gt.cj,reshape:()=>mn.XLQ,reverse:()=>mn.GYS,reverse1d:()=>mn.SDf,reverse2d:()=>mn.diP,reverse3d:()=>mn.sx7,reverse4d:()=>mn.mG2,rfft:()=>mn.QEs,round:()=>mn.NMM,rsqrt:()=>mn.bp0,scalar:()=>mn.iD$,scatterND:()=>mn.snQ,scatter_util:()=>lt,searchSorted:()=>mn.zcT,selu:()=>mn.U8D,separableConv2d:()=>mn.U_I,serialization:()=>l,setBackend:()=>Gt.CQ,setPlatform:()=>Gt.VY,setdiff1dAsync:()=>mn.ODp,sigmoid:()=>mn.XD2,sign:()=>mn.Xxe,signal:()=>mn.tdS,sin:()=>mn.O$l,sinh:()=>mn.R_K,slice:()=>mn.tPi,slice1d:()=>mn.jZU,slice2d:()=>mn.SmN,slice3d:()=>mn.CnO,slice4d:()=>mn.p0P,slice_util:()=>u,softmax:()=>mn.XAC,softplus:()=>mn.Wvh,spaceToBatchND:()=>mn.fBT,sparse:()=>mn.rVs,sparseToDense:()=>mn.ers,spectral:()=>mn.uN7,split:()=>mn.Vl2,sqrt:()=>mn._b3,square:()=>mn.h62,squaredDifference:()=>mn.$i,squeeze:()=>mn.L9e,stack:()=>mn.knu,step:()=>mn.Nbs,stridedSlice:()=>mn.NXj,string:()=>mn.Z_8,sub:()=>mn.luU,sum:()=>mn.Smz,sumOutType:()=>fn.z4,tan:()=>mn.ORZ,tanh:()=>mn.AEp,tensor:()=>mn.XeE,tensor1d:()=>mn.RRF,tensor2d:()=>mn.odF,tensor3d:()=>mn.wOQ,tensor4d:()=>mn.yXz,tensor5d:()=>mn.Bfx,tensor6d:()=>mn.xZs,tensor_util:()=>_t,test_util:()=>c,tidy:()=>Gt.lu,tile:()=>mn.Gg6,time:()=>Gt.XV,topk:()=>mn.hg7,train:()=>yn,transpose:()=>mn.p4s,truncatedNormal:()=>mn.Xu6,unique:()=>mn.Two,unregisterGradient:()=>et.bt,unregisterKernel:()=>et.nE,unsortedSegmentSum:()=>mn.pUJ,unstack:()=>mn.HHK,upcastType:()=>fn.x8,upperBound:()=>mn.GaM,util:()=>Rt,valueAndGrad:()=>Qt.h7,valueAndGrads:()=>Qt.fN,variable:()=>mn.VD$,variableGrads:()=>Qt.pn,version_core:()=>Wt,where:()=>mn.arb,whereAsync:()=>mn.itS,zeros:()=>mn.lls,zerosLike:()=>mn.P84});var r={};n.r(r),n.d(r,{isBrowser:()=>x,isMobile:()=>y,mockIsMobile:()=>g});var a={};n.r(a),n.d(a,{browserFiles:()=>Ee,browserHTTPRequest:()=>Pe,concatenateArrayBuffers:()=>_,copyModel:()=>fe,decodeWeights:()=>I,encodeWeights:()=>T,fromMemory:()=>Ue,fromMemorySync:()=>We,getLoadHandlers:()=>V,getModelArtifactsForJSON:()=>O,getModelArtifactsInfoForJSON:()=>D,getSaveHandlers:()=>L,http:()=>Me,isHTTPScheme:()=>Fe,listModels:()=>pe,loadWeights:()=>Ae,moveModel:()=>me,registerLoadRouter:()=>P,registerSaveRouter:()=>M,removeModel:()=>he,weightsLoaderFactory:()=>Oe,withSaveHandler:()=>Ge,withSaveHandlerSync:()=>He});var s={};n.r(s),n.d(s,{confusionMatrix:()=>Qe});var o={};n.r(o),n.d(o,{fromPixels:()=>it,fromPixelsAsync:()=>st,toPixels:()=>ot});var i={};n.r(i),n.d(i,{prepareAndValidate:()=>ut});var u={};n.r(u),n.d(u,{assertParamsValid:()=>ct,computeFlatOffset:()=>St,computeOutShape:()=>pt,getNormalizedAxes:()=>gt,isSliceContinous:()=>kt,maskToAxes:()=>dt,parseSliceParams:()=>Nt,sliceInfo:()=>Tt,startForAxis:()=>vt,startIndicesWithElidedDims:()=>yt,stopForAxis:()=>wt,stopIndicesWithElidedDims:()=>xt,stridesForAxis:()=>bt,stridesWithElidedDims:()=>ht});var l={};n.r(l),n.d(l,{Serializable:()=>$t,SerializationMap:()=>Ct,registerClass:()=>Et});var c={};n.r(c),n.d(c,{TEST_EPSILON_FLOAT16:()=>At,encodeStrings:()=>Ut,expectArrayBuffersEqual:()=>zt,expectArraysClose:()=>Ot,expectArraysEqual:()=>Mt,expectNumbersClose:()=>Pt,expectPromiseToFail:()=>Bt,expectValuesInRange:()=>Vt,testEpsilon:()=>Dt});var d={};n.r(d),n.d(d,{collectGatherOpShapeInfo:()=>br,computeOutShape:()=>xr,segOpComputeOptimalWindowSize:()=>yr});var p={};n.r(p),n.d(p,{ERF_A1:()=>Bn,ERF_A2:()=>Mn,ERF_A3:()=>Pn,ERF_A4:()=>Ln,ERF_A5:()=>Vn,ERF_P:()=>Fn,PARALLELIZE_THRESHOLD:()=>Tn,SELU_SCALE:()=>Dn,SELU_SCALEALPHA:()=>On,applyActivation:()=>Nn.QH,assertAndGetBroadcastShape:()=>Ze.assertAndGetBroadcastShape,assertAxesAreInnerMostDims:()=>vn.lB,assertParamsConsistent:()=>wn,assignToTypedArray:()=>Xn,axesAreInnerMostDims:()=>vn.YB,calculateShapes:()=>lt.calculateShapes,checkEinsumDimSizes:()=>er,checkPadOnDimRoundingMode:()=>Sn.m,combineLocations:()=>vn.Vh,complexWithEvenIndex:()=>Gn,complexWithOddIndex:()=>Hn,computeConv2DInfo:()=>Sn.Ix,computeConv3DInfo:()=>Sn.jw,computeDefaultPad:()=>Sn.aO,computeDilation2DInfo:()=>Sn.Rf,computeOptimalWindowSize:()=>In,computeOutAndReduceShapes:()=>vn.kz,computeOutShape:()=>kn,computePool2DInfo:()=>Sn.Xw,computePool3DInfo:()=>Sn.pl,convertConv2DDataFormat:()=>Sn.sl,decodeEinsumEquation:()=>Zn,eitherStridesOrDilationsAreOne:()=>Sn.jT,expandShapeToKeepDim:()=>vn.rv,exponent:()=>jn,exponents:()=>Kn,fromStringArrayToUint8:()=>wr,fromUint8ToStringArray:()=>vr,getAxesPermutation:()=>vn.Q3,getBroadcastDims:()=>Ze.getBroadcastDims,getComplexWithIndex:()=>qn,getEinsumComputePath:()=>tr,getEinsumPermutation:()=>Jn,getFusedBiasGradient:()=>Nn.pf,getFusedDyActivation:()=>Nn.Fr,getImageCenter:()=>$n,getInnerMostAxes:()=>vn.sY,getPermuted:()=>En,getReductionAxes:()=>Ze.getReductionAxes,getReshaped:()=>Cn,getReshapedPermuted:()=>_n,getSliceBeginCoords:()=>Rn,getSliceSize:()=>An,getSparseFillEmptyRowsIndicesDenseShapeMismatch:()=>sr,getSparseFillEmptyRowsNegativeIndexErrorMessage:()=>or,getSparseFillEmptyRowsOutOfRangeIndexErrorMessage:()=>ir,getSparseReshapeEmptyTensorZeroOutputDimErrorMessage:()=>cr,getSparseReshapeInputOutputMismatchErrorMessage:()=>pr,getSparseReshapeInputOutputMultipleErrorMessage:()=>dr,getSparseReshapeMultipleNegativeOneOutputDimErrorMessage:()=>ur,getSparseReshapeNegativeOutputDimErrorMessage:()=>lr,getSparseSegmentReductionIndicesOutOfRangeErrorMessage:()=>gr,getSparseSegmentReductionNegativeSegmentIdsErrorMessage:()=>hr,getSparseSegmentReductionNonIncreasingSegmentIdsErrorMessage:()=>fr,getSparseSegmentReductionSegmentIdOutOfRangeErrorMessage:()=>mr,getUndoAxesPermutation:()=>vn.LJ,isIdentityPermutation:()=>nr,log:()=>zn.c,mergeRealAndImagArrays:()=>Un,prepareAndValidate:()=>ut,prepareSplitSize:()=>ar,segment_util:()=>d,shouldFuse:()=>Nn.uy,slice_util:()=>u,splitRealAndImagArrays:()=>Wn,tupleValuesAreOne:()=>Sn.I0,upcastType:()=>fn.x8,validateInput:()=>lt.validateInput,validateUpdateShape:()=>lt.validateUpdateShape,warn:()=>zn.Z});var h={};n.r(h),n.d(h,{nonMaxSuppressionV3Impl:()=>kr.GP,nonMaxSuppressionV4Impl:()=>kr.qP,nonMaxSuppressionV5Impl:()=>kr.pA,whereImpl:()=>Sr.Z});var f=n(16);let m;function g(e){m=e}function y(e){if(void 0!==m)return m;if(e||"undefined"!==typeof navigator&&null!=navigator){if(e||(e=navigator),"ReactNative"===e.product)return!0;const t=e.userAgent||e.vendor||("undefined"!==typeof window?window.opera:"");if(!t){const t=e;return t.userAgentData&&t.userAgentData.mobile}return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1}function x(){return"undefined"!==typeof window&&null!=window.document||"undefined"!==typeof WorkerGlobalScope}var b=n(1283);const v=(0,b.OB)();v.registerFlag("DEBUG",(()=>!1),(e=>{e&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),v.registerFlag("IS_BROWSER",(()=>x())),v.registerFlag("IS_NODE",(()=>"undefined"!==typeof process&&"undefined"!==typeof process.versions&&"undefined"!==typeof process.versions.node)),v.registerFlag("IS_CHROME",(()=>"undefined"!==typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor))),v.registerFlag("PROD",(()=>!1)),v.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(()=>v.getBool("DEBUG"))),v.registerFlag("DEPRECATION_WARNINGS_ENABLED",(()=>!0)),v.registerFlag("IS_TEST",(()=>!1)),v.registerFlag("CHECK_COMPUTATION_FOR_ERRORS",(()=>!0)),v.registerFlag("WRAP_TO_IMAGEBITMAP",(()=>!1)),v.registerFlag("ENGINE_COMPILE_ONLY",(()=>!1));var w=n(2195),k=n(1150),S=n(7258);const N={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};async function T(e,t){const n=[],r=[],a=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);for(let s=0;s<a.length;++s){const o=a[s],i=Array.isArray(e)?e[s].tensor:e[o];if("float32"!==i.dtype&&"int32"!==i.dtype&&"bool"!==i.dtype&&"string"!==i.dtype&&"complex64"!==i.dtype)throw new Error(`Unsupported dtype in weight '${o}': ${i.dtype}`);const u={name:o,shape:i.shape,dtype:i.dtype};if("string"===i.dtype){const e=new Promise((async e=>{const t=await i.bytes(),n=t.reduce(((e,t)=>e+t.length),0)+4*t.length,r=new Uint8Array(n);let a=0;for(let s=0;s<t.length;s++){const e=t[s],n=new Uint8Array(new Uint32Array([e.length]).buffer);r.set(n,a),a+=4,r.set(e,a),a+=e.length}e(r)}));r.push(e)}else r.push(i.data());null!=t&&(u.group=t),n.push(u)}return{data:$(await Promise.all(r)),specs:n}}function I(e,t){const n={};let r,a=0;for(const s of t){const t=s.name,o=s.dtype,i=s.shape,u=(0,S.NA)(i);let l;if("quantization"in s){const n=s.quantization;if("uint8"===n.dtype||"uint16"===n.dtype){if(!("min"in n)||!("scale"in n))throw new Error(`Weight ${s.name} with quantization ${n.dtype} doesn't have corresponding metadata min and scale.`)}else{if("float16"!==n.dtype)throw new Error(`Weight ${s.name} has unknown quantization dtype ${n.dtype}. Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.`);if("float32"!==o)throw new Error(`Weight ${s.name} is quantized with ${n.dtype} which only supports weights of type float32 not ${o}.`)}const i=N[n.dtype],c=e.slice(a,a+u*i),d="uint8"===n.dtype?new Uint8Array(c):new Uint16Array(c);if("float32"===o)if("uint8"===n.dtype||"uint16"===n.dtype){l=new Float32Array(d.length);for(let e=0;e<d.length;e++){const t=d[e];l[e]=t*n.scale+n.min}}else{if("float16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type float32.`);void 0===r&&(r=F()),l=r(d)}else{if("int32"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);if("uint8"!==n.dtype&&"uint16"!==n.dtype)throw new Error(`Unsupported quantization type ${n.dtype} for weight type int32.`);l=new Int32Array(d.length);for(let e=0;e<d.length;e++){const t=d[e];l[e]=Math.round(t*n.scale+n.min)}}a+=u*i}else if("string"===o){const t=(0,S.NA)(s.shape);l=[];for(let n=0;n<t;n++){const t=new Uint32Array(e.slice(a,a+4))[0];a+=4;const n=new Uint8Array(e.slice(a,a+t));l.push(n),a+=t}}else{const r=N[o],s=e.slice(a,a+u*r);if("float32"===o)l=new Float32Array(s);else if("int32"===o)l=new Int32Array(s);else if("bool"===o)l=new Uint8Array(s);else{if("complex64"!==o)throw new Error(`Unsupported dtype in weight '${t}': ${o}`);{l=new Float32Array(s);const e=new Float32Array(l.length/2),r=new Float32Array(l.length/2);for(let t=0;t<e.length;t++)e[t]=l[2*t],r[t]=l[2*t+1];const a=(0,k.X)(e,i,"float32"),o=(0,k.X)(r,i,"float32");n[t]=(0,w.P)(a,o),a.dispose(),o.dispose()}}a+=u*r}"complex64"!==o&&(n[t]=(0,k.X)(l,i,o))}return n}function $(e){if(null===e)throw new Error(`Invalid input value: ${JSON.stringify(e)}`);let t=0;const n=[];e.forEach((e=>{if(t+=e.byteLength,n.push(e.byteLength===e.buffer.byteLength?e:new e.constructor(e)),!(e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array))throw new Error(`Unsupported TypedArray subtype: ${e.constructor.name}`)}));const r=new Uint8Array(t);let a=0;return n.forEach((e=>{r.set(new Uint8Array(e.buffer),a),a+=e.byteLength})),r.buffer}const C="undefined"!==typeof Buffer&&("undefined"===typeof Blob||"undefined"===typeof atob||"undefined"===typeof btoa);function E(e){return C?Buffer.byteLength(e):new Blob([e]).size}function _(e){if(1===e.length)return e[0];let t=0;e.forEach((e=>{t+=e.byteLength}));const n=new Uint8Array(t);let r=0;return e.forEach((e=>{n.set(new Uint8Array(e),r),r+=e.byteLength})),n.buffer}function R(e){for(e=e.trim();e.endsWith("/");)e=e.slice(0,e.length-1);const t=e.split("/");return t[t.length-1]}function A(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,weightsManifest:t};return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),n}async function O(e,t){const n={modelTopology:e.modelTopology,format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy};if(null!=e.trainingConfig&&(n.trainingConfig=e.trainingConfig),null!=e.weightsManifest){const[r,a]=await t(e.weightsManifest);n.weightSpecs=r,n.weightData=a}return null!=e.signature&&(n.signature=e.signature),null!=e.userDefinedMetadata&&(n.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(n.modelInitializer=e.modelInitializer),n}function D(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==e.modelTopology?0:E(JSON.stringify(e.modelTopology)),weightSpecsBytes:null==e.weightSpecs?0:E(JSON.stringify(e.weightSpecs)),weightDataBytes:null==e.weightData?0:e.weightData.byteLength}}function F(){const e=function(){const e=e=>{let t=e<<13,n=0;for(;0===(8388608&t);)n-=8388608,t<<=1;return t&=-8388609,n+=947912704,t|n},t=new Uint32Array(2048);t[0]=0;for(let n=1;n<1024;n++)t[n]=e(n);for(let n=1024;n<2048;n++)t[n]=939524096+(n-1024<<13);return t}(),t=function(){const e=new Uint32Array(64);e[0]=0,e[31]=1199570944,e[32]=2147483648,e[63]=3347054592;for(let t=1;t<31;t++)e[t]=t<<23;for(let t=33;t<63;t++)e[t]=2147483648+(t-32<<23);return e}(),n=function(){const e=new Uint32Array(64);for(let t=0;t<64;t++)e[t]=1024;return e[0]=e[32]=0,e}();return r=>{const a=new ArrayBuffer(4*r.length),s=new Uint32Array(a);for(let o=0;o<r.length;o++){const a=r[o],i=e[n[a>>10]+(1023&a)]+t[a>>10];s[o]=i}return new Float32Array(a)}}class B{constructor(){this.saveRouters=[],this.loadRouters=[]}static getInstance(){return null==B.instance&&(B.instance=new B),B.instance}static registerSaveRouter(e){B.getInstance().saveRouters.push(e)}static registerLoadRouter(e){B.getInstance().loadRouters.push(e)}static getSaveHandlers(e){return B.getHandlers(e,"save")}static getLoadHandlers(e,t){return B.getHandlers(e,"load",t)}static getHandlers(e,t,n){const r=[];return("load"===t?B.getInstance().loadRouters:B.getInstance().saveRouters).forEach((t=>{const a=t(e,n);null!==a&&r.push(a)})),r}}const M=e=>B.registerSaveRouter(e),P=e=>B.registerLoadRouter(e),L=e=>B.getSaveHandlers(e),V=(e,t)=>B.getLoadHandlers(e,t),z="tensorflowjs",U="models_store",W="model_info_store";function G(){if(!(0,b.OB)().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");const e="undefined"===typeof window?self:window,t=e.indexedDB||e.mozIndexedDB||e.webkitIndexedDB||e.msIndexedDB||e.shimIndexedDB;if(null==t)throw new Error("The current browser does not appear to support IndexedDB.");return t}function H(e){const t=e.result;t.createObjectStore(U,{keyPath:"modelPath"}),t.createObjectStore(W,{keyPath:"modelPath"})}class q{constructor(e){if(this.indexedDB=G(),null==e||!e)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=e}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return this.databaseAction(this.modelPath,e)}async load(){return this.databaseAction(this.modelPath)}databaseAction(e,t){return new Promise(((e,n)=>{const r=this.indexedDB.open(z,1);r.onupgradeneeded=()=>H(r),r.onsuccess=()=>{const a=r.result;if(null==t){const t=a.transaction(U,"readonly"),r=t.objectStore(U).get(this.modelPath);r.onsuccess=()=>{if(null==r.result)return a.close(),n(new Error(`Cannot find model with path '${this.modelPath}' in IndexedDB.`));e(r.result.modelArtifacts)},r.onerror=e=>(a.close(),n(r.error)),t.oncomplete=()=>a.close()}else{const r=D(t),s=a.transaction(W,"readwrite");let o=s.objectStore(W);const i=o.put({modelPath:this.modelPath,modelArtifactsInfo:r});let u;i.onsuccess=()=>{u=a.transaction(U,"readwrite");const i=u.objectStore(U).put({modelPath:this.modelPath,modelArtifacts:t,modelArtifactsInfo:r});i.onsuccess=()=>e({modelArtifactsInfo:r}),i.onerror=e=>{o=s.objectStore(W);const t=o.delete(this.modelPath);t.onsuccess=()=>(a.close(),n(i.error)),t.onerror=e=>(a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}}},r.onerror=e=>n(r.error)}))}}q.URL_SCHEME="indexeddb://";const X=e=>{return(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(q.URL_SCHEME)?(t=e.slice(q.URL_SCHEME.length),new q(t)):null;var t};B.registerSaveRouter(X),B.registerLoadRouter(X);class K{constructor(){this.indexedDB=G()}async listModels(){return new Promise(((e,t)=>{const n=this.indexedDB.open(z,1);n.onupgradeneeded=()=>H(n),n.onsuccess=()=>{const r=n.result,a=r.transaction(W,"readonly"),s=a.objectStore(W).getAll();s.onsuccess=()=>{const t={};for(const e of s.result)t[e.modelPath]=e.modelArtifactsInfo;e(t)},s.onerror=e=>(r.close(),t(s.error)),a.oncomplete=()=>r.close()},n.onerror=e=>t(n.error)}))}async removeModel(e){var t;return e=(t=e).startsWith(q.URL_SCHEME)?t.slice(q.URL_SCHEME.length):t,new Promise(((t,n)=>{const r=this.indexedDB.open(z,1);r.onupgradeneeded=()=>H(r),r.onsuccess=()=>{const a=r.result,s=a.transaction(W,"readwrite"),o=s.objectStore(W),i=o.get(e);let u;i.onsuccess=()=>{if(null==i.result)return a.close(),n(new Error(`Cannot find model with path '${e}' in IndexedDB.`));{const r=o.delete(e),s=()=>{u=a.transaction(U,"readwrite");const r=u.objectStore(U).delete(e);r.onsuccess=()=>t(i.result.modelArtifactsInfo),r.onerror=e=>n(i.error)};r.onsuccess=s,r.onerror=e=>(s(),a.close(),n(i.error))}},i.onerror=e=>(a.close(),n(i.error)),s.oncomplete=()=>{null==u?a.close():u.oncomplete=()=>a.close()}},r.onerror=e=>n(r.error)}))}}const j="/",Y="tensorflowjs_models",Q="info",Z="model_topology",J="weight_specs",ee="weight_data",te="model_metadata";function ne(e){return{info:[Y,e,Q].join(j),topology:[Y,e,Z].join(j),weightSpecs:[Y,e,J].join(j),weightData:[Y,e,ee].join(j),modelMetadata:[Y,e,te].join(j)}}function re(e){for(const t of Object.values(e))window.localStorage.removeItem(t)}function ae(e){const t=e.split(j);if(t.length<3)throw new Error(`Invalid key format: ${e}`);return t.slice(1,t.length-1).join(j)}class se{constructor(e){if(!(0,b.OB)().getBool("IS_BROWSER")||"undefined"===typeof window||"undefined"===typeof window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==e||!e)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=e,this.keys=ne(this.modelPath)}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");{const n=JSON.stringify(e.modelTopology),r=JSON.stringify(e.weightSpecs),a=D(e);try{this.LS.setItem(this.keys.info,JSON.stringify(a)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,r),this.LS.setItem(this.keys.weightData,function(e){if(C)return Buffer.from(e).toString("base64");const t=new Uint8Array(e);let n="";for(let r=0,a=t.length;r<a;r++)n+=String.fromCharCode(t[r]);return btoa(n)}(e.weightData));const t={format:e.format,generatedBy:e.generatedBy,convertedBy:e.convertedBy,signature:null!=e.signature?e.signature:void 0,userDefinedMetadata:null!=e.userDefinedMetadata?e.userDefinedMetadata:void 0,modelInitializer:null!=e.modelInitializer?e.modelInitializer:void 0,trainingConfig:null!=e.trainingConfig?e.trainingConfig:void 0};return this.LS.setItem(this.keys.modelMetadata,JSON.stringify(t)),{modelArtifactsInfo:a}}catch(t){throw re(this.keys),new Error(`Failed to save model '${this.modelPath}' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes=${a.modelTopologyBytes}, weightSpecsBytes=${a.weightSpecsBytes}, weightDataBytes=${a.weightDataBytes}.`)}}}async load(){const e=JSON.parse(this.LS.getItem(this.keys.info));if(null==e)throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);if("JSON"!==e.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");const t={},n=JSON.parse(this.LS.getItem(this.keys.topology));if(null==n)throw new Error(`In local storage, the topology of model '${this.modelPath}' is missing.`);t.modelTopology=n;const r=JSON.parse(this.LS.getItem(this.keys.weightSpecs));if(null==r)throw new Error(`In local storage, the weight specs of model '${this.modelPath}' are missing.`);t.weightSpecs=r;const a=this.LS.getItem(this.keys.modelMetadata);if(null!=a){const e=JSON.parse(a);t.format=e.format,t.generatedBy=e.generatedBy,t.convertedBy=e.convertedBy,null!=e.signature&&(t.signature=e.signature),null!=e.userDefinedMetadata&&(t.userDefinedMetadata=e.userDefinedMetadata),null!=e.modelInitializer&&(t.modelInitializer=e.modelInitializer),null!=e.trainingConfig&&(t.trainingConfig=e.trainingConfig)}const s=this.LS.getItem(this.keys.weightData);if(null==s)throw new Error(`In local storage, the binary weight values of model '${this.modelPath}' are missing.`);return t.weightData=function(e){if(C){const t=Buffer.from(e,"base64");return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}const t=atob(e),n=new Uint8Array(t.length);for(let r=0;r<t.length;++r)n.set([t.charCodeAt(r)],r);return n.buffer}(s),t}}se.URL_SCHEME="localstorage://";const oe=e=>{return(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith(se.URL_SCHEME)?(t=e.slice(se.URL_SCHEME.length),new se(t)):null;var t};B.registerSaveRouter(oe),B.registerLoadRouter(oe);class ie{constructor(){(0,S.hu)((0,b.OB)().getBool("IS_BROWSER"),(()=>"Current environment is not a web browser")),(0,S.hu)("undefined"===typeof window||"undefined"!==typeof window.localStorage,(()=>"Current browser does not appear to support localStorage")),this.LS=window.localStorage}async listModels(){const e={},t=Y+j,n=j+Q;for(let r=0;r<this.LS.length;++r){const a=this.LS.key(r);if(a.startsWith(t)&&a.endsWith(n)){e[ae(a)]=JSON.parse(this.LS.getItem(a))}}return e}async removeModel(e){var t;const n=ne(e=(t=e).startsWith(se.URL_SCHEME)?t.slice(se.URL_SCHEME.length):t);if(null==this.LS.getItem(n.info))throw new Error(`Cannot find model at path '${e}'`);const r=JSON.parse(this.LS.getItem(n.info));return re(n),r}}const ue="://";class le{constructor(){this.managers={}}static getInstance(){return null==le.instance&&(le.instance=new le),le.instance}static registerManager(e,t){(0,S.hu)(null!=e,(()=>"scheme must not be undefined or null.")),e.endsWith(ue)&&(e=e.slice(0,e.indexOf(ue))),(0,S.hu)(e.length>0,(()=>"scheme must not be an empty string."));const n=le.getInstance();(0,S.hu)(null==n.managers[e],(()=>`A model store manager is already registered for scheme '${e}'.`)),n.managers[e]=t}static getManager(e){const t=le.getInstance().managers[e];if(null==t)throw new Error(`Cannot find model manager for scheme '${e}'`);return t}static getSchemes(){return Object.keys(le.getInstance().managers)}}function ce(e){if(-1===e.indexOf(ue))throw new Error(`The url string provided does not contain a scheme. Supported schemes are: ${le.getSchemes().join(",")}`);return{scheme:e.split(ue)[0],path:e.split(ue)[1]}}async function de(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];(0,S.hu)(e!==t,(()=>`Old path and new path are the same: '${e}'`));const r=B.getLoadHandlers(e);(0,S.hu)(r.length>0,(()=>`Copying failed because no load handler is found for source URL ${e}.`)),(0,S.hu)(r.length<2,(()=>`Copying failed because more than one (${r.length}) load handlers for source URL ${e}.`));const a=r[0],s=B.getSaveHandlers(t);(0,S.hu)(s.length>0,(()=>`Copying failed because no save handler is found for destination URL ${t}.`)),(0,S.hu)(s.length<2,(()=>`Copying failed because more than one (${r.length}) save handlers for destination URL ${t}.`));const o=s[0],i=ce(e).scheme,u=ce(e).path,l=i===ce(e).scheme,c=await a.load();n&&l&&await le.getManager(i).removeModel(u);const d=await o.save(c);return n&&!l&&await le.getManager(i).removeModel(u),d.modelArtifactsInfo}async function pe(){const e=le.getSchemes(),t={};for(const n of e){const e=await le.getManager(n).listModels();for(const r in e){t[n+ue+r]=e[r]}}return t}async function he(e){const t=ce(e);return le.getManager(t.scheme).removeModel(t.path)}async function fe(e,t){return de(e,t,!1)}async function me(e,t){return de(e,t,!0)}class ge{fetch(e,t){return fetch(e,t)}now(){return performance.now()}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Browser's encoder only supports utf-8, but got ${t}`);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(e)}decode(e,t){return new TextDecoder(t).decode(e)}}if((0,b.OB)().get("IS_BROWSER")){(0,b.OB)().setPlatform("browser",new ge);try{le.registerManager(se.URL_SCHEME,new ie)}catch(Tr){}try{le.registerManager(q.URL_SCHEME,new K)}catch(Tr){}}const ye=()=>n(7890);let xe;class be{constructor(){this.util=n(134),this.textEncoder=new this.util.TextEncoder}fetch(e,t){return null!=(0,b.OB)().global.fetch?(0,b.OB)().global.fetch(e,t):(null==xe&&(xe=ye()),xe(e,t))}now(){const e=process.hrtime();return 1e3*e[0]+e[1]/1e6}encode(e,t){if("utf-8"!==t&&"utf8"!==t)throw new Error(`Node built-in encoder only supports utf-8, but got ${t}`);return this.textEncoder.encode(e)}decode(e,t){return 0===e.length?"":new this.util.TextDecoder(t).decode(e)}}(0,b.OB)().get("IS_NODE")&&!(0,b.OB)().get("IS_BROWSER")&&(0,b.OB)().setPlatform("node",new be);var ve=n(3332),we=n(8857),ke=n(7484),Se=n(4502),Ne=n(5426);(0,f.wv)();const Te={buffer:ve.f,cast:we.p,clone:ke.d,print:Se.S};(0,Ne.Vp)(Te);function Ie(e){return new Promise((e=>setTimeout(e))).then(e)}class $e{constructor(e){if(!(0,b.OB)().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");e.startsWith($e.URL_SCHEME)&&(e=e.slice($e.URL_SCHEME.length)),null!=e&&0!==e.length||(e="model"),this.modelJsonFileName=e+".json",this.weightDataFileName=e+".weights.bin"}async save(e){if("undefined"===typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");const t=window.URL.createObjectURL(new Blob([e.weightData],{type:"application/octet-stream"}));if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");{const n=A(e,[{paths:["./"+this.weightDataFileName],weights:e.weightSpecs}]),r=window.URL.createObjectURL(new Blob([JSON.stringify(n)],{type:"application/json"})),a=null==this.modelJsonAnchor?document.createElement("a"):this.modelJsonAnchor;if(a.download=this.modelJsonFileName,a.href=r,await Ie((()=>a.dispatchEvent(new MouseEvent("click")))),null!=e.weightData){const e=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor;e.download=this.weightDataFileName,e.href=t,await Ie((()=>e.dispatchEvent(new MouseEvent("click"))))}return{modelArtifactsInfo:D(e)}}}}$e.URL_SCHEME="downloads://";class Ce{constructor(e){if(null==e||e.length<1)throw new Error(`When calling browserFiles, at least 1 file is required, but received ${e}`);this.jsonFile=e[0],this.weightsFiles=e.slice(1)}async load(){return new Promise(((e,t)=>{const n=new FileReader;n.onload=n=>{const r=JSON.parse(n.target.result),a=r.modelTopology;if(null==a)return void t(new Error(`modelTopology field is missing from file ${this.jsonFile.name}`));if(null==r.weightsManifest)return void t(new Error(`weightManifest field is missing from file ${this.jsonFile.name}`));if(0===this.weightsFiles.length)return void e({modelTopology:a});const s=O(r,(e=>this.loadWeights(e)));e(s)},n.onerror=e=>t(`Failed to read model topology and weights manifest JSON from file '${this.jsonFile.name}'. BrowserFiles supports loading Keras-style tf.Model artifacts only.`),n.readAsText(this.jsonFile)}))}loadWeights(e){const t=[],n=[];for(const s of e)t.push(...s.weights),n.push(...s.paths);const r=this.checkManifestAndWeightFiles(e),a=n.map((e=>this.loadWeightsFile(e,r[e])));return Promise.all(a).then((e=>[t,_(e)]))}loadWeightsFile(e,t){return new Promise(((n,r)=>{const a=new FileReader;a.onload=e=>{const t=e.target.result;n(t)},a.onerror=t=>r(`Failed to weights data from file of path '${e}'.`),a.readAsArrayBuffer(t)}))}checkManifestAndWeightFiles(e){const t=[],n=this.weightsFiles.map((e=>R(e.name))),r={};for(const a of e)a.paths.forEach((e=>{const a=R(e);if(-1!==t.indexOf(a))throw new Error(`Duplicate file basename found in weights manifest: '${a}'`);if(t.push(a),-1===n.indexOf(a))throw new Error(`Weight file with basename '${a}' is not provided.`);r[e]=this.weightsFiles[n.indexOf(a)]}));if(t.length!==this.weightsFiles.length)throw new Error(`Mismatch in the number of files in weights manifest (${t.length}) and the number of weight files provided (${this.weightsFiles.length}).`);return r}}function Ee(e){return new Ce(e)}function _e(e,t,n,r){!function(e){(0,S.hu)(null!=e&&Array.isArray(e)&&e.length>0,(()=>"promises must be a none empty array"))}(e),function(e,t){(0,S.hu)(e>=0&&e<=1,(()=>`Progress fraction must be in range [0, 1], but got startFraction ${e}`)),(0,S.hu)(t>=0&&t<=1,(()=>`Progress fraction must be in range [0, 1], but got endFraction ${t}`)),(0,S.hu)(t>=e,(()=>`startFraction must be no more than endFraction, but got startFraction ${e} and endFraction ${t}`))}(n=null==n?0:n,r=null==r?1:r);let a=0;return Promise.all(e.map((s=>(s.then((s=>{const o=n+ ++a/e.length*(r-n);return t(o),s})),s))))}async function Re(e,t){null==t&&(t={});const n=null==t.fetchFunc?(0,b.OB)().platform.fetch:t.fetchFunc,r=e.map((e=>n(e,t.requestInit,{isBinary:!0}))),a=(null==t.onProgress?await Promise.all(r):await _e(r,t.onProgress,0,.5)).map((e=>e.arrayBuffer()));return null==t.onProgress?await Promise.all(a):await _e(a,t.onProgress,.5,1)}async function Ae(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;const a=e=>Re(e,{requestInit:r}),s=Oe(a);return s(e,t,n)}function Oe(e){return async function(t){let n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=arguments.length>2?arguments[2]:void 0;const a=t.map((()=>!1)),s={},o=null!=r?r.map((()=>!1)):[],i=[];if(t.forEach(((e,t)=>{let n=0;e.weights.forEach((e=>{const u="quantization"in e?e.quantization.dtype:e.dtype,l=N[u]*S.NA(e.shape),c=()=>{a[t]=!0,null==s[t]&&(s[t]=[]),s[t].push({manifestEntry:e,groupOffset:n,sizeBytes:l})};null!=r?r.forEach(((t,n)=>{t===e.name&&(c(),o[n]=!0)})):c(),i.push(e.name),n+=l}))})),!o.every((e=>e))){const e=r.filter(((e,t)=>!o[t]));throw new Error(`Could not find weights in manifest with names: ${e.join(", ")}. \nManifest JSON has weights with names: ${i.join(", ")}.`)}const u=a.reduce(((e,t,n)=>(t&&e.push(n),e)),[]),l=[];u.forEach((e=>{t[e].paths.forEach((e=>{const t=n+(n.endsWith("/")?"":"/")+e;l.push(t)}))}));const c=await e(l),d={};let p=0;return u.forEach((e=>{const n=t[e].paths.length;let r=0;for(let t=0;t<n;t++)r+=c[p+t].byteLength;const a=new ArrayBuffer(r),o=new Uint8Array(a);let i=0;for(let t=0;t<n;t++){const e=new Uint8Array(c[p+t]);o.set(e,i),i+=e.byteLength}s[e].forEach((e=>{const t=I(a.slice(e.groupOffset,e.groupOffset+e.sizeBytes),[e.manifestEntry]);for(const n in t)d[n]=t[n]})),p+=n})),d}}B.registerSaveRouter((e=>(0,b.OB)().getBool("IS_BROWSER")&&!Array.isArray(e)&&e.startsWith($e.URL_SCHEME)?function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"model";return new $e(e)}(e.slice($e.URL_SCHEME.length)):null));class De{constructor(e,t){if(this.DEFAULT_METHOD="POST",null==t&&(t={}),this.weightPathPrefix=t.weightPathPrefix,this.onProgress=t.onProgress,this.weightUrlConverter=t.weightUrlConverter,null!=t.fetchFunc?((0,S.hu)("function"===typeof t.fetchFunc,(()=>"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)")),this.fetch=t.fetchFunc):this.fetch=(0,b.OB)().platform.fetch,(0,S.hu)(null!=e&&e.length>0,(()=>"URL path for http must not be null, undefined or empty.")),Array.isArray(e)&&(0,S.hu)(2===e.length,(()=>`URL paths for http must have a length of 2, (actual length is ${e.length}).`)),this.path=e,null!=t.requestInit&&null!=t.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=t.requestInit||{}}async save(e){if(e.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");const t=Object.assign({method:this.DEFAULT_METHOD},this.requestInit);t.body=new FormData;const n=A(e,[{paths:["./model.weights.bin"],weights:e.weightSpecs}]);t.body.append("model.json",new Blob([JSON.stringify(n)],{type:"application/json"}),"model.json"),null!=e.weightData&&t.body.append("model.weights.bin",new Blob([e.weightData],{type:"application/octet-stream"}),"model.weights.bin");const r=await this.fetch(this.path,t);if(r.ok)return{modelArtifactsInfo:D(e),responses:[r]};throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ${r.status}.`)}async load(){const e=await this.fetch(this.path,this.requestInit);if(!e.ok)throw new Error(`Request to ${this.path} failed with status code ${e.status}. Please verify this URL points to the model JSON of the model to load.`);let t;try{t=await e.json()}catch(a){let e=`Failed to parse model JSON of response from ${this.path}.`;throw this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e)}const n=t.modelTopology,r=t.weightsManifest;if(null==n&&null==r)throw new Error(`The JSON from HTTP path ${this.path} contains neither model topology or manifest for weights.`);return O(t,(e=>this.loadWeights(e)))}async loadWeights(e){const t=Array.isArray(this.path)?this.path[1]:this.path,[n,r]=function(e){const t=e.lastIndexOf("/"),n=e.lastIndexOf("?"),r=e.substring(0,t),a=n>t?e.substring(n):"";return[r+"/",a]}(t),a=this.weightPathPrefix||n,s=[];for(const u of e)s.push(...u.weights);const o=[],i=[];for(const u of e)for(const e of u.paths)null!=this.weightUrlConverter?i.push(this.weightUrlConverter(e)):o.push(a+e+r);this.weightUrlConverter&&o.push(...await Promise.all(i));return[s,_(await Re(o,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress}))]}}function Fe(e){return null!=e.match(De.URL_SCHEME_REGEX)}De.URL_SCHEME_REGEX=/^https?:\/\//;const Be=(e,t)=>{if("undefined"===typeof fetch&&(null==t||null==t.fetchFunc))return null;{let n=!0;if(n=Array.isArray(e)?e.every((e=>Fe(e))):Fe(e),n)return Me(e,t)}return null};function Me(e,t){return new De(e,t)}function Pe(e,t){return Me(e,t)}B.registerSaveRouter(Be),B.registerLoadRouter(Be);class Le{constructor(e){this.modelArtifacts=e}load(){return this.modelArtifacts}}class Ve{constructor(e){this.saveHandler=e}save(e){return this.saveHandler(e)}}class ze{constructor(e){e.load&&(this.load=()=>Promise.resolve(e.load())),e.save&&(this.save=t=>Promise.resolve(e.save(t)))}}function Ue(e,t,n,r){const a=arguments;return new ze(We(...a))}function We(e,t,n,r){if(1===arguments.length){return null!=e.modelTopology||null!=e.weightSpecs?new Le(e):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Le({modelTopology:e}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Le({modelTopology:e,weightSpecs:t,weightData:n,trainingConfig:r})}function Ge(e){return new Ve(e)}function He(e){return new Ve(e)}var qe=n(3994),Xe=n(1233),Ke=n(5808),je=n(4894),Ye=n(9529);const Qe=(0,je.op)({confusionMatrix_:function(e,t,n){const r=(0,qe._1)(e,"labels","confusionMatrix"),a=(0,qe._1)(t,"predictions","confusionMatrix");S.hu(null==n||n>0&&Number.isInteger(n),(()=>`If provided, numClasses must be a positive integer, but got ${n}`)),S.hu(1===r.rank,(()=>`Expected the rank of labels to be 1, but got ${r.rank}`)),S.hu(1===a.rank,(()=>`Expected the rank of predictions to be 1, but got ${a.rank}`)),S.hu(r.shape[0]===a.shape[0],(()=>`Mismatch in the number of examples: ${r.shape[0]} vs. ${a.shape[0]}. Labels and predictions should have the same number of elements.`)),S.hu(n>0&&Number.isInteger(n),(()=>`numClasses is required to be a positive integer, but got ${n}`));const s=(0,Ke.l)((0,we.p)(r,"int32"),n),o=(0,Ke.l)((0,we.p)(a,"int32"),n),i=(0,Ye.p)(s),u=(0,Xe.O)(i,o);return(0,we.p)(u,"int32")}});var Ze=n(6209),Je=n(8994),et=n(6137),tt=n(8970);let nt;function rt(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3;if(t>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==e)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");let n=!1,r=!1,a=!1,s=!1,o=!1,i=!1;if(e.data instanceof Uint8Array)n=!0;else if("undefined"!==typeof ImageData&&e instanceof ImageData)r=!0;else if("undefined"!==typeof HTMLVideoElement&&e instanceof HTMLVideoElement)a=!0;else if("undefined"!==typeof HTMLImageElement&&e instanceof HTMLImageElement)s=!0;else if(null!=e.getContext)o=!0;else{if(!("undefined"!==typeof ImageBitmap&&e instanceof ImageBitmap))throw new Error(`pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was ${e.constructor.name}`);i=!0}if(a){const t=2;if(a&&e.readyState<t)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}const u=(0,et.pI)(Je.eB,f.BV.backendName);if(null!=u){const n={pixels:e},r={numChannels:t};return f.BV.runKernel(Je.eB,n,r)}const[l,c]=a?[e.videoWidth,e.videoHeight]:[e.width,e.height];let d,p;if(o)d=e.getContext("2d").getImageData(0,0,l,c).data;else if(r||n)d=e.data;else if(s||a||i){if(null==nt)if("undefined"===typeof document){if("undefined"===typeof OffscreenCanvas||"undefined"===typeof OffscreenCanvasRenderingContext2D)throw new Error("Cannot parse input in current context. Reason: OffscreenCanvas Context2D rendering is not supported.");nt=new OffscreenCanvas(1,1).getContext("2d")}else nt=document.createElement("canvas").getContext("2d",{willReadFrequently:!0});nt.canvas.width=l,nt.canvas.height=c,nt.drawImage(e,0,0,l,c),d=nt.getImageData(0,0,l,c).data}if(4===t)p=new Int32Array(d);else{const e=l*c;p=new Int32Array(e*t);for(let n=0;n<e;n++)for(let e=0;e<t;++e)p[n*t+e]=d[4*n+e]}const h=[c,l,t];return(0,tt.w)(p,h,"int32")}function at(e){return"undefined"!==typeof window&&"undefined"!==typeof ImageBitmap&&window.hasOwnProperty("createImageBitmap")&&!(e instanceof ImageBitmap)&&function(e){return null!=e&&0!==e.width&&0!==e.height}(e)&&!function(e){return null!=e&&e.data instanceof Uint8Array}(e)}async function st(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:3,n=null;if((0,b.OB)().getBool("WRAP_TO_IMAGEBITMAP")&&at(e)){let t;try{t=await createImageBitmap(e,{premultiplyAlpha:"none"})}catch(r){t=null}n=null!=t&&t.width===e.width&&t.height===e.height?t:e}else n=e;return rt(n,t)}async function ot(e,t){let n=(0,qe._1)(e,"img","toPixels");if(!(e instanceof Ne.es)){const e=n;n=(0,we.p)(e,"int32"),e.dispose()}if(2!==n.rank&&3!==n.rank)throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${n.rank}.`);const[r,a]=n.shape.slice(0,2),s=2===n.rank?1:n.shape[2];if(s>4||2===s)throw new Error(`toPixels only supports depth of size 1, 3 or 4 but got ${s}`);if("float32"!==n.dtype&&"int32"!==n.dtype)throw new Error(`Unsupported type for toPixels: ${n.dtype}. Please use float32 or int32 tensors.`);const o=await n.data(),i="float32"===n.dtype?255:1,u=new Uint8ClampedArray(a*r*4);for(let l=0;l<r*a;++l){const e=[0,0,0,255];for(let r=0;r<s;r++){const t=o[l*s+r];if("float32"===n.dtype){if(t<0||t>1)throw new Error(`Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered ${t}.`)}else if("int32"===n.dtype&&(t<0||t>255))throw new Error(`Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered ${t}.`);1===s?(e[0]=t*i,e[1]=t*i,e[2]=t*i):e[r]=t*i}const t=4*l;u[t+0]=Math.round(e[0]),u[t+1]=Math.round(e[1]),u[t+2]=Math.round(e[2]),u[t+3]=Math.round(e[3])}if(null!=t){t.width=a,t.height=r;const e=t.getContext("2d"),n=new ImageData(u,a,r);e.putImageData(n,0,0)}return n!==e&&n.dispose(),u}const it=(0,je.op)({fromPixels_:rt});function ut(e,t){const n=e.shape.length,r=t.shape.length;if(n<1)throw new Error(`tf.gatherND() expects the input to be rank 1 or higher, but the rank was ${n}.`);if(r<1)throw new Error(`tf.gatherND() expects the indices to be rank 1 or higher, but the rank was ${r}.`);if("int32"!==t.dtype)throw new Error(`tf.gatherND() expects the indices to be int32 type, but the dtype was ${t.dtype}.`);if(t.shape[r-1]>n)throw new Error(`index innermost dimension length must be <= tensor rank; saw: ${t.shape[r-1]} vs. ${n}`);if(0===(0,S.NA)(e.shape))throw new Error(`Requested more than 0 entries, but input is empty. Input shape: ${e.shape}.`);const a=t.shape,s=a[a.length-1];let o=1;for(let d=0;d<a.length-1;++d)o*=a[d];const i=e.shape,u=a.slice();u.pop();let l=1;for(let d=s;d<n;++d)l*=i[d],u.push(i[d]);const c=[...(0,S.e3)(e.shape).map((e=>e/l)),1].slice(0,s);return[u,o,l,c]}var lt=n(8257);function ct(e,t,n){const r=e.shape.length;S.hu(r===t.length,(()=>`Error in slice${r}D: Length of begin ${t} must match the rank of the array (${r}).`)),S.hu(r===n.length,(()=>`Error in slice${r}D: Length of size ${n} must match the rank of the array (${r}).`));for(let a=0;a<r;++a)S.hu(t[a]+n[a]<=e.shape[a],(()=>`Error in slice${r}D: begin[${a}] + size[${a}] (${t[a]+n[a]}) would overflow input.shape[${a}] (${e.shape[a]})`))}function dt(e){const t=[];let n=0;for(;e>0;)1&e&&t.push(n),e/=2,n++;return t}function pt(e,t,n){const r=[];for(let a=0;a<e.length;a++)r[a]=Math.ceil((t[a]-e[a])/n[a]);return r}function ht(e,t,n,r){const a=[...e];for(let s=a.length;s<r.length;s++)a.push(1);for(let s=0;s<n;s++)0===s?a[t]=1:(a.splice(t,0,1),a.pop());return a}function ft(e,t,n){return n<=e?n:n-(t-1)}function mt(e,t){const n=[];for(let r=0;r<e;r++)n.push(t+r);return n}function gt(e,t,n,r,a,s,o,i,u){const l=e.length;let c=new Array(l),d=new Array(l),p=new Array(l);if(t.length&&n>0){const u=t[0],l=n+1;c=yt(o,u,l,r,e),d=xt(i,u,l,a,e),p=ht(s,u,l,e)}else for(let h=0;h<l;h++)c[h]=vt(o,r,s,e,h,u),d[h]=wt(i,a,s,e,h,u),p[h]=bt(s,h,u);return{begin:c,end:d,strides:p}}function yt(e,t,n,r,a){const s=[...a],o=mt(n,t);for(let i=0;i<s.length;i++)if(o.indexOf(i)>-1)s[i]=0;else{const a=ft(t,n,i);let o=r[a];e&1<<a&&(o=0),s[i]=o}return s}function xt(e,t,n,r,a){const s=[...a],o=mt(n,t);for(let i=0;i<s.length;i++)if(o.indexOf(i)>-1)s[i]=Number.MAX_SAFE_INTEGER;else{const a=ft(t,n,i);let o=r[a];e&1<<a&&(o=Number.MAX_SAFE_INTEGER),s[i]=o}for(let i=0;i<s.length;i++){const e=a[i];s[i]<0&&(s[i]+=e),s[i]=S.uZ(0,s[i],a[i])}return s}function bt(e,t,n){let r=e[t];return(n&1<<t||null==r)&&(r=1),r}function vt(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=S.uZ(0,o,u-1),o}function wt(e,t,n,r,a,s){let o=t[a];const i=n[a]||1;(e&1<<a||s&1<<a||null==o)&&(o=i>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);const u=r[a];return o<0&&(o+=u),o=i>0?S.uZ(0,o,u):S.uZ(-1,o,u-1),o}function kt(e,t,n){let r=n.length;for(let a=0;a<n.length;a++)if(n[a]>1){r=a;break}for(let a=r+1;a<n.length;a++)if(t[a]>0||n[a]!==e[a])return!1;return!0}function St(e,t){let n=e.length>0?e[e.length-1]:1;for(let r=0;r<e.length-1;r++)n+=e[r]*t[r];return n}function Nt(e,t,n){let r;const a=e.shape.length;let s;return r="number"===typeof t?[t,...new Array(a-1).fill(0)]:t.length<a?t.concat(new Array(a-t.length).fill(0)):t.slice(),r.forEach((e=>{S.hu(-1!==e,(()=>"slice() does not support negative begin indexing."))})),s=null==n?new Array(a).fill(-1):"number"===typeof n?[n,...new Array(a-1).fill(-1)]:n.length<a?n.concat(new Array(a-n.length).fill(-1)):n,s=s.map(((t,n)=>t>=0?t:(S.hu(-1===t,(()=>`Negative size values should be exactly -1 but got ${t} for the slice() size at index ${n}.`)),e.shape[n]-r[n]))),[r,s]}function Tt(e,t,n,r,a,s,o,i,u){let l;if(null==r?(l=new Array(t.length),l.fill(1)):l=r,null!=o&&0!==(o&o-1))throw new Error("Multiple ellipses in slice is not allowed.");let c=!1;const d={dims:l.length,numAddAxisAfterEllipsis:0,begin:t.slice(),end:n.slice(),strides:l.slice(),beginMask:a,endMask:s,ellipsisMask:o,newAxisMask:i,shrinkAxisMask:u};for(let x=0;x<d.dims;x++)c&&0!==(1<<x&i)&&d.numAddAxisAfterEllipsis++,1<<x&o&&(c=!0);c||(d.ellipsisMask|=1<<d.dims,d.dims++);const p={dims:e.length,beginMask:0,endMask:0,beginValid:!1,endValid:!1};!function(e,t){t.beginMask=0,t.endMask=0,t.shrinkAxisMask=0;let n=0;t.beginValid=null!=e.begin,t.endValid=null!=e.end,t.begin=new Array(t.dims),t.end=new Array(t.dims),t.strides=new Array(t.dims),t.finalShapeGatherIndices=[],t.finalShapeGatherIndicesSparse=[],t.inputShapeGatherIndicesSparse=new Array(t.dims);for(let r=0;r<e.dims;r++)if(1<<r&e.ellipsisMask){const a=Math.min(t.dims-(e.dims-r)+1+e.numAddAxisAfterEllipsis,t.dims);for(;n<a;n++)t.begin[n]=0,t.end[n]=0,t.strides[n]=1,t.beginMask|=1<<n,t.endMask|=1<<n,t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(-1),t.inputShapeGatherIndicesSparse[n]=r}else if(1<<r&e.newAxisMask)t.finalShapeGatherIndices.push(-2),t.finalShapeGatherIndicesSparse.push(-1);else{if(n===t.begin.length)throw Error(`Index out of range using input dim ${n}; input has only ${t.dims} dims, ${t.begin.length}.`);null!=e.begin&&(t.begin[n]=e.begin[r]),null!=e.end&&(t.end[n]=e.end[r]),t.strides[n]=e.strides[r],e.beginMask&1<<r&&(t.beginMask|=1<<n),e.endMask&1<<r&&(t.endMask|=1<<n),e.shrinkAxisMask&1<<r?(t.finalShapeGatherIndices.push(-1),t.finalShapeGatherIndicesSparse.push(-1),t.shrinkAxisMask|=1<<n):(t.finalShapeGatherIndices.push(n),t.finalShapeGatherIndicesSparse.push(r)),t.inputShapeGatherIndicesSparse[n]=r,n++}}(d,p);let h=!0,f=!0,m=!0;const g=[],y=[];for(let x=0;x<e.length;++x){if(0===p.strides[x])throw Error(`strides[${x}] must be non-zero`);const t=!!(p.shrinkAxisMask&1<<x),n=e[x];if(-1===n){g.push(t?1:-1);continue}const r=[p.beginMask&1<<x,p.endMask&1<<x],a=[p.strides[x]>0?0:-1,p.strides[x]>0?n:n-1];if(t&&p.strides[x]<=0)throw Error("only stride 1 allowed on non-range indexing.");m=m&&1===p.strides[x];const s=!!(p.beginMask&1<<x&&p.endMask&1<<x);if(p.beginValid&&p.endValid){if(t){const e=p.begin[x]<0?n+p.begin[x]:p.begin[x];if(p.begin[x]=e,p.end[x]=p.begin[x]+1,e<0||e>=n)throw Error(`slice index ${p.begin[x]} of dimension ${x} out of bounds.`)}else p.begin[x]=It(p.begin[x],0,p.strides[x],n,r,a),p.end[x]=It(p.end[x],1,p.strides[x],n,r,a);const e=1===p.strides[x]&&0===p.begin[x]&&p.end[x]===n;h=h&&e,f=f&&(0===x&&1===p.strides[x]||e)}else h=h&&1===p.strides[x]&&s,f=f&&(0===x&&1===p.strides[x]||s);let o,i=!1;if(p.beginValid&&p.endValid?(o=p.end[x]-p.begin[x],i=!0):t?(o=1,i=!0):s&&n>=0&&(o=p.strides[x]<0?-n:n,i=!0),i){let e;e=0===o||o<0!==p.strides[x]<0?0:Math.trunc(o/p.strides[x])+(o%p.strides[x]!==0?1:0),g.push(e)}else g.push(-1)}for(let x=0;x<p.finalShapeGatherIndices.length;++x){const e=p.finalShapeGatherIndices[x];e>=0?y.push(g[e]):-2===e&&y.push(1)}return{finalShapeSparse:y.filter(((e,t)=>-2!==p.finalShapeGatherIndices[t])),finalShape:y,isIdentity:h,sliceDim0:f,isSimpleSlice:m,begin:p.begin,end:p.end,strides:p.strides}}function It(e,t,n,r,a,s){if(a[t])return n>0?s[t]:s[t+1&1];{const t=e<0?r+e:e;return t<s[0]?s[0]:t>s[1]?s[1]:t}}class $t{getClassName(){return this.constructor.className}static fromConfig(e,t){return new e(t)}}class Ct{constructor(){this.classNameMap={}}static getMap(){return null==Ct.instance&&(Ct.instance=new Ct),Ct.instance}static register(e){Ct.getMap().classNameMap[e.className]=[e,e.fromConfig]}}function Et(e){(0,S.hu)(null!=e.className,(()=>"Class being registered does not have the static className property defined.")),(0,S.hu)("string"===typeof e.className,(()=>"className is required to be a string, but got type "+typeof e.className)),(0,S.hu)(e.className.length>0,(()=>"Class being registered has an empty-string as its className, which is disallowed.")),Ct.register(e)}var _t=n(9337),Rt=n(7240);const At=.1;function Ot(e,t,n){return null==n&&(n=Dt()),Ft(e,t,((e,t)=>Lt(e,t,n)))}function Dt(){return 32===f.BV.backend.floatPrecision()?.001:At}function Ft(e,t,n){let r=!0;if(((0,S.fU)(e)||(0,S.fU)(t))&&(r=!1),(0,S.fU)(e)&&(0,S.fU)(t)&&(r=!0),r){const n=e.constructor.name,r=t.constructor.name;if(n!==r)throw new Error(`Arrays are of different type. Actual: ${n}. Expected: ${r}`)}if(Array.isArray(e)&&Array.isArray(t)){const n=(0,qe.C)(e),r=(0,qe.C)(t);if(!(0,S.cO)(n,r))throw new Error(`Arrays have different shapes. Actual: [${n}]. Expected: [${r}]`)}const a=(0,S.fU)(e)?e:(0,S.xH)(e),s=(0,S.fU)(t)?t:(0,S.xH)(t);if(a.length!==s.length)throw new Error(`Arrays have different lengths actual: ${a.length} vs expected: ${s.length}.\nActual:   ${a}.\nExpected: ${s}.`);for(let o=0;o<s.length;++o){const e=a[o],t=s[o];if(!n(e,t))throw new Error(`Arrays differ: actual[${o}] = ${e}, expected[${o}] = ${t}.\nActual:   ${a}.\nExpected: ${s}.`)}}function Bt(e,t){e().then((()=>t.fail()),(()=>t()))}function Mt(e,t){const n="string"===typeof t||"number"===typeof t||"boolean"===typeof t?[t]:t;return(0,S.HD)(e)||(0,S.HD)(e[0])||(0,S.HD)(t)||(0,S.HD)(t[0])?Ft(e,n,((e,t)=>e==t)):Ft(e,t,((e,t)=>Lt(e,t,0)))}function Pt(e,t,n){if(null==n&&(n=Dt()),!Lt(e,t,n))throw new Error(`Numbers differ: actual === ${e}, expected === ${t}`)}function Lt(e,t,n){return!isFinite(e)&&!isFinite(t)||!(isNaN(e)||isNaN(t)||Math.abs(e-t)>n)}function Vt(e,t,n){for(let r=0;r<e.length;r++)if(e[r]<t||e[r]>n)throw new Error(`Value out of range:${e[r]} low: ${t}, high: ${n}`)}function zt(e,t){const n=new Float32Array(e),r=new Float32Array(t);if(n.length!==r.length)throw new Error(`Expected ArrayBuffer to be of length ${r.length}, but it was ${n.length}`);for(let a=0;a<r.length;a++)if(n[a]!==r[a])throw new Error(`Expected ArrayBuffer value at ${a} to be ${r[a]} but got ${n[a]} instead`)}function Ut(e){for(let t=0;t<e.length;t++){const n=e[t];Array.isArray(n)?Ut(n):e[t]=(0,Rt.encodeString)(n)}return e}const Wt="3.19.0";var Gt=n(5087),Ht=n(6106),qt=n(3640),Xt=n(5600),Kt=n(2759),jt=n(5191),Yt=n(5552),Qt=n(8933),Zt=n(1480);class Jt extends $t{minimize(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2?arguments[2]:void 0;const{value:r,grads:a}=this.computeGradients(e,n);if(null!=n){const e=n.map((e=>({name:e.name,tensor:a[e.name]})));this.applyGradients(e)}else this.applyGradients(a);return(0,Gt.B9)(a),t?r:(r.dispose(),null)}get iterations(){return null==this.iterations_&&(this.iterations_=0),this.iterations_}incrementIterations(){this.iterations_=this.iterations+1}computeGradients(e,t){return(0,Qt.pn)(e,t)}dispose(){null!=this.iterations_&&(0,Gt.B9)(this.iterations_)}async saveIterations(){return null==this.iterations_&&(this.iterations_=0),{name:"iter",tensor:(0,Zt.i)(this.iterations_,"int32")}}async getWeights(){throw new Error("getWeights() is not implemented for this optimizer yet.")}async setWeights(e){throw new Error(`setWeights() is not implemented for this optimizer class ${this.getClassName()}`)}async extractIterations(e){return this.iterations_=(await e[0].tensor.data())[0],e.slice(1)}}Object.defineProperty(Jt,Symbol.hasInstance,{value:e=>null!=e.minimize&&null!=e.computeGradients&&null!=e.applyGradients});class en extends Jt{constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;super(),this.learningRate=e,this.rho=t,this.epsilon=n,this.accumulatedGrads=[],this.accumulatedUpdates=[],null==n&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];null==this.accumulatedGrads[n]&&(this.accumulatedGrads[n]={originalName:`${t}/accum_grad`,variable:(0,Gt.lu)((()=>(0,Yt.P)(r).variable(false)))}),null==this.accumulatedUpdates[n]&&(this.accumulatedUpdates[n]={originalName:`${t}/accum_var`,variable:(0,Gt.lu)((()=>(0,Yt.P)(r).variable(false)))});const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable,o=this.accumulatedUpdates[n].variable;(0,Gt.lu)((()=>{const e=(0,Ht.I)((0,Xt.d)(s,this.rho),(0,Xt.d)((0,jt.h)(a),1-this.rho)),t=(0,Xt.d)((0,qt.h)((0,Kt._)((0,Ht.I)(o,this.epsilon)),(0,Kt._)((0,Ht.I)(s,this.epsilon))),a),n=(0,Ht.I)((0,Xt.d)(o,this.rho),(0,Xt.d)((0,jt.h)(t),1-this.rho));s.assign(e),o.assign(n);const i=(0,Ht.I)((0,Xt.d)(t,-this.learningRate),r);r.assign(i)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedUpdates&&((0,Gt.B9)(this.accumulatedGrads.map((e=>e.variable))),(0,Gt.B9)(this.accumulatedUpdates.map((e=>e.variable))))}async getWeights(){const e=[...this.accumulatedGrads,...this.accumulatedUpdates];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){const t=(e=await this.extractIterations(e)).length/2;this.accumulatedGrads=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedUpdates=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.rho,t.epsilon)}}en.className="Adadelta",Et(en);var tn=n(6435);class nn extends Jt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1;super(),this.learningRate=e,this.initialAccumulatorValue=t,this.accumulatedGrads=[]}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];if(null==this.accumulatedGrads[n]){const e=!1;this.accumulatedGrads[n]={originalName:`${t}/accumulator`,variable:(0,Gt.lu)((()=>(0,tn.h)(r.shape,this.initialAccumulatorValue).variable(e)))}}const a=Array.isArray(e)?e[n].tensor:e[t];if(null==a)return;const s=this.accumulatedGrads[n].variable;(0,Gt.lu)((()=>{const e=(0,Ht.I)(s,(0,jt.h)(a));s.assign(e);const t=(0,Ht.I)((0,Xt.d)((0,qt.h)(a,(0,Kt._)((0,Ht.I)(e,f.BV.backend.epsilon()))),-this.learningRate),r);r.assign(t)}))})),this.incrementIterations()}dispose(){null!=this.accumulatedGrads&&(0,Gt.B9)(this.accumulatedGrads.map((e=>e.variable)))}async getWeights(){return[await this.saveIterations()].concat(this.accumulatedGrads.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulatedGrads=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}}static fromConfig(e,t){return new e(t.learningRate,t.initialAccumulatorValue)}}nn.className="Adagrad",Et(nn);var rn=n(7121),an=n(2454);class sn extends Jt{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null;super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.accumulatedFirstMoment=[],this.accumulatedSecondMoment=[],(0,Gt.lu)((()=>{this.accBeta1=(0,Zt.i)(t).variable(),this.accBeta2=(0,Zt.i)(n).variable()})),null==r&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,Gt.lu)((()=>{const n=(0,an.l)(1,this.accBeta1),r=(0,an.l)(1,this.accBeta2);t.forEach(((t,a)=>{const s=f.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,Gt.lu)((()=>(0,Yt.P)(s).variable(false)))}),null==this.accumulatedSecondMoment[a]&&(this.accumulatedSecondMoment[a]={originalName:`${t}/v`,variable:(0,Gt.lu)((()=>(0,Yt.P)(s).variable(false)))});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedSecondMoment[a].variable,l=(0,Ht.I)((0,Xt.d)(i,this.beta1),(0,Xt.d)(o,1-this.beta1)),c=(0,Ht.I)((0,Xt.d)(u,this.beta2),(0,Xt.d)((0,jt.h)(o),1-this.beta2)),d=(0,qt.h)(l,n),p=(0,qt.h)(c,r);i.assign(l),u.assign(c);const h=(0,Ht.I)((0,Xt.d)((0,qt.h)(d,(0,Ht.I)((0,Kt._)(p),this.epsilon)),-this.learningRate),s);s.assign(h)})),this.accBeta1.assign((0,Xt.d)(this.accBeta1,this.beta1)),this.accBeta2.assign((0,Xt.d)(this.accBeta2,this.beta2))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&(0,Gt.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedSecondMoment&&(0,Gt.B9)(this.accumulatedSecondMoment.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedFirstMoment,...this.accumulatedSecondMoment];return[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e),(0,Gt.lu)((()=>{this.accBeta1.assign((0,rn.s)(this.beta1,this.iterations_+1)),this.accBeta2.assign((0,rn.s)(this.beta2,this.iterations_+1))}));const t=e.length/2;this.accumulatedFirstMoment=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)}))),this.accumulatedSecondMoment=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon)}}sn.className="Adam",Et(sn);var on=n(6960),un=n(3255);class ln extends Jt{constructor(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0;super(),this.learningRate=e,this.beta1=t,this.beta2=n,this.epsilon=r,this.decay=a,this.accumulatedFirstMoment=[],this.accumulatedWeightedInfNorm=[],(0,Gt.lu)((()=>{this.iteration=(0,Zt.i)(0).variable(),this.accBeta1=(0,Zt.i)(t).variable()})),null==r&&(this.epsilon=f.BV.backend.epsilon())}applyGradients(e){const t=Array.isArray(e)?e.map((e=>e.name)):Object.keys(e);(0,Gt.lu)((()=>{const n=(0,an.l)(1,this.accBeta1),r=(0,qt.h)(-this.learningRate,(0,Ht.I)((0,Xt.d)(this.iteration,this.decay),1));t.forEach(((t,a)=>{const s=f.BV.registeredVariables[t];null==this.accumulatedFirstMoment[a]&&(this.accumulatedFirstMoment[a]={originalName:`${t}/m`,variable:(0,Yt.P)(s).variable(false)}),null==this.accumulatedWeightedInfNorm[a]&&(this.accumulatedWeightedInfNorm[a]={originalName:`${t}/v`,variable:(0,Yt.P)(s).variable(false)});const o=Array.isArray(e)?e[a].tensor:e[t];if(null==o)return;const i=this.accumulatedFirstMoment[a].variable,u=this.accumulatedWeightedInfNorm[a].variable,l=(0,Ht.I)((0,Xt.d)(i,this.beta1),(0,Xt.d)(o,1-this.beta1)),c=(0,Xt.d)(u,this.beta2),d=(0,on.W)(o),p=(0,un.g)(c,d);i.assign(l),u.assign(p);const h=(0,Ht.I)((0,Xt.d)((0,qt.h)(r,n),(0,qt.h)(l,(0,Ht.I)(p,this.epsilon))),s);s.assign(h)})),this.iteration.assign((0,Ht.I)(this.iteration,1)),this.accBeta1.assign((0,Xt.d)(this.accBeta1,this.beta1))})),this.incrementIterations()}dispose(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&(0,Gt.B9)(this.accumulatedFirstMoment.map((e=>e.variable))),null!=this.accumulatedWeightedInfNorm&&(0,Gt.B9)(this.accumulatedWeightedInfNorm.map((e=>e.variable)))}async getWeights(){throw new Error("getWeights() is not implemented for Adamax yet.")}async setWeights(e){throw new Error("setWeights() is not implemented for Adamax yet.")}getConfig(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}}static fromConfig(e,t){return new e(t.learningRate,t.beta1,t.beta2,t.epsilon,t.decay)}}ln.className="Adamax",Et(ln);class cn extends Jt{constructor(e){super(),this.learningRate=e,this.setLearningRate(e)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=Array.isArray(e)?e[n].tensor:e[t];if(null==r)return;const a=f.BV.registeredVariables[t];(0,Gt.lu)((()=>{const e=(0,Ht.I)((0,Xt.d)(this.c,r),a);a.assign(e)}))})),this.incrementIterations()}setLearningRate(e){this.learningRate=e,null!=this.c&&this.c.dispose(),this.c=(0,Gt.Cn)((0,Zt.i)(-e))}dispose(){this.c.dispose()}async getWeights(){return[await this.saveIterations()]}async setWeights(e){if(0!==(e=await this.extractIterations(e)).length)throw new Error("SGD optimizer does not have settable weights.")}getConfig(){return{learningRate:this.learningRate}}static fromConfig(e,t){return new e(t.learningRate)}}cn.className="SGD",Et(cn);class dn extends cn{constructor(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];super(e),this.learningRate=e,this.momentum=t,this.useNesterov=n,this.accumulations=[],this.m=(0,Zt.i)(this.momentum)}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t];if(null==this.accumulations[n]){const e=!1;this.accumulations[n]={originalName:`${t}/momentum`,variable:(0,Gt.lu)((()=>(0,Yt.P)(r).variable(e)))}}const a=this.accumulations[n].variable,s=Array.isArray(e)?e[n].tensor:e[t];null!=s&&(0,Gt.lu)((()=>{let e;const t=(0,Ht.I)((0,Xt.d)(this.m,a),s);e=this.useNesterov?(0,Ht.I)((0,Xt.d)(this.c,(0,Ht.I)(s,(0,Xt.d)(t,this.m))),r):(0,Ht.I)((0,Xt.d)(this.c,t),r),a.assign(t),r.assign(e)}))})),this.incrementIterations()}dispose(){this.m.dispose(),null!=this.accumulations&&(0,Gt.B9)(this.accumulations.map((e=>e.variable)))}setMomentum(e){this.momentum=e}async getWeights(){return[await this.saveIterations()].concat(this.accumulations.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);this.accumulations=e.map((e=>({originalName:e.name,variable:e.tensor.variable(false)})))}getConfig(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}}static fromConfig(e,t){return new e(t.learningRate,t.momentum,t.useNesterov)}}dn.className="Momentum",Et(dn);class pn extends Jt{constructor(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];if(super(),this.learningRate=e,this.decay=t,this.momentum=n,this.epsilon=r,this.accumulatedMeanSquares=[],this.accumulatedMoments=[],this.accumulatedMeanGrads=[],this.centered=a,null==r&&(this.epsilon=f.BV.backend.epsilon()),null==e)throw new Error("learningRate for RMSPropOptimizer must be defined.")}applyGradients(e){(Array.isArray(e)?e.map((e=>e.name)):Object.keys(e)).forEach(((t,n)=>{const r=f.BV.registeredVariables[t],a=!1;null==this.accumulatedMeanSquares[n]&&(this.accumulatedMeanSquares[n]={originalName:`${t}/rms`,variable:(0,Gt.lu)((()=>(0,Yt.P)(r).variable(a)))}),null==this.accumulatedMoments[n]&&(this.accumulatedMoments[n]={originalName:`${t}/momentum`,variable:(0,Gt.lu)((()=>(0,Yt.P)(r).variable(a)))}),null==this.accumulatedMeanGrads[n]&&this.centered&&(this.accumulatedMeanGrads[n]={originalName:`${t}/mg`,variable:(0,Gt.lu)((()=>(0,Yt.P)(r).variable(a)))});const s=Array.isArray(e)?e[n].tensor:e[t];if(null==s)return;const o=this.accumulatedMeanSquares[n].variable,i=this.accumulatedMoments[n].variable;(0,Gt.lu)((()=>{const e=(0,Ht.I)((0,Xt.d)(o,this.decay),(0,Xt.d)((0,jt.h)(s),1-this.decay));if(this.centered){const t=this.accumulatedMeanGrads[n].variable,a=(0,Ht.I)((0,Xt.d)(t,this.decay),(0,Xt.d)(s,1-this.decay)),u=(0,qt.h)((0,Xt.d)(s,this.learningRate),(0,Kt._)((0,an.l)(e,(0,Ht.I)((0,jt.h)(a),this.epsilon)))),l=(0,Ht.I)((0,Xt.d)(i,this.momentum),u);o.assign(e),t.assign(a),i.assign(l);const c=(0,an.l)(r,l);r.assign(c)}else{const e=(0,Ht.I)((0,Xt.d)(o,this.decay),(0,Xt.d)((0,jt.h)(s),1-this.decay)),t=(0,Ht.I)((0,Xt.d)(i,this.momentum),(0,qt.h)((0,Xt.d)(s,this.learningRate),(0,Kt._)((0,Ht.I)(e,this.epsilon))));o.assign(e),i.assign(t);const n=(0,an.l)(r,t);r.assign(n)}}))})),this.incrementIterations()}dispose(){null!=this.accumulatedMeanSquares&&(0,Gt.B9)(this.accumulatedMeanSquares.map((e=>e.variable))),null!=this.accumulatedMeanGrads&&this.centered&&(0,Gt.B9)(this.accumulatedMeanGrads.map((e=>e.variable))),null!=this.accumulatedMoments&&(0,Gt.B9)(this.accumulatedMoments.map((e=>e.variable)))}async getWeights(){const e=[...this.accumulatedMeanSquares,...this.accumulatedMoments];return this.centered&&e.push(...this.accumulatedMeanGrads),[await this.saveIterations()].concat(e.map((e=>({name:e.originalName,tensor:e.variable}))))}async setWeights(e){e=await this.extractIterations(e);const t=this.centered?e.length/3:e.length/2,n=!1;this.accumulatedMeanSquares=e.slice(0,t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.accumulatedMoments=e.slice(t,2*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))),this.centered&&(this.accumulatedMeanGrads=e.slice(2*t,3*t).map((e=>({originalName:e.name,variable:e.tensor.variable(n)}))))}getConfig(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}}static fromConfig(e,t){return new e(t.learningRate,t.decay,t.momentum,t.epsilon,t.centered)}}pn.className="RMSProp",Et(pn);class hn{static sgd(e){return new cn(e)}static momentum(e,t){return new dn(e,t,arguments.length>2&&void 0!==arguments[2]&&arguments[2])}static rmsprop(e){return new pn(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,arguments.length>4&&void 0!==arguments[4]&&arguments[4])}static adam(){return new sn(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null)}static adadelta(){return new en(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.001,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.95,arguments.length>2&&void 0!==arguments[2]?arguments[2]:null)}static adamax(){return new ln(arguments.length>0&&void 0!==arguments[0]?arguments[0]:.002,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.9,arguments.length>2&&void 0!==arguments[2]?arguments[2]:.999,arguments.length>3&&void 0!==arguments[3]?arguments[3]:null,arguments.length>4&&void 0!==arguments[4]?arguments[4]:0)}static adagrad(e){return new nn(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:.1)}}var fn=n(6846),mn=n(9300),gn=n(9397);const yn={sgd:hn.sgd,momentum:hn.momentum,adadelta:hn.adadelta,adagrad:hn.adagrad,rmsprop:hn.rmsprop,adamax:hn.adamax,adam:hn.adam},xn="undefined"!==typeof requestAnimationFrame?requestAnimationFrame:"undefined"!==typeof setImmediate?setImmediate:e=>e();function bn(){return new Promise((e=>xn((()=>e()))))}var vn=n(5722);function wn(e,t){const n=e[0].length;e.forEach(((e,t)=>{S.hu(e.length===n,(()=>`Error in concat${n}D: rank of tensors[${t}] must be the same as the rank of the rest (${n})`))})),S.hu(t>=0&&t<n,(()=>`Error in concat${n}D: axis must be between 0 and ${n-1}.`));const r=e[0];e.forEach(((e,a)=>{for(let s=0;s<n;s++)S.hu(s===t||e[s]===r[s],(()=>`Error in concat${n}D: Shape of tensors[${a}] (${e}) does not match the shape of the rest (${r}) along the non-concatenated axis ${a}.`))}))}function kn(e,t){const n=e[0].slice();for(let r=1;r<e.length;r++)n[t]+=e[r][t];return n}var Sn=n(2856),Nn=n(9997);const Tn=30;function In(e){return e<=Tn?e:(0,S.jP)(e,Math.floor(Math.sqrt(e)))}function $n(e,t,n){return[n*("number"===typeof e?e:e[0]),t*("number"===typeof e?e:e[1])]}function Cn(e,t,n){let r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],a=[];if(r)a=a.concat(t.slice(0)),a.push(e[0]/n),a=a.concat(e.slice(1));else{a=a.concat(e[0]);const n=t.length;for(let r=0;r<n;++r)a=a.concat([e[r+1]/t[r],t[r]]);a=a.concat(e.slice(n+1))}return a}function En(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const r=[];if(n){r.push(t);for(let n=t+1;n<e;++n)n<=2*t?(r.push(n),r.push(n-(t+1))):r.push(n)}else{const n=[],a=[];for(let r=1;r<e;++r)r>=2*t+1||r%2===1?a.push(r):n.push(r);r.push(...n),r.push(0),r.push(...a)}return r}function _n(e,t,n){let r=!(arguments.length>3&&void 0!==arguments[3])||arguments[3];const a=[];r?a.push(e[0]/n):a.push(e[0]*n);for(let s=1;s<e.length;++s)s<=t.length?r?a.push(t[s-1]*e[s]):a.push(e[s]/t[s-1]):a.push(e[s]);return a}function Rn(e,t){const n=[0];for(let r=0;r<t;++r)n.push(e[r][0]);return n}function An(e,t,n){const r=e.slice(0,1);for(let a=0;a<n;++a)r.push(e[a+1]-t[a][0]-t[a][1]);return r}const On=1.7580993408473768,Dn=1.0507009873554805,Fn=.3275911,Bn=.254829592,Mn=-.284496736,Pn=1.421413741,Ln=-1.453152027,Vn=1.061405429;var zn=n(4146);function Un(e,t){if(e.length!==t.length)throw new Error(`Cannot merge real and imag arrays of different lengths. real:${e.length}, imag: ${t.length}.`);const n=new Float32Array(2*e.length);for(let r=0;r<n.length;r+=2)n[r]=e[r/2],n[r+1]=t[r/2];return n}function Wn(e){const t=new Float32Array(e.length/2),n=new Float32Array(e.length/2);for(let r=0;r<e.length;r+=2)t[r/2]=e[r],n[r/2]=e[r+1];return{real:t,imag:n}}function Gn(e){const t=Math.ceil(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let a=0;a<e.length;a+=4)n[Math.floor(a/4)]=e[a],r[Math.floor(a/4)]=e[a+1];return{real:n,imag:r}}function Hn(e){const t=Math.floor(e.length/4),n=new Float32Array(t),r=new Float32Array(t);for(let a=2;a<e.length;a+=4)n[Math.floor(a/4)]=e[a],r[Math.floor(a/4)]=e[a+1];return{real:n,imag:r}}function qn(e,t){return{real:e[2*t],imag:e[2*t+1]}}function Xn(e,t,n,r){e[2*r]=t,e[2*r+1]=n}function Kn(e,t){const n=new Float32Array(e/2),r=new Float32Array(e/2);for(let a=0;a<Math.ceil(e/2);a++){const s=(t?2:-2)*Math.PI*(a/e);n[a]=Math.cos(s),r[a]=Math.sin(s)}return{real:n,imag:r}}function jn(e,t,n){const r=(n?2:-2)*Math.PI*(e/t);return{real:Math.cos(r),imag:Math.sin(r)}}const Yn="->",Qn=/->/g;function Zn(e,t){const n=((e=e.replace(/\s/g,"")).length-e.replace(Qn,"").length)/Yn.length;if(n<1)throw new Error("Equations without an arrow are not supported.");if(n>1)throw new Error('Equation must contain exactly one arrow ("->").');const[r,a]=e.split(Yn);(0,S.hu)(-1===r.indexOf("..."),(()=>'The ellipsis notation ("...") is not supported yet.'));const s=r.split(","),o=s.length;if(t!==o)throw new Error(`Expected ${o} input tensors, received ${t}`);if(o>2)throw new Error("Support for more than 2 input tensors is not implemented yet.");const i=[];for(let d=0;d<a.length;++d){const e=a[d];if(!s.some((t=>-1!==t.indexOf(e))))throw new Error(`Output subscripts contain the label ${e} not present in the input subscripts.`);-1===i.indexOf(e)&&i.push(e)}for(let d=0;d<r.length;++d){const e=r[d];-1===i.indexOf(e)&&","!==e&&i.push(e)}const u=new Array(s.length);for(let d=0;d<o;++d){if(new Set(s[d].split("")).size!==s[d].length)throw new Error(`Found duplicate axes in input component ${s[d]}. Support for duplicate axes in input is not implemented yet.`);u[d]=[];for(let e=0;e<s[d].length;++e)u[d].push(i.indexOf(s[d][e]))}const l=i.length,c=[];for(let d=a.length;d<l;++d)c.push(d);return{allDims:i,summedDims:c,idDims:u}}function Jn(e,t){let n=new Array(e);n.fill(-1);for(let a=0;a<t.length;++a)n[t[a]]=a;const r=[];for(let a=0;a<e;++a)-1===n[a]&&r.push(a);return n=n.filter((e=>-1!==e)),{permutationIndices:n,expandDims:r}}function er(e,t,n){const r=new Array(e);for(let a=0;a<n.length;++a){const e=n[a].shape;for(let n=0;n<t[a].length;++n)void 0===r[t[a][n]]?r[t[a][n]]=e[n]:(0,S.hu)(r[t[a][n]]===e[n],(()=>`Expected dimension ${r[t[a][n]]} at axis ${n} of input shaped ${JSON.stringify(e)}, but got dimension ${e[n]}`))}}function tr(e,t){const n=e,r=[];let a=0;0===e.length&&n.push(-1),a=e.length+1;for(let o=0;o<a;++o)r.push([]);const s=[];for(let o=0;o<n.length;++o){const e=rr(t,n[o]);for(const t of e)-1===s.indexOf(t)&&(r[o].push(t),s.push(t))}return{path:n,steps:r}}function nr(e){return e.every(((e,t)=>e===t))}function rr(e,t){const n=[];for(let r=0;r<e.length;++r)0!==e[r].length&&-1===e[r].indexOf(t)&&-1!==t||n.push(r);return n}function ar(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=[];if("number"===typeof t)(0,S.hu)(e.shape[n]%t===0,(()=>"Number of splits must evenly divide the axis.")),r=new Array(t).fill(e.shape[n]/t);else{const a=t.reduce(((e,t)=>(-1===t&&(e+=1),e)),0);(0,S.hu)(a<=1,(()=>"There should be only one negative value in split array."));const s=t.indexOf(-1);if(-1!==s){const r=t.reduce(((e,t)=>t>0?e+t:e));t[s]=e.shape[n]-r}(0,S.hu)(e.shape[n]===t.reduce(((e,t)=>e+t)),(()=>"The sum of sizes must match the size of the axis dimension.")),r=t}return r}function sr(e){return`Received SparseTensor with denseShape[0] = 0 but\n  indices.shape[0] = ${e}`}function or(e,t){return`indices(${e}, 0) is invalid: ${t} < 0`}function ir(e,t,n){return`indices(${e}, 0) is invalid: ${t} >= ${n}`}function ur(e,t){return`only one output dimension may be -1, not both ${e} and ${t}`}function lr(e,t){return`size ${e} must be non-negative, not ${t}`}function cr(){return"reshape cannot infer the missing input size for an empty tensor unless all specified input sizes are non-zero"}function dr(e,t){return`Input to reshape is a SparseTensor with ${(0,S.NA)(e)}\n  dense values, but the requested shape requires a multiple of ${(0,S.NA)(t)}. inputShape=${e} outputShape= ${t}`}function pr(e,t){return`Input to reshape is a tensor with ${(0,S.NA)(e)} dense values, but the requested shape has ${(0,S.NA)(t)}. inputShape=${e} outputShape=${t}`}function hr(){return"segment ids must be >= 0"}function fr(){return"segment ids are not increasing"}function mr(e,t){return`Segment id ${e} out of range [0, ${t}), possibly because segmentIds input is not sorted.`}function gr(e,t,n){return`Bad: indices[${e}] == ${t} out of range [0, ${n})`}function yr(e,t){let n,r=!1;for(e<=Tn?(n=e,r=!0):n=(0,S.jP)(e,Math.floor(Math.sqrt(e)));!r;)n>t||n===e?r=!0:n=(0,S.jP)(e,n+1);return n}function xr(e,t,n){const r=[],a=e.length;for(let s=0;s<a;s++)s!==t?r.push(e[s]):r.push(n);return r}function br(e,t,n,r){const a=t.shape.length,s=e.shape.length;if(0!==r&&(r<-a||r>a))throw new Error(`Expect batchDims in the range of [-${a}, ${a}], but got ${r}`);if(r<0&&(r+=a),r>s)throw new Error(`batchDims (${r}) must be less than rank(x) (\n    ${s}).`);if(n<r)throw new Error(`batchDims (${r}) must be less than or equal to axis (${n}).`);for(let d=0;d<r;++d)if(e.shape[d]!==t.shape[d])throw new Error(`x.shape[${d}]: ${e.shape[d]} should be equal to indices.shape[${d}]: ${t.shape[d]}.`);const o=e.shape[n],i=[];let u=1,l=1,c=1;for(let d=0;d<r;++d)i.push(e.shape[d]),u*=e.shape[d];for(let d=r;d<n;d++)i.push(e.shape[d]),l*=e.shape[d];for(let d=r;d<a;d++)i.push(t.shape[d]);for(let d=n+1;d<s;d++)i.push(e.shape[d]),c*=e.shape[d];return{batchSize:u,sliceSize:c,outerSize:l,dimSize:o,outputShape:i}}function vr(e){try{return e.map((e=>(0,Rt.decodeString)(e)))}catch(Tr){throw new Error(`Failed to decode encoded string bytes into utf-8, error: ${Tr}`)}}function wr(e){return e.map((e=>(0,Rt.encodeString)(e)))}var kr=n(3036),Sr=n(6791),Nr=n(6232)},8994:(e,t,n)=>{"use strict";n.d(t,{$H:()=>pt,$g:()=>J,$w:()=>K,Ac:()=>ge,BM:()=>Pe,By:()=>V,CA:()=>Te,D2:()=>Ut,Dl:()=>lt,Eh:()=>R,FK:()=>Ot,G3:()=>tn,GB:()=>Dt,Gc:()=>Mt,HE:()=>te,HZ:()=>ft,Hh:()=>Be,Hm:()=>gt,IK:()=>l,IM:()=>v,J$:()=>Se,J_:()=>be,Jh:()=>y,Kg:()=>ot,L8:()=>Bt,Ly:()=>N,M2:()=>p,MI:()=>Qt,MR:()=>At,MZ:()=>Re,NE:()=>ae,NZ:()=>je,O3:()=>Pt,OA:()=>ze,OR:()=>ce,OU:()=>Ue,OV:()=>Ve,Om:()=>ne,Oy:()=>m,PY:()=>Ee,Ph:()=>Tt,QC:()=>g,QR:()=>W,Qg:()=>xe,Qi:()=>at,Qv:()=>an,RF:()=>I,RO:()=>x,RQ:()=>Ct,Ru:()=>on,SX:()=>ee,SY:()=>r,Sb:()=>bt,Sp:()=>s,T0:()=>G,TQ:()=>Ft,TR:()=>L,To:()=>rn,Tr:()=>jt,Uy:()=>le,VG:()=>a,Vb:()=>Ke,Vc:()=>U,Vf:()=>_e,Vn:()=>Q,W0:()=>tt,XD:()=>sn,XL:()=>w,Xk:()=>Kt,Xz:()=>i,Y0:()=>oe,YF:()=>se,YW:()=>Vt,Yo:()=>Me,Zb:()=>$e,Zj:()=>zt,Zz:()=>E,_J:()=>qt,_V:()=>pn,_Y:()=>yt,_k:()=>b,_t:()=>Wt,a5:()=>Rt,aJ:()=>d,av:()=>ve,b9:()=>cn,bK:()=>Gt,bV:()=>kt,c1:()=>He,cW:()=>Jt,ci:()=>H,cy:()=>et,de:()=>ue,dp:()=>mt,e0:()=>wt,e6:()=>ct,e7:()=>Ie,eB:()=>ln,eE:()=>T,eZ:()=>Fe,ek:()=>Y,gJ:()=>$,h8:()=>un,hd:()=>re,i5:()=>_t,iH:()=>z,iJ:()=>ye,iW:()=>we,iZ:()=>me,ik:()=>M,jM:()=>f,jQ:()=>Xe,je:()=>de,kU:()=>Ce,kp:()=>nn,ku:()=>Qe,lu:()=>hn,ly:()=>st,m2:()=>Ht,mK:()=>vt,mT:()=>Le,mc:()=>P,mh:()=>A,mm:()=>o,n9:()=>Zt,nh:()=>Lt,nr:()=>Nt,o0:()=>ut,o2:()=>B,oF:()=>It,oH:()=>Z,oT:()=>u,p2:()=>$t,p4:()=>j,pe:()=>it,q1:()=>fe,q2:()=>Ge,q8:()=>qe,qC:()=>Oe,qI:()=>De,qW:()=>nt,qi:()=>he,qk:()=>ht,qw:()=>h,r7:()=>ke,s1:()=>Xt,sE:()=>Yt,sH:()=>pe,sJ:()=>c,sL:()=>q,us:()=>dn,uv:()=>Je,vF:()=>We,vt:()=>Ne,vw:()=>ie,w3:()=>Et,w6:()=>Ae,wU:()=>O,wY:()=>Ye,we:()=>rt,wm:()=>D,wx:()=>en,x1:()=>F,xJ:()=>dt,xQ:()=>St,xn:()=>C,y7:()=>X,yQ:()=>Ze,yj:()=>_,zb:()=>xt,zv:()=>S,zw:()=>k});const r="Abs",a="Acos",s="Acosh",o="Add",i="AddN",u="All",l="Any",c="ArgMax",d="ArgMin",p="Asin",h="Asinh",f="Atan",m="Atanh",g="Atan2",y="AvgPool",x="AvgPoolGrad",b="AvgPool3D",v="AvgPool3DGrad",w="BatchMatMul",k="BatchToSpaceND",S="Bincount",N="BroadcastTo",T="BroadcastArgs",I="Cast",$="Ceil",C="ClipByValue",E="Complex",_="ComplexAbs",R="Concat",A="Conv2D",O="Conv2DBackpropFilter",D="Conv2DBackpropInput",F="Conv3D",B="Conv3DBackpropFilterV2",M="Conv3DBackpropInputV2",P="Cos",L="Cosh",V="Cumprod",z="Cumsum",U="CropAndResize",W="DenseBincount",G="DepthToSpace",H="DepthwiseConv2dNative",q="DepthwiseConv2dNativeBackpropFilter",X="DepthwiseConv2dNativeBackpropInput",K="Diag",j="Dilation2D",Y="Dilation2DBackpropInput",Q="Dilation2DBackpropFilter",Z="RealDiv",J="Einsum",ee="Elu",te="EluGrad",ne="Erf",re="Equal",ae="Exp",se="ExpandDims",oe="Expm1",ie="FFT",ue="Fill",le="FlipLeftRight",ce="Floor",de="FloorDiv",pe="FusedBatchNorm",he="GatherV2",fe="GatherNd",me="Greater",ge="GreaterEqual",ye="Identity",xe="IFFT",be="Imag",ve="IsFinite",we="IsInf",ke="IsNan",Se="LeakyRelu",Ne="Less",Te="LessEqual",Ie="LinSpace",$e="Log",Ce="Log1p",Ee="LogicalAnd",_e="LogicalNot",Re="LogicalOr",Ae="LogicalXor",Oe="LogSoftmax",De="LowerBound",Fe="LRN",Be="LRNGrad",Me="Max",Pe="Maximum",Le="MaxPool",Ve="MaxPoolGrad",ze="MaxPool3D",Ue="MaxPool3DGrad",We="MaxPoolWithArgmax",Ge="Mean",He="Min",qe="Minimum",Xe="MirrorPad",Ke="Mod",je="Multinomial",Ye="Multiply",Qe="Neg",Ze="NotEqual",Je="NonMaxSuppressionV3",et="NonMaxSuppressionV4",tt="NonMaxSuppressionV5",nt="OnesLike",rt="OneHot",at="Pack",st="PadV2",ot="Pool",it="Pow",ut="Prelu",lt="Prod",ct="Range",dt="Real",pt="Reciprocal",ht="Relu",ft="Reshape",mt="ResizeNearestNeighbor",gt="ResizeNearestNeighborGrad",yt="ResizeBilinear",xt="ResizeBilinearGrad",bt="Relu6",vt="Reverse",wt="Round",kt="Rsqrt",St="ScatterNd",Nt="SearchSorted",Tt="Select",It="Selu",$t="Slice",Ct="Sin",Et="Sinh",_t="Sign",Rt="Sigmoid",At="Softplus",Ot="Sqrt",Dt="Sum",Ft="SpaceToBatchND",Bt="SplitV",Mt="Softmax",Pt="SparseFillEmptyRows",Lt="SparseReshape",Vt="SparseSegmentMean",zt="SparseSegmentSum",Ut="SparseToDense",Wt="SquaredDifference",Gt="Square",Ht="StridedSlice",qt="StringNGrams",Xt="StringSplit",Kt="StringToHashBucketFast",jt="Sub",Yt="Tan",Qt="Tanh",Zt="Tile",Jt="TopK",en="Transform",tn="Transpose",nn="Unique",rn="Unpack",an="UnsortedSegmentSum",sn="UpperBound",on="ZerosLike",un="Step",ln="FromPixels",cn="RotateWithOffset",dn="_FusedMatMul",pn="FusedConv2D",hn="FusedDepthwiseConv2D"},6137:(e,t,n)=>{"use strict";n.d(t,{Li:()=>p,T3:()=>m,bt:()=>f,nE:()=>h,pI:()=>u,tr:()=>c,uk:()=>l,wC:()=>d});var r=n(1283),a=n(1903),s=n(4146);const o=(0,a.R)("kernelRegistry",(()=>new Map)),i=(0,a.R)("gradRegistry",(()=>new Map));function u(e,t){const n=g(e,t);return o.get(n)}function l(e){return i.get(e)}function c(e){const t=o.entries(),n=[];for(;;){const{done:r,value:a}=t.next();if(r)break;const[s,o]=a,[i]=s.split("_");i===e&&n.push(o)}return n}function d(e){const{kernelName:t,backendName:n}=e,r=g(t,n);o.has(r)&&s.Z(`The kernel '${t}' for backend '${n}' is already registered`),o.set(r,e)}function p(e){const{kernelName:t}=e;i.has(t)&&(0,r.OB)().getBool("DEBUG")&&s.Z(`Overriding the gradient for '${t}'`),i.set(t,e)}function h(e,t){const n=g(e,t);if(!o.has(n))throw new Error(`The kernel '${e}' for backend '${t}' is not registered`);o.delete(n)}function f(e){if(!i.has(e))throw new Error(`The gradient '${e}' for backend is not registered`);i.delete(e)}function m(e,t){c(e).forEach((e=>{d(Object.assign({},e,{backendName:t}))}))}function g(e,t){return`${t}_${e}`}},4146:(e,t,n)=>{"use strict";n.d(t,{Z:()=>a,c:()=>s});var r=n(1283);function a(){(0,r.OB)().getBool("IS_TEST")||(0,r.OB)().getBool("PROD")||console.warn(...arguments)}function s(){(0,r.OB)().getBool("IS_TEST")||(0,r.OB)().getBool("PROD")||console.log(...arguments)}},6960:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({abs_:function(e){const t=(0,s._1)(e,"x","abs");if("complex64"===t.dtype){const e={x:t};return r.BV.runKernel(a.yj,e)}{const e={x:t};return r.BV.runKernel(a.SY,e)}}})},6106:(e,t,n)=>{"use strict";n.d(t,{I:()=>i});var r=n(16),a=n(8994),s=n(9337),o=n(3994);const i=(0,n(4894).op)({add_:function(e,t){let n=(0,o._1)(e,"a","add"),i=(0,o._1)(t,"b","add");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.mm,u)}})},5722:(e,t,n)=>{"use strict";n.d(t,{LJ:()=>c,Q3:()=>l,Vh:()=>s,YB:()=>a,kz:()=>o,lB:()=>u,rv:()=>i,sY:()=>d});var r=n(7258);function a(e,t){for(let n=0;n<e.length;++n)if(e[e.length-n-1]!==t-1-n)return!1;return!0}function s(e,t,n){const r=e.length+t.length,a=[];let s=0,o=0;for(let i=0;i<r;i++)-1===n.indexOf(i)?a.push(e[s++]):a.push(t[o++]);return a}function o(e,t){const n=[],r=e.length;for(let a=0;a<r;a++)-1===t.indexOf(a)&&n.push(e[a]);return[n,t.map((t=>e[t]))]}function i(e,t){return s(e,t.map((e=>1)),t)}function u(e,t,n){r.hu(a(t,n),(()=>`${e} supports only inner-most axes for now. Got axes ${t} and rank-${n} input.`))}function l(e,t){if(a(e,t))return null;const n=[];for(let r=0;r<t;++r)-1===e.indexOf(r)&&n.push(r);return e.forEach((e=>n.push(e))),n}function c(e){return e.map(((e,t)=>[t,e])).sort(((e,t)=>e[1]-t[1])).map((e=>e[0]))}function d(e,t){const n=[];for(let r=t-e;r<t;++r)n.push(r);return n}},6209:(e,t,n)=>{"use strict";function r(e,t){const n=e.length,r=[];for(let a=0;a<n;a++){const s=n-1-a,o=e[s]||1;(t[t.length-1-a]||1)>1&&1===o&&r.unshift(s)}return r}function a(e,t){const n=[];for(let r=0;r<t.length;r++){const a=e[e.length-r-1],s=t.length-r-1,o=t[s];(null==a||1===a&&o>1)&&n.unshift(s)}return n}function s(e,t){const n=[],r=Math.max(e.length,t.length);for(let a=0;a<r;a++){let r=e[e.length-a-1];null==r&&(r=1);let s=t[t.length-a-1];if(null==s&&(s=1),1===r)n.unshift(s);else if(1===s)n.unshift(r);else{if(r!==s){throw Error(`Operands could not be broadcast together with shapes ${e} and ${t}.`)}n.unshift(r)}}return n}n.r(t),n.d(t,{assertAndGetBroadcastShape:()=>s,getBroadcastDims:()=>r,getReductionAxes:()=>a})},3332:(e,t,n)=>{"use strict";n.d(t,{f:()=>s});var r=n(5426),a=n(7258);function s(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32",n=arguments.length>2?arguments[2]:void 0;return t=t||"float32",a.Mu(e),new r.YD(e,t,n)}},8857:(e,t,n)=>{"use strict";n.d(t,{p:()=>i});var r=n(16),a=n(8994),s=n(3994),o=n(7258);const i=(0,n(4894).op)({cast_:function(e,t){const n=(0,s._1)(e,"x","cast");if(!o.LP(t))throw new Error(`Failed to cast to unknown dtype ${t}`);if("string"===t&&"string"!==n.dtype||"string"!==t&&"string"===n.dtype)throw new Error("Only strings can be casted to strings");const i={x:n},u={dtype:t};return r.BV.runKernel(a.RF,i,u)}})},7484:(e,t,n)=>{"use strict";n.d(t,{d:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({clone_:function(e){const t={x:(0,s._1)(e,"x","clone","string_or_numeric")};return r.BV.runKernel(a.iJ,t)}})},2195:(e,t,n)=>{"use strict";n.d(t,{P:()=>i});var r=n(16),a=n(8994),s=n(3994),o=n(7258);const i=(0,n(4894).op)({complex_:function(e,t){const n=(0,s._1)(e,"real","complex"),i=(0,s._1)(t,"imag","complex");o.k5(n.shape,i.shape,`real and imag shapes, ${n.shape} and ${i.shape}, must match in call to tf.complex().`);const u={real:n,imag:i};return r.BV.runKernel(a.Zz,u)}})},2856:(e,t,n)=>{"use strict";n.d(t,{I0:()=>g,Ix:()=>i,Rf:()=>a,Xw:()=>s,aO:()=>l,jT:()=>y,jw:()=>u,m:()=>b,pl:()=>o,sl:()=>x});var r=n(7258);function a(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",s=arguments.length>5?arguments[5]:void 0;const o=e[3],u=[...t,o],l=x(a);return i(e,u,n,s,r,null,null,l)}function s(e,t,n,r,a,s){let o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast";const[u,l]=c(t);let d;if("channelsLast"===o)d=[u,l,e[3],e[3]];else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);d=[u,l,e[1],e[1]]}return i(e,d,n,r,a,s,!1,o)}function o(e,t,n,r,a,s){let o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NDHWC";const[i,l,c]=d(t);let p,h;if("NDHWC"===o)h="channelsLast",p=[i,l,c,e[4],e[4]];else{if("NCDHW"!==o)throw new Error(`Unknown dataFormat ${o}`);h="channelsFirst",p=[i,l,c,e[1],e[1]]}return u(e,p,n,r,a,!1,h,s)}function i(e,t,n,r,a,s){let o=arguments.length>6&&void 0!==arguments[6]&&arguments[6],i=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"channelsLast",[u,l,d,f]=[-1,-1,-1,-1];if("channelsLast"===i)[u,l,d,f]=e;else{if("channelsFirst"!==i)throw new Error(`Unknown dataFormat ${i}`);[u,f,l,d]=e}const[m,g,,y]=t,[x,b]=c(n),[v,w]=c(r),k=p(m,v),S=p(g,w),{padInfo:N,outHeight:T,outWidth:I}=h(a,l,d,x,b,k,S,s,i),$=o?y*f:y;let C;return"channelsFirst"===i?C=[u,$,T,I]:"channelsLast"===i&&(C=[u,T,I,$]),{batchSize:u,dataFormat:i,inHeight:l,inWidth:d,inChannels:f,outHeight:T,outWidth:I,outChannels:$,padInfo:N,strideHeight:x,strideWidth:b,filterHeight:m,filterWidth:g,effectiveFilterHeight:k,effectiveFilterWidth:S,dilationHeight:v,dilationWidth:w,inShape:e,outShape:C,filterShape:t}}function u(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]&&arguments[5],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"channelsLast",i=arguments.length>7?arguments[7]:void 0,[u,l,c,h,m]=[-1,-1,-1,-1,-1];if("channelsLast"===o)[u,l,c,h,m]=e;else{if("channelsFirst"!==o)throw new Error(`Unknown dataFormat ${o}`);[u,m,l,c,h]=e}const[g,y,x,,b]=t,[v,w,k]=d(n),[S,N,T]=d(r),I=p(g,S),$=p(y,N),C=p(x,T),{padInfo:E,outDepth:_,outHeight:R,outWidth:A}=f(a,l,c,h,v,w,k,I,$,C,i),O=s?b*m:b;let D;return"channelsFirst"===o?D=[u,O,_,R,A]:"channelsLast"===o&&(D=[u,_,R,A,O]),{batchSize:u,dataFormat:o,inDepth:l,inHeight:c,inWidth:h,inChannels:m,outDepth:_,outHeight:R,outWidth:A,outChannels:O,padInfo:E,strideDepth:v,strideHeight:w,strideWidth:k,filterDepth:g,filterHeight:y,filterWidth:x,effectiveFilterDepth:I,effectiveFilterHeight:$,effectiveFilterWidth:C,dilationDepth:S,dilationHeight:N,dilationWidth:T,inShape:e,outShape:D,filterShape:t}}function l(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1;const a=p(t,r);return Math.floor((e[0]*(n-1)-n+a)/2)}function c(e){return"number"===typeof e?[e,e,e]:2===e.length?[e[0],e[1],1]:e}function d(e){return"number"===typeof e?[e,e,e]:e}function p(e,t){return t<=1?e:e+(e-1)*(t-1)}function h(e,t,n,r,a,s,o,i,u){let c,d,p;if("number"===typeof e){c={top:e,bottom:e,left:e,right:e,type:0===e?"VALID":"NUMBER"};const a=function(e,t,n,r,a){null==r&&(r=l(e,t,n));const s=e[0],o=e[1];return[m((s-t+2*r)/n+1,a),m((o-t+2*r)/n+1,a)]}([t,n],s,r,e,i);d=a[0],p=a[1]}else if("same"===e){d=Math.ceil(t/r),p=Math.ceil(n/a);const e=Math.max(0,(d-1)*r+s-t),i=Math.max(0,(p-1)*a+o-n),u=Math.floor(e/2),l=e-u,h=Math.floor(i/2);c={top:u,bottom:l,left:h,right:i-h,type:"SAME"}}else if("valid"===e)c={top:0,bottom:0,left:0,right:0,type:"VALID"},d=Math.ceil((t-s+1)/r),p=Math.ceil((n-o+1)/a);else{if("object"!==typeof e)throw Error(`Unknown padding parameter: ${e}`);{const l="channelsLast"===u?e[1][0]:e[2][0],h="channelsLast"===u?e[1][1]:e[2][1],f="channelsLast"===u?e[2][0]:e[3][0],g="channelsLast"===u?e[2][1]:e[3][1];c={top:l,bottom:h,left:f,right:g,type:0===l&&0===h&&0===f&&0===g?"VALID":"EXPLICIT"},d=m((t-s+l+h)/r+1,i),p=m((n-o+f+g)/a+1,i)}}return{padInfo:c,outHeight:d,outWidth:p}}function f(e,t,n,r,a,s,o,i,u,c,d){let p,h,f,g;if("number"===typeof e){p={top:e,bottom:e,left:e,right:e,front:e,back:e,type:0===e?"VALID":"NUMBER"};const s=function(e,t,n,r,a,s){null==a&&(a=l(e,t,r));const o=e[0],i=e[1],u=e[2];return[m((o-t+2*a)/r+1,s),m((i-t+2*a)/r+1,s),m((u-t+2*a)/r+1,s),n]}([t,n,r,1],i,1,a,e,d);h=s[0],f=s[1],g=s[2]}else if("same"===e){h=Math.ceil(t/a),f=Math.ceil(n/s),g=Math.ceil(r/o);const e=(h-1)*a+i-t,l=(f-1)*s+u-n,d=(g-1)*o+c-r,m=Math.floor(e/2),y=e-m,x=Math.floor(l/2),b=l-x,v=Math.floor(d/2);p={top:x,bottom:b,left:v,right:d-v,front:m,back:y,type:"SAME"}}else{if("valid"!==e)throw Error(`Unknown padding parameter: ${e}`);p={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},h=Math.ceil((t-i+1)/a),f=Math.ceil((n-u+1)/s),g=Math.ceil((r-c+1)/o)}return{padInfo:p,outDepth:h,outHeight:f,outWidth:g}}function m(e,t){if(!t)return Math.trunc(e);switch(t){case"round":return Math.round(e);case"ceil":return Math.ceil(e);case"floor":return Math.floor(e);default:throw new Error(`Unknown roundingMode ${t}`)}}function g(e){const[t,n,r]=c(e);return 1===t&&1===n&&1===r}function y(e,t){return g(e)||g(t)}function x(e){if("NHWC"===e)return"channelsLast";if("NCHW"===e)return"channelsFirst";throw new Error(`Unknown dataFormat ${e}`)}function b(e,t,n){if(null!=n){if("string"===typeof t)throw Error(`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`);if("number"===typeof t)r.hu(r.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`));else{if("object"!==typeof t)throw Error(`Error in ${e}: Unknown padding parameter: ${t}`);t.forEach((t=>{t.forEach((t=>{r.hu(r.GN(t),(()=>`Error in ${e}: pad must be an integer when using dimRoundingMode ${n} but got pad ${t}.`))}))}))}}}},3640:(e,t,n)=>{"use strict";n.d(t,{h:()=>u});var r=n(16),a=n(8994),s=n(9337),o=n(3994),i=n(6213);const u=(0,n(4894).op)({div_:function(e,t){let n=(0,o._1)(e,"a","div"),u=(0,o._1)(t,"b","div");if([n,u]=(0,s.makeTypesMatch)(n,u),"int32"===n.dtype&&"int32"===u.dtype)return(0,i.q)(n,u);const l={a:n,b:u};return r.BV.runKernel(a.oH,l,{})}})},6262:(e,t,n)=>{"use strict";n.d(t,{p:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({elu_:function(e){const t={x:(0,s._1)(e,"x","elu","float32")};return r.BV.runKernel(a.SX,t)}})},6435:(e,t,n)=>{"use strict";n.d(t,{h:()=>s});var r=n(16),a=n(8994);function s(e,t,n){const s={shape:e,value:t,dtype:n};return r.BV.runKernel(a.de,{},s)}},6213:(e,t,n)=>{"use strict";n.d(t,{q:()=>i});var r=n(16),a=n(8994),s=n(9337),o=n(3994);const i=(0,n(4894).op)({floorDiv_:function(e,t){let n=(0,o._1)(e,"a","floorDiv"),i=(0,o._1)(t,"b","floorDiv");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.je,u)}})},9997:(e,t,n)=>{"use strict";n.d(t,{Fr:()=>f,QH:()=>g,pf:()=>m,uy:()=>y});var r=n(6209),a=n(6262),s=n(9424),o=n(5600),i=n(8650),u=n(970),l=n(7680),c=n(8551),d=n(8954),p=n(1448),h=n(3619);function f(e,t,n){if(null==n||"linear"===n)return e;if("relu"===n)return(0,o.d)(e,(0,p.N)(t));throw new Error(`Cannot compute gradient for fused activation ${n}.`)}function m(e,t){let n=t;const a=r.getReductionAxes(e.shape,t.shape);return a.length>0&&(n=(0,h.S)(n,a)),(0,c.X)(n,e.shape)}function g(e,t,n,r){if("linear"===t)return e;if("relu"===t)return(0,u.U)(e);if("elu"===t)return(0,a.p)(e);if("relu6"===t)return(0,l.b)(e);if("prelu"===t)return(0,i.A)(e,n);if("leakyrelu"===t)return(0,s.h)(e,r);if("sigmoid"===t)return(0,d.X)(e);throw new Error(`Unknown fused activation ${t}.`)}const y=(e,t)=>!(e>0)||"linear"===t},2176:(e,t,n)=>{"use strict";n.d(t,{a:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({imag_:function(e){const t={input:(0,s._1)(e,"input","imag")};return r.BV.runKernel(a.J_,t)}})},9424:(e,t,n)=>{"use strict";n.d(t,{h:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({leakyRelu_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:.2;const n=(0,s._1)(e,"x","leakyRelu"),o={x:n},i={alpha:t};return r.BV.runKernel(a.J$,o,i)}})},9397:(e,t,n)=>{"use strict";var r;n.d(t,{I:()=>r}),function(e){e[e.NONE=0]="NONE",e[e.MEAN=1]="MEAN",e[e.SUM=2]="SUM",e[e.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS"}(r||(r={}))},1233:(e,t,n)=>{"use strict";n.d(t,{O:()=>i});var r=n(16),a=n(8994),s=n(9337),o=n(3994);const i=(0,n(4894).op)({matMul_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=arguments.length>3&&void 0!==arguments[3]&&arguments[3],u=(0,o._1)(e,"a","matMul"),l=(0,o._1)(t,"b","matMul");[u,l]=(0,s.makeTypesMatch)(u,l);const c={a:u,b:l},d={transposeA:n,transposeB:i};return r.BV.runKernel(a.XL,c,d)}})},3255:(e,t,n)=>{"use strict";n.d(t,{g:()=>l});var r=n(16),a=n(8994),s=n(9337),o=n(3994),i=n(6209),u=n(8857);const l=(0,n(4894).op)({maximum_:function(e,t){let n=(0,o._1)(e,"a","maximum"),l=(0,o._1)(t,"b","maximum");[n,l]=(0,s.makeTypesMatch)(n,l),"bool"===n.dtype&&(n=(0,u.p)(n,"int32"),l=(0,u.p)(l,"int32")),(0,i.assertAndGetBroadcastShape)(n.shape,l.shape);const c={a:n,b:l};return r.BV.runKernel(a.BM,c)}})},5600:(e,t,n)=>{"use strict";n.d(t,{d:()=>i});var r=n(16),a=n(8994),s=n(9337),o=n(3994);const i=(0,n(4894).op)({mul_:function(e,t){let n=(0,o._1)(e,"a","mul"),i=(0,o._1)(t,"b","mul");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.wY,u)}})},1587:(e,t,n)=>{"use strict";n.d(t,{W:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({neg_:function(e){const t={x:(0,s._1)(e,"x","neg")};return r.BV.runKernel(a.ku,t)}})},5808:(e,t,n)=>{"use strict";n.d(t,{l:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({oneHot_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;if(t<2)throw new Error(`Error in oneHot: depth must be >=2, but it is ${t}`);const i=(0,s._1)(e,"indices","oneHot","int32"),u={indices:i},l={depth:t,onValue:n,offValue:o};return r.BV.runKernel(a.we,u,l)}})},4894:(e,t,n)=>{"use strict";n.d(t,{op:()=>o,z:()=>s});var r=n(16),a=n(7258);const s="__op";function o(e){const t=Object.keys(e);if(1!==t.length)throw new Error(`Please provide an object with a single key (operation name) mapping to a function. Got an object with ${t.length} keys.`);let n=t[0];const o=e[n];n.endsWith("_")&&(n=n.substring(0,n.length-1)),n+=s;const i=function(){r.BV.startScope(n);try{const e=o(...arguments);return(0,a.tI)(e)&&console.error("Cannot return a Promise inside of tidy."),r.BV.endScope(e),e}catch(e){throw r.BV.endScope(null),e}};return Object.defineProperty(i,"name",{value:n,configurable:!0}),i}},9300:(e,t,n)=>{"use strict";n.d(t,{zvA:()=>u.z,WnP:()=>a.W,Khb:()=>l,__u:()=>c,IHx:()=>d.I,QBD:()=>h,$6P:()=>f,YjB:()=>m,NqF:()=>g,vHJ:()=>y,ZRM:()=>x,VfV:()=>b,z4N:()=>v,fvJ:()=>k,C80:()=>S,wS1:()=>$,uR5:()=>C,zEQ:()=>B,tgs:()=>P,Dxk:()=>L,JY5:()=>V,p3b:()=>z,E4h:()=>M,yE8:()=>U,anm:()=>er,XsQ:()=>W,UFq:()=>G,f3b:()=>H.f,pju:()=>N.p,mDi:()=>q,iUl:()=>X,d9v:()=>E.d,PYB:()=>K.P,zoF:()=>_,gME:()=>j,Izb:()=>Y,MNy:()=>Q,ZaL:()=>Z,PAt:()=>ee,Tek:()=>J,bc:()=>ne,pdZ:()=>re,$QV:()=>se,mCk:()=>oe,f9Y:()=>ie,mew:()=>cr,$Gn:()=>ue,zbp:()=>le,ppE:()=>ce,nTT:()=>de,B10:()=>pe,Ka3:()=>he,WmZ:()=>fe,hiC:()=>me.h,NTj:()=>ve,AKD:()=>we,rvX:()=>ur,WYO:()=>ke,pyx:()=>Se.p,GRh:()=>lr,DgJ:()=>ye,qNN:()=>Ne,d2q:()=>Fe,Qqt:()=>Be,dt4:()=>Me,t$B:()=>Pe,iyy:()=>Ve,kp_:()=>In,hlL:()=>ze.h,GWj:()=>Ue,qPi:()=>We.q,imm:()=>r,Iqj:()=>Ge,dbB:()=>ir,pjt:()=>He,brS:()=>qe,Sxn:()=>$n,asL:()=>Xe.a,BHj:()=>pa,V3u:()=>dr,wx0:()=>Cn,xVT:()=>Ke,UWc:()=>je,i2d:()=>Ye,hi7:()=>Qe.h,d9m:()=>Ze,zN1:()=>Je,$r2:()=>ha,SX3:()=>et,G9k:()=>tt,cM7:()=>nt,Krr:()=>rt,e_t:()=>it,CmS:()=>lt,l_t:()=>ct,HvI:()=>dt,hJK:()=>pt,K5V:()=>ht,egP:()=>ft,MB5:()=>fa,eab:()=>yt,OI3:()=>R.O,Fp7:()=>Ie,_sB:()=>xt,YQQ:()=>bt,Ip$:()=>vt,gWQ:()=>wt.g,J69:()=>kt,ry_:()=>It,VV$:()=>$e,LTh:()=>$t,VdP:()=>Ct,wQq:()=>Et,Gi7:()=>_t,p_:()=>nr,dC7:()=>A.d,rq4:()=>Rt,SJ_:()=>At,W76:()=>st.W,KOy:()=>De,Quu:()=>Ot,lfX:()=>Dt.l,iUs:()=>Nt,JpU:()=>Ft,op:()=>u.op,N2O:()=>Bt,vku:()=>Mt,pNR:()=>Pt,koy:()=>Lt,t1L:()=>Vt,lGY:()=>zt,d_R:()=>Wt,sQ3:()=>Ce.s,AL3:()=>Gt.A,S0v:()=>Ht.S,WVs:()=>qt,TN_:()=>Xt,wzB:()=>Zt,nGf:()=>Jt,ruB:()=>en,LGj:()=>tn,w6H:()=>nn,kwC:()=>rn.k,M25:()=>an,UYe:()=>sn.U,btT:()=>on.b,XLQ:()=>I.X,GYS:()=>un,SDf:()=>ln,diP:()=>cn,sx7:()=>dn,mG2:()=>pn,QEs:()=>_n,NMM:()=>hn,bp0:()=>fn,iD$:()=>Ee.i,snQ:()=>ar,zcT:()=>gt,U8D:()=>mn,U_I:()=>gn,ODp:()=>yn,XD2:()=>O.X,Xxe:()=>xn,tdS:()=>da,O$l:()=>bn,R_K:()=>vn,tPi:()=>D,jZU:()=>wn,SmN:()=>kn,CnO:()=>Sn,p0P:()=>Nn,XAC:()=>Tn,Wvh:()=>ot,fBT:()=>Ut,rVs:()=>ma,ers:()=>or,uN7:()=>ca,Vl2:()=>En,_b3:()=>_e._,h62:()=>Re.h,$i:()=>Rn,L9e:()=>An,knu:()=>On,Nbs:()=>Dn.N,NXj:()=>Fn,Z_8:()=>ga,luU:()=>ut.l,Smz:()=>Ae.S,ORZ:()=>Bn,AEp:()=>F,XeE:()=>Mn.X,RRF:()=>Ln,odF:()=>Vn,wOQ:()=>zn.w,yXz:()=>Un,Bfx:()=>Wn,xZs:()=>Gn,Gg6:()=>Le,hg7:()=>Hn,p4s:()=>tr.p,Xu6:()=>qn,Two:()=>Xn,pUJ:()=>Kn,HHK:()=>jn,GaM:()=>Yn,VD$:()=>Qn,arb:()=>xe,itS:()=>Jn,lls:()=>St,P84:()=>be.P});var r={};n.r(r),n.d(r,{conv2d:()=>fr,depthwiseConv2d:()=>yr,matMul:()=>xr});var a=n(6960),s=n(16),o=n(8994),i=n(3994),u=n(4894);const l=(0,u.op)({acos_:function(e){const t={x:(0,i._1)(e,"x","acos")};return s.BV.runKernel(o.VG,t)}});const c=(0,u.op)({acosh_:function(e){const t={x:(0,i._1)(e,"x","acosh")};return s.BV.runKernel(o.Sp,t)}});var d=n(6106),p=n(7258);const h=(0,u.op)({addN_:function(e){p.hu(Array.isArray(e),(()=>"The argument passed to tf.addN() must be a list of tensors")),p.hu(e.length>=1,(()=>`Must pass at least one tensor to tf.addN(), but got ${e.length}`));const t=e.map(((e,t)=>(0,i._1)(e,`tensors${t}`,"addN"))),n=t[0];t.forEach((e=>{if(e.dtype!==n.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),t.forEach((e=>{if(!p.cO(e.shape,n.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));const r=t;return s.BV.runKernel(o.Xz,r)}});const f=(0,u.op)({all_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=(0,i._1)(e,"x","all","bool"),a={x:r},u={axis:t,keepDims:n};return s.BV.runKernel(o.oT,a,u)}});const m=(0,u.op)({any_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=(0,i._1)(e,"x","any","bool"),a={x:r},u={axis:t,keepDims:n};return s.BV.runKernel(o.IK,a,u)}});const g=(0,u.op)({argMax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=(0,i._1)(e,"x","argMax"),r={x:n},a={axis:t};return s.BV.runKernel(o.sJ,r,a)}});const y=(0,u.op)({argMin_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=(0,i._1)(e,"x","argMin"),r={x:n},a={axis:t};return s.BV.runKernel(o.aJ,r,a)}});const x=(0,u.op)({asin_:function(e){const t={x:(0,i._1)(e,"x","asin")};return s.BV.runKernel(o.M2,t)}});const b=(0,u.op)({asinh_:function(e){const t={x:(0,i._1)(e,"x","asinh")};return s.BV.runKernel(o.qw,t)}});const v=(0,u.op)({atan_:function(e){const t={x:(0,i._1)(e,"x","atan")};return s.BV.runKernel(o.jM,t)}});var w=n(9337);const k=(0,u.op)({atan2_:function(e,t){let n=(0,i._1)(e,"a","atan2"),r=(0,i._1)(t,"b","atan2");[n,r]=(0,w.makeTypesMatch)(n,r);const a={a:n,b:r};return s.BV.runKernel(o.QC,a)}});const S=(0,u.op)({atanh_:function(e){const t={x:(0,i._1)(e,"x","atanh")};return s.BV.runKernel(o.Oy,t)}});var N=n(8857),T=n(2856),I=n(8551);const $=(0,u.op)({avgPool_:function(e,t,n,r,a){const u=(0,i._1)(e,"x","avgPool","float32");p.hu(T.jT(n,1),(()=>`Error in avgPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`));let l=u,c=!1;3===u.rank&&(c=!0,l=(0,I.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]])),p.hu(4===l.rank,(()=>`Error in avgPool: x must be rank 4 but got rank ${l.rank}.`)),T.m("avgPool",r,a);const d={x:l},h={filterSize:t,strides:n,pad:r,dimRoundingMode:a};let f=s.BV.runKernel(o.Jh,d,h);return f=(0,N.p)(f,u.dtype),c?(0,I.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const C=(0,u.op)({avgPool3d_:function(e,t,n,r,a){let u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const l=(0,i._1)(e,"x","avgPool3d","float32");let c=l,d=!1;4===l.rank&&(d=!0,c=(0,I.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),p.hu(5===c.rank,(()=>`Error in avgPool3d: x must be rank 5 but got rank ${c.rank}.`)),p.hu("NDHWC"===u,(()=>`Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of ${u}`)),(0,T.m)("avgPool3d",r,a);const h={x:c},f={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:u};let m=s.BV.runKernel(o._k,h,f);return m=(0,N.p)(m,c.dtype),d?(0,I.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});var E=n(7484);const _=(0,u.op)({concat_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;(0,p.hu)(e.length>=1,(()=>"Pass at least one tensor to concat"));const n=(0,i.sI)(e,"tensors","concat","string_or_numeric");if("complex64"===n[0].dtype&&n.forEach((e=>{if("complex64"!==e.dtype)throw new Error(`Cannot concatenate complex64 tensors with a tensor\n          with dtype ${e.dtype}. `)})),1===n.length)return(0,E.d)(n[0]);const r=n,a={axis:t};return s.BV.runKernel(o.Eh,r,a)}});var R=n(1233),A=n(5600),O=n(8954);const D=(0,u.op)({slice_:function(e,t,n){const r=(0,i._1)(e,"x","slice","string_or_numeric");if(0===r.rank)throw new Error("Slicing scalar is not possible");const a={x:r},u={begin:t,size:n};return s.BV.runKernel(o.p2,a,u)}});const F=(0,u.op)({tanh_:function(e){const t={x:(0,i._1)(e,"x","tanh","float32")};return s.BV.runKernel(o.MI,t)}});const B=(0,u.op)({basicLSTMCell_:function(e,t,n,r,a,s){const o=(0,i._1)(e,"forgetBias","basicLSTMCell"),u=(0,i._1)(t,"lstmKernel","basicLSTMCell"),l=(0,i._1)(n,"lstmBias","basicLSTMCell"),c=(0,i._1)(r,"data","basicLSTMCell"),p=(0,i._1)(a,"c","basicLSTMCell"),h=(0,i._1)(s,"h","basicLSTMCell"),f=_([c,h],1),m=(0,R.O)(f,u),g=(0,d.I)(m,l),y=g.shape[0],x=g.shape[1]/4,b=[y,x],v=D(g,[0,0],b),w=D(g,[0,x],b),k=D(g,[0,2*x],b),S=D(g,[0,3*x],b),N=(0,d.I)((0,A.d)((0,O.X)(v),F(w)),(0,A.d)(p,(0,O.X)((0,d.I)(o,k))));return[N,(0,A.d)(F(N),(0,O.X)(S))]}});const M=(0,u.op)({batchToSpaceND_:function(e,t,n){const r=(0,i._1)(e,"x","batchToSpaceND"),a=t.reduce(((e,t)=>e*t));p.hu(r.rank>=1+t.length,(()=>`input rank is ${r.rank} but should be > than blockShape.length ${t.length}`)),p.hu(n.length===t.length,(()=>`crops.length is ${n.length} but should be equal to blockShape.length  ${t.length}`)),p.hu(r.shape[0]%a===0,(()=>`input tensor batch is ${r.shape[0]} but is not divisible by the product of the elements of blockShape ${t.join(" * ")} === ${a}`));const u={x:r},l={blockShape:t,crops:n};return s.BV.runKernel(o.zw,u,l)}});const P=(0,u.op)({batchNorm_:function(e,t,n,r,a,u){null==u&&(u=.001);const l=(0,i._1)(e,"x","batchNorm"),c=(0,i._1)(t,"mean","batchNorm"),d=(0,i._1)(n,"variance","batchNorm");let h,f;null!=a&&(h=(0,i._1)(a,"scale","batchNorm")),null!=r&&(f=(0,i._1)(r,"offset","batchNorm")),p.hu(c.rank===d.rank,(()=>"Batch normalization gradient requires mean and variance to have equal ranks.")),p.hu(null==f||c.rank===f.rank,(()=>"Batch normalization gradient requires mean and offset to have equal ranks.")),p.hu(null==h||c.rank===h.rank,(()=>"Batch normalization gradient requires mean and scale to have equal ranks."));const m=function(e){let t;return t=0===e.rank||1===e.rank?(0,I.X)(e,[1,1,1,e.size]):2===e.rank?(0,I.X)(e,[1,1,e.shape[0],e.shape[1]]):3===e.rank?(0,I.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]):e,t}(l),g={x:m,scale:h,offset:f,mean:c,variance:d},y={varianceEpsilon:u},x=s.BV.runKernel(o.sH,g,y);return(0,I.X)(x,l.shape)}});const L=(0,u.op)({batchNorm2d_:function(e,t,n,r,a,s){const o=(0,i._1)(e,"x","batchNorm"),u=(0,i._1)(t,"mean","batchNorm"),l=(0,i._1)(n,"variance","batchNorm");let c,d;return null!=a&&(c=(0,i._1)(a,"scale","batchNorm")),null!=r&&(d=(0,i._1)(r,"offset","batchNorm")),p.hu(2===o.rank,(()=>`Error in batchNorm2D: x must be rank 2 but got rank ${o.rank}.`)),p.hu(2===u.rank||1===u.rank,(()=>`Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank ${u.rank}.`)),p.hu(2===l.rank||1===l.rank,(()=>`Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank ${l.rank}.`)),null!=c&&p.hu(2===c.rank||1===c.rank,(()=>`Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank ${c.rank}.`)),null!=d&&p.hu(2===d.rank||1===d.rank,(()=>`Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank ${d.rank}.`)),P(o,u,l,d,c,s)}});const V=(0,u.op)({batchNorm3d_:function(e,t,n,r,a,s){const o=(0,i._1)(e,"x","batchNorm"),u=(0,i._1)(t,"mean","batchNorm"),l=(0,i._1)(n,"variance","batchNorm");let c,d;return null!=a&&(c=(0,i._1)(a,"scale","batchNorm")),null!=r&&(d=(0,i._1)(r,"offset","batchNorm")),p.hu(3===o.rank,(()=>`Error in batchNorm3D: x must be rank 3 but got rank ${o.rank}.`)),p.hu(3===u.rank||1===u.rank,(()=>`Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank ${u.rank}.`)),p.hu(3===l.rank||1===l.rank,(()=>`Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank ${l.rank}.`)),null!=c&&p.hu(3===c.rank||1===c.rank,(()=>`Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank ${c.rank}.`)),null!=d&&p.hu(3===d.rank||1===d.rank,(()=>`Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank ${d.rank}.`)),P(o,u,l,d,c,s)}});const z=(0,u.op)({batchNorm4d_:function(e,t,n,r,a,s){const o=(0,i._1)(e,"x","batchNorm"),u=(0,i._1)(t,"mean","batchNorm"),l=(0,i._1)(n,"variance","batchNorm");let c,d;return null!=a&&(c=(0,i._1)(a,"scale","batchNorm")),null!=r&&(d=(0,i._1)(r,"offset","batchNorm")),p.hu(4===o.rank,(()=>`Error in batchNorm4D: x must be rank 4 but got rank ${o.rank}.`)),p.hu(4===u.rank||1===u.rank,(()=>`Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank ${u.rank}.`)),p.hu(4===l.rank||1===l.rank,(()=>`Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank ${l.rank}.`)),null!=c&&p.hu(4===c.rank||1===c.rank,(()=>`Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank ${c.rank}.`)),null!=d&&p.hu(4===d.rank||1===d.rank,(()=>`Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank ${d.rank}.`)),P(o,u,l,d,c,s)}});const U=(0,u.op)({bincount_:function(e,t,n){const r=(0,i._1)(e,"x","bincount"),a=(0,i._1)(t,"weights","bincount");p.hu("int32"===r.dtype,(()=>`Error in bincount: input dtype must be int32, but got ${r.dtype}`)),p.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),p.hu(a.size===r.size||0===a.size,(()=>`Error in bincount: weights must have the same size as input or0-length, but got input shape: ${r.shape}, weights shape: ${a.shape}.`));const u={x:r,weights:a},l={size:n};return s.BV.runKernel(o.zv,u,l)}});const W=(0,u.op)({broadcastArgs_:function(e,t){const n=(0,i._1)(e,"s0","broadcastArgs","int32"),r=(0,i._1)(t,"s1","broadcastArgs","int32");if(1!==n.rank)throw new Error(`broadcastArgs(): first input must be a vector (rank=1). Has rank ${n.rank}`);if(1!==r.rank)throw new Error(`broadcastArgs(): second input must be a vector (rank=1). Has rank ${r.rank}`);const a={s0:n,s1:r};return s.BV.runKernel(o.eE,a)}});const G=(0,u.op)({broadcastTo_:function(e,t){let n=(0,i._1)(e,"broadcastTo","x");const r=n.shape;if(t.some((e=>!(e>0)||e%1!==0)))throw new Error(`broadcastTo(): Invalid broadcast shape [${t}].`);if(t.length<n.rank)throw new Error(`broadcastTo(): shape.length=${t.length} < input.rank=${n.rank}.`);if(t.length>n.rank){const e=n.shape.slice();for(;e.length<t.length;)e.unshift(1);n=(0,I.X)(n,e)}const a=n.shape,u=Array.from(t);for(let s=t.length-1;s>=0;s--)if(a[s]===t[s])u[s]=1;else if(1!==n.shape[s])throw new Error(`broadcastTo(): [${r}] cannot be broadcast to [${t}].`);if(0===u.map(((e,t)=>e>1?t:-1)).filter((e=>e>=0)).length)return(0,E.d)(n);const l={x:n},c={reps:u};return s.BV.runKernel(o.n9,l,c)}});var H=n(3332);const q=(0,u.op)({ceil_:function(e){const t={x:(0,i._1)(e,"x","ceil","float32")};return s.BV.runKernel(o.gJ,t)}});const X=(0,u.op)({clipByValue_:function(e,t,n){const r=(0,i._1)(e,"x","clipByValue");p.hu(t<=n,(()=>`Error in clip: min (${t}) must be less than or equal to max (${n}).`));const a={x:r},u={clipValueMin:t,clipValueMax:n};return s.BV.runKernel(o.xn,a,u)}});var K=n(2195);const j=(0,u.op)({concat1d_:function(e){return _(e,0)}});const Y=(0,u.op)({concat2d_:function(e,t){return _(e,t)}});const Q=(0,u.op)({concat3d_:function(e,t){return _(e,t)}});const Z=(0,u.op)({concat4d_:function(e,t){return _(e,t)}});const J=(0,u.op)({conv2d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],l=arguments.length>6?arguments[6]:void 0;const c=(0,i._1)(e,"x","conv2d","float32"),d=(0,i._1)(t,"filter","conv2d","float32");let h=c,f=!1;3===c.rank&&(f=!0,h=(0,I.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]])),p.hu(4===h.rank,(()=>`Error in conv2d: input must be rank 4, but got rank ${h.rank}.`)),p.hu(4===d.rank,(()=>`Error in conv2d: filter must be rank 4, but got rank ${d.rank}.`)),T.m("conv2d",r,l);const m="NHWC"===a?h.shape[3]:h.shape[1];p.hu(m===d.shape[2],(()=>`Error in conv2d: depth of input (${m}) must match input depth for filter ${d.shape[2]}.`)),p.hu(T.jT(n,u),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${n} and dilations '${u}'`));const g={x:h,filter:d},y={strides:n,pad:r,dataFormat:a,dilations:u,dimRoundingMode:l},x=s.BV.runKernel(o.mh,g,y);return f?(0,I.X)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const ee=(0,u.op)({conv1d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NWC",s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1,o=arguments.length>6?arguments[6]:void 0;const u=(0,i._1)(e,"x","conv1d"),l=(0,i._1)(t,"filter","conv1d");let c=u,d=!1;2===u.rank&&(d=!0,c=(0,I.X)(u,[1,u.shape[0],u.shape[1]])),p.hu(3===c.rank,(()=>`Error in conv1d: input must be rank 3, but got rank ${c.rank}.`)),p.hu(3===l.rank,(()=>`Error in conv1d: filter must be rank 3, but got rank ${l.rank}.`)),T.m("conv1d",r,o),p.hu(c.shape[2]===l.shape[1],(()=>`Error in conv1d: depth of input (${c.shape[2]}) must match input depth for filter ${l.shape[1]}.`)),p.hu(T.jT(n,s),(()=>`Error in conv1D: Either stride or dilation must be 1. Got stride ${n} and dilation '${s}'`)),p.hu("NWC"===a,(()=>`Error in conv1d: got dataFormat of ${a} but only NWC is currently supported.`));const h=(0,I.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]),f=(0,I.X)(c,[c.shape[0],1,c.shape[1],c.shape[2]]),m=[1,n],g=[1,s],y="NHWC",x=J(f,h,m,r,y,g,o);return d?(0,I.X)(x,[x.shape[2],x.shape[3]]):(0,I.X)(x,[x.shape[0],x.shape[2],x.shape[3]])}});const te=(0,u.op)({conv2DBackpropInput_:function(e,t,n,r,a){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",u=arguments.length>6?arguments[6]:void 0;p.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let l=e,c=t,d=!1;3===t.rank&&(d=!0,c=(0,I.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]),l=[1,e[0],e[1],e[2]]),p.hu(4===l.length,(()=>`Error in conv2dDerInput: inShape must be length 4, but got length ${l.length}.`)),p.hu(4===c.rank,(()=>`Error in conv2dDerInput: dy must be rank 4, but got rank ${c.rank}`)),p.hu(4===n.rank,(()=>`Error in conv2dDerInput: filter must be rank 4, but got rank ${n.rank}`));const h="NHWC"===i?l[3]:l[1],f="NHWC"===i?c.shape[3]:c.shape[1];p.hu(h===n.shape[2],(()=>`Error in conv2dDerInput: depth of input (${h}) must match input depth for filter ${n.shape[2]}.`)),p.hu(f===n.shape[3],(()=>`Error in conv2dDerInput: depth of output (${f}) must match output depth for filter ${n.shape[3]}.`)),T.m("conv2dDerInput",a,u);const m={dy:c,filter:n},g={strides:r,pad:a,dataFormat:i,dimRoundingMode:u,inputShape:l},y=s.BV.runKernel(o.wm,m,g);return d?(0,I.X)(y,[y.shape[1],y.shape[2],y.shape[3]]):y}});const ne=(0,u.op)({conv2dTranspose_:function(e,t,n,r,a,s){const o=(0,i._1)(e,"x","conv2dTranspose"),u=(0,i._1)(t,"filter","conv2dTranspose");return te(n,o,u,r,a,"NHWC",s)}});const re=(0,u.op)({conv3d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NDHWC",u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1,1];const l=(0,i._1)(e,"x","conv3d"),c=(0,i._1)(t,"filter","conv3d");let d=l,h=!1;4===l.rank&&(h=!0,d=(0,I.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),p.hu(5===d.rank,(()=>`Error in conv3d: input must be rank 5, but got rank ${d.rank}.`)),p.hu(5===c.rank,(()=>`Error in conv3d: filter must be rank 5, but got rank ${c.rank}.`)),p.hu(d.shape[4]===c.shape[3],(()=>`Error in conv3d: depth of input (${d.shape[4]}) must match input depth for filter ${c.shape[3]}.`)),p.hu((0,T.jT)(n,u),(()=>`Error in conv3D: Either strides or dilations must be 1. Got strides ${n} and dilations '${u}'`)),p.hu("NDHWC"===a,(()=>`Error in conv3d: got dataFormat of ${a} but only NDHWC is currently supported.`));const f={x:d,filter:c},m={strides:n,pad:r,dataFormat:a,dilations:u},g=s.BV.runKernel(o.x1,f,m);return h?(0,I.X)(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}});const ae=(0,u.op)({conv3DBackpropInput_:function(e,t,n,r,a){p.hu(e.length===t.rank,(()=>`Length of inShape (${e.length}) and rank of dy (${t.rank}) must match`));let i=e,u=t,l=!1;4===t.rank&&(l=!0,u=(0,I.X)(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]),i=[1,e[0],e[1],e[2],e[3]]);const c=i[4],d=u.shape[4];p.hu(5===i.length,(()=>`Error in conv3dDerInput: inShape must be length 5, but got length ${i.length}.`)),p.hu(5===u.rank,(()=>`Error in conv3dDerInput: dy must be rank 5, but got rank ${u.rank}`)),p.hu(5===n.rank,(()=>`Error in conv3dDerInput: filter must be rank 5, but got rank ${n.rank}`)),p.hu(c===n.shape[3],(()=>`Error in conv3dDerInput: depth of input (${c}) must match input depth for filter ${n.shape[3]}.`)),p.hu(d===n.shape[4],(()=>`Error in conv3dDerInput: depth of output (${d}) must match output depth for filter ${n.shape[4]}.`));const h={dy:u,filter:n},f={pad:a,strides:r,inputShape:i},m=s.BV.runKernel(o.ik,h,f);return l?(0,I.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});const se=(0,u.op)({conv3dTranspose_:function(e,t,n,r,a){const s=(0,i._1)(e,"x","conv3dTranspose"),o=(0,i._1)(t,"filter","conv3dTranspose");return ae(n,s,o,r,a)}});const oe=(0,u.op)({cos_:function(e){const t={x:(0,i._1)(e,"x","cos","float32")};return s.BV.runKernel(o.mc,t)}});const ie=(0,u.op)({cosh_:function(e){const t={x:(0,i._1)(e,"x","cosh","float32")};return s.BV.runKernel(o.TR,t)}});const ue=(0,u.op)({cumprod_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=(0,i._1)(e,"x","cumprod"),u={x:a},l={axis:t,exclusive:n,reverse:r};return s.BV.runKernel(o.By,u,l)}});const le=(0,u.op)({cumsum_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=(0,i._1)(e,"x","cumsum"),u={x:a},l={axis:t,exclusive:n,reverse:r};return s.BV.runKernel(o.iH,u,l)}});const ce=(0,u.op)({denseBincount_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=(0,i._1)(e,"x","denseBincount"),u=(0,i._1)(t,"weights","denseBincount");p.hu("int32"===a.dtype,(()=>`Error in denseBincount: input dtype must be int32, but got ${a.dtype}`)),p.hu(a.rank<=2,(()=>`Error in denseBincount: input must be at most rank 2, but got rank ${a.rank}.`)),p.hu(n>=0,(()=>`size must be non-negative, but got ${n}.`)),p.hu(u.size===a.size||0===u.size,(()=>`Error in denseBincount: weights must have the same shape as x or 0-length, but got x shape: ${a.shape}, weights shape: ${u.shape}.`));const l={x:a,weights:u},c={size:n,binaryOutput:r};return s.BV.runKernel(o.QR,l,c)}});const de=(0,u.op)({depthToSpace_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"NHWC";const r=(0,i._1)(e,"x","depthToSpace","float32"),a="NHWC"===n?r.shape[1]:r.shape[2],u="NHWC"===n?r.shape[2]:r.shape[3],l="NHWC"===n?r.shape[3]:r.shape[1];p.hu(t>1,(()=>`blockSize should be > 1 for depthToSpace, but was: ${t}`)),p.hu(a*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${a} and ${t}  for depthToSpace with input shape\n    ${r.shape}`)),p.hu(u*t>=0,(()=>`Negative dimension size caused by overflow when multiplying\n    ${u} and ${t} for depthToSpace with input shape\n        ${r.shape}`)),p.hu(l%(t*t)===0,(()=>`Dimension size must be evenly divisible by ${t*t} but is ${l} for depthToSpace with input shape ${r.shape}`));const c={x:r},d={blockSize:t,dataFormat:n};return s.BV.runKernel(o.T0,c,d)}});const pe=(0,u.op)({depthwiseConv2d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"NHWC",u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],l=arguments.length>6?arguments[6]:void 0;const c=(0,i._1)(e,"x","depthwiseConv2d","float32"),d=(0,i._1)(t,"filter","depthwiseConv2d","float32");let h=c,f=!1;3===c.rank&&(f=!0,h=(0,I.X)(c,[1,c.shape[0],c.shape[1],c.shape[2]])),p.hu(4===h.rank,(()=>`Error in depthwiseConv2d: input must be rank 4, but got rank ${h.rank}.`)),p.hu(4===d.rank,(()=>`Error in depthwiseConv2d: filter must be rank 4, but got rank ${d.rank}.`));const m="NHWC"===a?h.shape[3]:h.shape[1];p.hu(m===d.shape[2],(()=>`Error in depthwiseConv2d: number of input channels (${m}) must match the inChannels dimension in filter ${d.shape[2]}.`)),T.m("depthwiseConv2d",r,l);const g={x:h,filter:d},y={strides:n,pad:r,dataFormat:a,dilations:u,dimRoundingMode:l},x=s.BV.runKernel(o.ci,g,y);return f?(0,I.X)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const he=(0,u.op)({diag_:function(e){const t={x:(0,i._1)(e,"x","diag")};return s.BV.runKernel(o.$w,t)}});const fe=(0,u.op)({dilation2d_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:[1,1],u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC";const l=(0,i._1)(e,"x","dilation2d"),c=(0,i._1)(t,"filter","dilation2d");p.hu(3===l.rank||4===l.rank,(()=>`Error in dilation2d: input must be rank 3 or 4, but got rank ${l.rank}.`)),p.hu(3===c.rank,(()=>`Error in dilation2d: filter must be rank 3, but got rank ${c.rank}.`)),p.hu("NHWC"===u,(()=>`Error in dilation2d: Only NHWC is currently supported, but got dataFormat of ${u}`));let d=l,h=!1;3===l.rank&&(d=(0,I.X)(l,[1,l.shape[0],l.shape[1],l.shape[2]]),h=!0);const f={x:d,filter:c},m={strides:n,pad:r,dilations:a},g=s.BV.runKernel(o.p4,f,m);return h?(0,I.X)(g,[g.shape[1],g.shape[2],g.shape[3]]):g}});var me=n(3640),ge=n(6209);const ye=(0,u.op)({equal_:function(e,t){let n=(0,i._1)(e,"a","equal","string_or_numeric"),r=(0,i._1)(t,"b","equal","string_or_numeric");[n,r]=(0,w.makeTypesMatch)(n,r),(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.hd,a)}});const xe=(0,u.op)({where_:function(e,t,n){const r=(0,i._1)(t,"a","where"),a=(0,i._1)(n,"b","where"),u=(0,i._1)(e,"condition","where","bool"),l=(0,ge.assertAndGetBroadcastShape)((0,ge.assertAndGetBroadcastShape)(u.shape,r.shape),a.shape),c={condition:G(u,l),t:G(r,l),e:G(a,l)};return s.BV.runKernel(o.Ph,c)}});var be=n(5552);const ve=(0,u.op)({divNoNan_:function(e,t){let n=(0,i._1)(e,"a","div"),r=(0,i._1)(t,"b","div");[n,r]=(0,w.makeTypesMatch)(n,r);const a=(0,me.h)(n,r),s=(0,be.P)(a),o=ye(r,s);return xe(o,s,a)}});const we=(0,u.op)({dot_:function(e,t){const n=(0,i._1)(e,"t1","dot"),r=(0,i._1)(t,"t2","dot");p.hu((1===n.rank||2===n.rank)&&(1===r.rank||2===r.rank),(()=>`Error in dot: inputs must all be rank 1 or 2, but got ranks ${n.rank} and ${r.rank}.`));const a=1===n.rank?n.size:n.shape[1],s=1===r.rank?r.size:r.shape[0];if(p.hu(a===s,(()=>`Error in dot: inner dimensions of inputs must match, but got ${a} and ${s}.`)),1===n.rank&&1===r.rank){const e=(0,I.X)(n,[1,-1]),t=(0,I.X)(r,[-1,1]),a=(0,R.O)(e,t);return(0,I.X)(a,[])}if(1===n.rank&&2===r.rank){const e=(0,I.X)(n,[1,-1]),t=(0,I.X)(r,[r.shape[0],r.shape[1]]),a=(0,R.O)(e,t);return(0,I.X)(a,[a.size])}if(2===n.rank&&1===r.rank){const e=(0,I.X)(r,[-1,1]),t=(0,R.O)(n,e);return(0,I.X)(t,[t.size])}{const e=(0,I.X)(r,[r.shape[0],r.shape[1]]);return(0,R.O)(n,e)}}});const ke=(0,u.op)({einsum_:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];const a=n.map(((e,t)=>(0,i._1)(e,`tensors${t}`,"einsum"))),u={equation:e};return s.BV.runKernel(o.$g,a,u)}});var Se=n(6262);const Ne=(0,u.op)({erf_:function(e){let t=(0,i._1)(e,"x","erf");p.hu("int32"===t.dtype||"float32"===t.dtype,(()=>"Input dtype must be `int32` or `float32`.")),"int32"===t.dtype&&(t=(0,N.p)(t,"float32"));const n={x:t};return s.BV.runKernel(o.Om,n)}});var Te=n(5722);const Ie=(0,u.op)({max_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=(0,i._1)(e,"x","max"),a={x:r},u={reductionIndices:t,keepDims:n};return s.BV.runKernel(o.Yo,a,u)}});const $e=(0,u.op)({min_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=(0,i._1)(e,"x","min"),a={x:r},u={axis:t,keepDims:n};return s.BV.runKernel(o.c1,a,u)}});var Ce=n(7121),Ee=n(1480),_e=n(2759),Re=n(5191),Ae=n(3619);function Oe(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;if(0===e.rank)return(0,a.W)(e);if(1!==e.rank&&null===n)return Oe((0,I.X)(e,[-1]),t,n);if(1===e.rank||"number"===typeof n||Array.isArray(n)&&1===n.length){if(1===t)return(0,Ae.S)((0,a.W)(e),n);if(t===1/0)return Ie((0,a.W)(e),n);if(t===-1/0)return $e((0,a.W)(e),n);if("euclidean"===t||2===t)return(0,_e._)((0,Ae.S)((0,Ce.s)((0,a.W)(e),(0,Ee.i)(2,"int32")),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}if(Array.isArray(n)&&2===n.length){if(1===t)return Ie((0,Ae.S)((0,a.W)(e),n[0]),n[1]-1);if(t===1/0)return Ie((0,Ae.S)((0,a.W)(e),n[1]),n[0]);if(t===-1/0)return $e((0,Ae.S)((0,a.W)(e),n[1]),n[0]);if("fro"===t||"euclidean"===t)return(0,_e._)((0,Ae.S)((0,Re.h)(e),n));throw new Error(`Error in norm: invalid ord value: ${t}`)}throw new Error(`Error in norm: invalid axis: ${n}`)}const De=(0,u.op)({norm_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"euclidean",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null,r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=Oe(e=(0,i._1)(e,"x","norm"),t,n);let s=a.shape;if(r){const t=(0,p.EC)(n,e.shape);s=Te.rv(a.shape,t)}return(0,I.X)(a,s)}});const Fe=(0,u.op)({euclideanNorm_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return De(e,"euclidean",t,n)}});const Be=(0,u.op)({exp_:function(e){const t={x:(0,i._1)(e,"x","exp")};return s.BV.runKernel(o.NE,t)}});const Me=(0,u.op)({expandDims_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=(0,i._1)(e,"x","expandDims","string_or_numeric");p.hu(t<=n.rank,(()=>"Axis must be <= rank of the tensor"));const r={input:n},a={dim:t};return s.BV.runKernel(o.YF,r,a)}});const Pe=(0,u.op)({expm1_:function(e){const t={x:(0,i._1)(e,"x","expm1")};return s.BV.runKernel(o.Y0,t)}});const Le=(0,u.op)({tile_:function(e,t){const n=(0,i._1)(e,"x","tile","string_or_numeric");p.hu(n.rank===t.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${t}.`));const r={x:n},a={reps:t};return s.BV.runKernel(o.n9,r,a)}});const Ve=(0,u.op)({eye_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32";null==t&&(t=e);const a=(0,H.f)([e,t],r),s=e<=t?e:t;for(let i=0;i<s;++i)a.set(1,i,i);const o=(0,I.X)(a.toTensor(),[e,t]);if(null==n)return o;if(1===n.length)return Le(Me(o,0),[n[0],1,1]);if(2===n.length)return Le(Me(Me(o,0),0),[n[0],n[1],1,1]);if(3===n.length)return Le(Me(Me(Me(o,0),0),0),[n[0],n[1],n[2],1,1]);throw new Error(`eye() currently supports only 1D and 2D batchShapes, but received ${n.length}D.`)}});var ze=n(6435);const Ue=(0,u.op)({floor_:function(e){const t={x:(0,i._1)(e,"x","floor","float32")};return s.BV.runKernel(o.OR,t)}});var We=n(6213);const Ge=(0,u.op)({gather_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const a=(0,i._1)(e,"x","gather"),u=(0,i._1)(t,"indices","gather","int32"),l={x:a,indices:u},c={axis:n,batchDims:r};return s.BV.runKernel(o.qi,l,c)}});const He=(0,u.op)({greater_:function(e,t){let n=(0,i._1)(e,"a","greater","string_or_numeric"),r=(0,i._1)(t,"b","greater","string_or_numeric");[n,r]=(0,w.makeTypesMatch)(n,r),(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.iZ,a)}});const qe=(0,u.op)({greaterEqual_:function(e,t){let n=(0,i._1)(e,"a","greaterEqual","string_or_numeric"),r=(0,i._1)(t,"b","greaterEqual","string_or_numeric");[n,r]=(0,w.makeTypesMatch)(n,r),(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.Ac,a)}});var Xe=n(2176);const Ke=(0,u.op)({isFinite_:function(e){const t={x:(0,i._1)(e,"x","isFinite")};return s.BV.runKernel(o.av,t)}});const je=(0,u.op)({isInf_:function(e){const t={x:(0,i._1)(e,"x","isInf")};return s.BV.runKernel(o.iW,t)}});const Ye=(0,u.op)({isNaN_:function(e){const t={x:(0,i._1)(e,"x","isNaN")};return s.BV.runKernel(o.r7,t)}});var Qe=n(9424);const Ze=(0,u.op)({less_:function(e,t){let n=(0,i._1)(e,"a","less","string_or_numeric"),r=(0,i._1)(t,"b","less","string_or_numeric");[n,r]=(0,w.makeTypesMatch)(n,r),(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.vt,a)}});const Je=(0,u.op)({lessEqual_:function(e,t){let n=(0,i._1)(e,"a","lessEqual","string_or_numeric"),r=(0,i._1)(t,"b","lessEqual","string_or_numeric");[n,r]=(0,w.makeTypesMatch)(n,r),(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.CA,a)}});function et(e,t,n){if(n<=0)throw new Error("The number of values should be positive.");const r={start:e,stop:t,num:n};return s.BV.runKernel(o.e7,{},r)}const tt=(0,u.op)({localResponseNormalization_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:5,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:.5;const u=(0,i._1)(e,"x","localResponseNormalization");p.hu(4===u.rank||3===u.rank,(()=>`Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${u.rank}.`)),p.hu(p.GN(t),(()=>`Error in localResponseNormalization: depthRadius must be an integer but got depthRadius ${t}.`));let l=u,c=!1;3===u.rank&&(c=!0,l=(0,I.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]]));const d={x:l},h={depthRadius:t,bias:n,alpha:r,beta:a},f=s.BV.runKernel(o.eZ,d,h);return c?(0,I.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const nt=(0,u.op)({log_:function(e){const t={x:(0,i._1)(e,"x","log","float32")};return s.BV.runKernel(o.Zb,t)}});const rt=(0,u.op)({log1p_:function(e){const t={x:(0,i._1)(e,"x","log1p")};return s.BV.runKernel(o.kU,t)}});var at=n(8933),st=n(1587);const ot=(0,u.op)({softplus_:function(e){const t={x:(0,i._1)(e,"x","softplus")};return s.BV.runKernel(o.MR,t)}});const it=(0,u.op)({logSigmoid_:function(e){const t=(0,i._1)(e,"x","logSigmoid"),n=(0,at.cb)((e=>({value:(0,st.W)(ot((0,st.W)(e))),gradFunc:t=>(0,A.d)(t,(0,O.X)((0,st.W)(e)))})));return n(t)}});var ut=n(2454);const lt=(0,u.op)({logSoftmax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=(0,i._1)(e,"logits","logSoftmax");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Log Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and axis was ${t}`);const r=(0,at.cb)(((e,n)=>{const r=Ie(e,t,!0),a=(0,ut.l)(e,r),s=(0,ut.l)((0,N.p)(a,"float32"),nt((0,Ae.S)(Be(a),t,!0)));n([s]);return{value:s,gradFunc:(e,n)=>{const[r]=n,a=Be(r);return(0,ut.l)(e,(0,A.d)((0,Ae.S)(e,t,!0),a))}}}));return r(n)}});const ct=(0,u.op)({logSumExp_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=(0,i._1)(e,"x","logSumExp"),a=(0,p.EC)(t,r.shape),s=Ie(r,a,!0),o=(0,ut.l)(r,s),u=Be(o),l=(0,Ae.S)(u,a),c=nt(l),h=(0,d.I)((0,I.X)(s,c.shape),c);if(n){const e=(0,Te.rv)(h.shape,a);return(0,I.X)(h,e)}return h}});const dt=(0,u.op)({logicalAnd_:function(e,t){const n=(0,i._1)(e,"a","logicalAnd","bool"),r=(0,i._1)(t,"b","logicalAnd","bool");(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.PY,a)}});const pt=(0,u.op)({logicalNot_:function(e){const t={x:(0,i._1)(e,"x","logicalNot","bool")};return s.BV.runKernel(o.Vf,t)}});const ht=(0,u.op)({logicalOr_:function(e,t){const n=(0,i._1)(e,"a","logicalOr","bool"),r=(0,i._1)(t,"b","logicalOr","bool");(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.MZ,a)}});const ft=(0,u.op)({logicalXor_:function(e,t){const n=(0,i._1)(e,"a","logicalXor","bool"),r=(0,i._1)(t,"b","logicalXor","bool");return(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape),dt(ht(e,t),pt(dt(e,t)))}}),mt=2147483648;const gt=(0,u.op)({searchSorted_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"left";const r=(0,i._1)(e,"sortedSequence","searchSorted"),a=(0,i._1)(t,"values","searchSorted"),u=r.shape[r.shape.length-1],l=a.shape[a.shape.length-1],c=(0,I.X)(r,[-1,u]),d=(0,I.X)(a,[-1,l]);if(c.rank<2)throw new Error("Sorted input argument must be at least 2-dimensional");if(c.shape[0]!==d.shape[0])throw new Error("Leading dimension of 'sortedSequence' and 'values' must match.");if((0,p.NA)(d.shape)>=mt)throw new Error("values tensor size must less than 2147483648");if(c.shape[1]>=mt)throw new Error(`trailing dim_size must less than 2147483648 for int32 output type, was ${c.shape[1]}`);const h={sortedSequence:c,values:d},f={side:n};return s.BV.runKernel(o.nr,h,f)}});function yt(e,t){return gt(e,t,"left")}const xt=(0,u.op)({maxPool_:function(e,t,n,r,a){const u=(0,i._1)(e,"x","maxPool");let l=u,c=!1;3===u.rank&&(c=!0,l=(0,I.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]])),p.hu(4===l.rank,(()=>`Error in maxPool: input must be rank 4 but got rank ${l.rank}.`)),p.hu(T.jT(n,1),(()=>`Error in maxPool: Either strides or dilations must be 1. Got strides ${n} and dilations '1'`)),T.m("maxPool",r,a);const d={x:l},h={filterSize:t,strides:n,pad:r,dimRoundingMode:a},f=s.BV.runKernel(o.mT,d,h);return c?(0,I.X)(f,[f.shape[1],f.shape[2],f.shape[3]]):f}});const bt=(0,u.op)({maxPool3d_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[1,1,1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NDHWC";const l=(0,i._1)(e,"x","maxPool3d");let c=l,d=!1;4===l.rank&&(d=!0,c=(0,I.X)(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),p.hu(5===c.rank,(()=>`Error in maxPool3d: x must be rank 5 but got rank ${c.rank}.`)),p.hu("NDHWC"===u,(()=>`Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of ${u}`)),(0,T.m)("maxPool3d",r,a);const h={x:c},f={filterSize:t,strides:n,pad:r,dimRoundingMode:a,dataFormat:u},m=s.BV.runKernel(o.OA,h,f);return d?(0,I.X)(m,[m.shape[1],m.shape[2],m.shape[3],m.shape[4]]):m}});const vt=(0,u.op)({maxPoolWithArgmax_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]&&arguments[4];const u=(0,i._1)(e,"x","maxPoolWithArgmax"),l={x:u},c={filterSize:t,strides:n,pad:r,includeBatchInIndex:a},d=s.BV.runKernel(o.vF,l,c);return{result:d[0],indexes:d[1]}}});var wt=n(3255);const kt=(0,u.op)({mean_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];const r=(0,i._1)(e,"x","mean"),a={x:r},u={axis:t,keepDims:n};return s.BV.runKernel(o.q2,a,u)}});function St(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if("complex64"===t){const t=St(e,"float32"),n=St(e,"float32");return(0,K.P)(t,n)}const n=(0,p.wT)((0,p.NA)(e),t);return s.BV.makeTensor(n,e,t)}function Nt(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"float32";if("complex64"===t){const t=Nt(e,"float32"),n=St(e,"float32");return(0,K.P)(t,n)}const n=(0,p.p8)((0,p.NA)(e),t);return s.BV.makeTensor(n,e,t)}var Tt=n(5426);function It(e,t){let{indexing:n="xy"}=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if("xy"!==n&&"ij"!==n)throw new TypeError(`${n} is not a valid third argument to meshgrid`);if(void 0===e)return[];let r=(0,i._1)(e,"x","meshgrid",e instanceof Tt.es?e.dtype:"float32");if(void 0===t)return[r];let a=(0,i._1)(t,"y","meshgrid",t instanceof Tt.es?t.dtype:"float32");const s=(0,p.NA)(r.shape),o=(0,p.NA)(a.shape);return"xy"===n?(r=(0,I.X)(r,[1,-1]),a=(0,I.X)(a,[-1,1]),[(0,R.O)(Nt([o,1],r.dtype),r),(0,R.O)(a,Nt([1,s],a.dtype))]):(r=(0,I.X)(r,[-1,1]),a=(0,I.X)(a,[1,-1]),[(0,R.O)(r,Nt([1,o],r.dtype)),(0,R.O)(Nt([s,1],a.dtype),a)])}const $t=(0,u.op)({minimum_:function(e,t){let n=(0,i._1)(e,"a","minimum"),r=(0,i._1)(t,"b","minimum");[n,r]=(0,w.makeTypesMatch)(n,r),"bool"===n.dtype&&(n=(0,N.p)(n,"int32"),r=(0,N.p)(r,"int32")),(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.q8,a)}});const Ct=(0,u.op)({mirrorPad_:function(e,t,n){p.hu("reflect"===n||"symmetric"===n,(()=>`Invalid mode. Mode must be either reflect or symmetric. Got ${n}.`));const r=(0,i._1)(e,"x","mirrorPad");if(0===r.rank)throw new Error("mirrorPad(scalar) is not defined. Pass non-scalar to mirrorPad");p.hu(t.length===r.rank,(()=>`Padding doesn't match input. Must be ${r.rank}. Got ${t.length}.`));const a="reflect"===n?1:0;for(let s=0;s<r.rank;s++)p.hu(2===t[s].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),p.hu(t[s][0]>=0&&t[s][0]<=r.shape[s]-a&&t[s][1]>=0&&t[s][1]<=r.shape[s]-a,(()=>`Padding in dimension ${s} cannot be greater than or equal to ${r.shape[s]-a} or less than 0 for input of shape ${r.shape}`));const u={paddings:t,mode:n},l={x:r};return s.BV.runKernel(o.jQ,l,u)}});const Et=(0,u.op)({mod_:function(e,t){let n=(0,i._1)(e,"a","mod"),r=(0,i._1)(t,"b","mod");[n,r]=(0,w.makeTypesMatch)(n,r);const a={a:n,b:r};return s.BV.runKernel(o.Vb,a)}});const _t=(0,u.op)({moments_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];e=(0,i._1)(e,"x","moments");const r=(0,p.EC)(t,e.shape),a=kt(e,r,n);let s=a.shape;n||(s=(0,Te.rv)(a.shape,r));const o=(0,Re.h)((0,ut.l)((0,N.p)(e,"float32"),(0,I.X)(a,s))),u=kt(o,r,n);return{mean:a,variance:u}}});const Rt=(0,u.op)({multiRNNCell_:function(e,t,n,r){const a=(0,i._1)(t,"data","multiRNNCell"),s=(0,i.sI)(n,"c","multiRNNCell"),o=(0,i.sI)(r,"h","multiRNNCell");let u=a;const l=[];for(let i=0;i<e.length;i++){const t=e[i](u,s[i],o[i]);l.push(t[0]),l.push(t[1]),u=t[1]}const c=[],d=[];for(let i=0;i<l.length;i+=2)c.push(l[i]),d.push(l[i+1]);return[c,d]}});const At=(0,u.op)({multinomial_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=(0,i._1)(e,"logits","multinomial"),u=a.size,l=a.rank;if(u<2)throw new Error(`Error in multinomial: you need at least 2 outcomes, but got ${u}.`);if(l>2)throw new Error(`Rank of probabilities must be 1 or 2, but is ${l}`);n=n||Math.random();const c=1===l?(0,I.X)(a,[1,-1]):a,d={logits:c},p={numSamples:t,seed:n,normalized:r},h=s.BV.runKernel(o.NZ,d,p);return 1===l?(0,I.X)(h,[h.size]):h}});const Ot=(0,u.op)({notEqual_:function(e,t){let n=(0,i._1)(e,"a","notEqual","string_or_numeric"),r=(0,i._1)(t,"b","notEqual","string_or_numeric");[n,r]=(0,w.makeTypesMatch)(n,r),(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o.yQ,a)}});var Dt=n(5808);const Ft=(0,u.op)({onesLike_:function(e){const t={x:(0,i._1)(e,"x","onesLike")};return s.BV.runKernel(o.qW,t)}});const Bt=(0,u.op)({outerProduct_:function(e,t){const n=(0,i._1)(e,"v1","outerProduct"),r=(0,i._1)(t,"v2","outerProduct");p.hu(1===n.rank&&1===r.rank,(()=>`Error in outerProduct: inputs must be rank 1, but got ranks ${n.rank} and ${r.rank}.`));const a=(0,I.X)(n,[-1,1]),s=(0,I.X)(r,[1,-1]);return(0,R.O)(a,s)}});const Mt=(0,u.op)({pad_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const r=(0,i._1)(e,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");const a={paddings:t,constantValue:n},u={x:r};return s.BV.runKernel(o.ly,u,a)}});const Pt=(0,u.op)({pad1d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return(0,p.hu)(2===t.length,(()=>"Invalid number of paddings. Must be length of 2.")),Mt(e,[t],n)}});const Lt=(0,u.op)({pad2d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return(0,p.hu)(2===t.length&&2===t[0].length&&2===t[1].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Mt(e,t,n)}});const Vt=(0,u.op)({pad3d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return(0,p.hu)(3===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Mt(e,t,n)}});const zt=(0,u.op)({pad4d_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;return(0,p.hu)(4===t.length&&2===t[0].length&&2===t[1].length&&2===t[2].length&&2===t[3].length,(()=>"Invalid number of paddings. Must be length of 2 each.")),Mt(e,t,n)}});const Ut=(0,u.op)({spaceToBatchND_:function(e,t,n){const r=(0,i._1)(e,"x","spaceToBatchND");p.hu(r.rank>=1+t.length,(()=>`input rank ${r.rank} should be > than [blockShape] ${t.length}`)),p.hu(n.length===t.length,(()=>`paddings.shape[0] ${n.length} must be equal to [blockShape] ${t.length}`)),p.hu(r.shape.reduce(((e,r,a)=>a>0&&a<=t.length?e&&(r+n[a-1][0]+n[a-1][1])%t[a-1]===0:e),!0),(()=>`input spatial dimensions ${r.shape.slice(1)} with paddings ${n.toString()} must be divisible by blockShapes ${t.toString()}`));const a={x:r},u={blockShape:t,paddings:n};return s.BV.runKernel(o.TQ,a,u)}});const Wt=(0,u.op)({pool_:function(e,t,n,r,a,s,o){null==a&&(a=[1,1]),null==s&&(s=1),0===r&&(r="valid");const u=(0,i._1)(e,"x","maxPool");let l=u,c=!1;3===u.rank&&(c=!0,l=(0,I.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]])),p.hu(T.jT(s,a),(()=>`Error in pool: Either strides or dilations must be 1. Got strides ${s} and dilations '${a}'`));const d=T.Xw(l.shape,t,s,a,r),h=[d.dilationHeight,d.dilationWidth];let f;f="same"===r?function(e,t){const n=e.map(((e,n)=>e+(e-1)*(t[n]-1))).map((e=>e-1)),r=n.map((e=>Math.floor(e/2))),a=n.map(((e,t)=>e-r[t]));return n.map(((e,t)=>[r[t],a[t]]))}([d.filterHeight,d.filterWidth],h):[[0,0],[0,0]];const m=1===h[0]&&1===h[1],[g,y]=function(e,t,n){const r=n.map((e=>e[0])),a=n.map((e=>e[1])),s=e.concat(r,a),o=t.map(((e,t)=>(e-s[t]%e)%e)),i=a.map(((e,t)=>e+o[t])),u=t.map(((e,t)=>[r[t],i[t]])),l=t.map(((e,t)=>[0,o[t]]));return[u,l]}([d.inHeight,d.inWidth],h,f),x=m?r:"valid",b=m?l:Ut(l,h,g),v=("avg"===n?()=>$(b,t,s,x,o):()=>xt(b,t,s,x,o))(),w=m?v:M(v,h,y);return c?(0,I.X)(w,[w.shape[1],w.shape[2],w.shape[3]]):w}});var Gt=n(8650),Ht=n(4502);const qt=(0,u.op)({prod_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=(0,i._1)(e,"x","prod");"bool"===r.dtype&&(r=(0,N.p)(r,"int32"));const a={x:r},u={axis:t,keepDims:n};return s.BV.runKernel(o.Dl,a,u)}});const Xt=(0,u.op)({rand_:function(e,t,n){const r=(0,p.NA)(e);let a=null;if(null==n||"float32"===n)a=new Float32Array(r);else if("int32"===n)a=new Int32Array(r);else{if("bool"!==n)throw new Error(`Unknown data type ${n}`);a=new Uint8Array(r)}for(let s=0;s<r;s++)a[s]=t();return s.BV.makeTensor(a,e,n)}});var Kt=n(3849);class jt{constructor(e,t,n,r,a){this.mean=e,this.stdDev=t,this.dtype=n,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);const s=a||Math.random();this.random=Kt.alea(s.toString())}nextValue(){if(!isNaN(this.nextVal)){const e=this.nextVal;return this.nextVal=NaN,e}let e,t,n=!1;for(;!n;){let r,a,s;do{r=2*this.random()-1,a=2*this.random()-1,s=r*r+a*a}while(s>=1||0===s);const o=Math.sqrt(-2*Math.log(s)/s);e=this.mean+this.stdDev*r*o,t=this.mean+this.stdDev*a*o,this.truncated&&!this.isValidTruncated(e)||(n=!0)}return this.truncated&&!this.isValidTruncated(t)||(this.nextVal=this.convertValue(t)),this.convertValue(e)}convertValue(e){return null==this.dtype||"float32"===this.dtype?e:Math.round(e)}isValidTruncated(e){return e<=this.upper&&e>=this.lower}}class Yt{constructor(e,t,n,r){this.alpha=e,this.beta=1/t,this.dtype=n;const a=r||Math.random();this.randu=Kt.alea(a.toString()),this.randn=new jt(0,1,n,!1,this.randu()),this.d=e<1?e+2/3:e-1/3,this.c=1/Math.sqrt(9*this.d)}nextValue(){let e,t,n,r,a,s;for(;;){do{r=this.randn.nextValue(),s=1+this.c*r}while(s<=0);if(s*=s*s,e=r*r,t=1-.331*e*e,n=.5*e+this.d*(1-s+Math.log(s)),a=this.randu(),a<t||Math.log(a)<n)break}return s=1/this.beta*this.d*s,this.alpha<1&&(s*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(s)}convertValue(e){return"float32"===this.dtype?e:Math.round(e)}}class Qt{constructor(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:0,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;if(this.canReturnFloat=()=>null==this.dtype||"float32"===this.dtype,this.min=e,this.range=t-e,this.dtype=n,null==r&&(r=Math.random()),"number"===typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error(`The difference between ${e} - ${t} <= 1 and dtype is not float`);this.random=Kt.alea(r)}convertValue(e){return this.canReturnFloat()?e:Math.round(e)}nextValue(){return this.convertValue(this.min+this.range*this.random())}}const Zt=(0,u.op)({randomGamma_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",a=arguments.length>4?arguments[4]:void 0;if(null==n&&(n=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error(`Unsupported data type ${r}`);const s=new Yt(t,n,r,a),o=(0,H.f)(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=s.nextValue();return o.toTensor()}});const Jt=(0,u.op)({randomNormal_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;if(null!=r&&"bool"===r)throw new Error(`Unsupported data type ${r}`);const s=new jt(t,n,r,!1,a),o=(0,H.f)(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=s.nextValue();return o.toTensor()}});const en=(0,u.op)({randomStandardNormal_:function(e,t,n){if(null!=t&&"bool"===t)throw new Error(`Unsupported data type ${t}`);return Jt(e,0,1,t,n)}});const tn=(0,u.op)({randomUniform_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32",a=arguments.length>4?arguments[4]:void 0;const s=(0,H.f)(e,r),o=new Qt(t,n,null,a);for(let i=0;i<s.values.length;i++)s.values[i]=o.nextValue();return s.toTensor()}});function nn(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"float32";if(0===n)throw new Error("Cannot have a step of zero");const a={start:e,stop:t,step:n,dtype:r};return s.BV.runKernel(o.e6,{},a)}var rn=n(286);const an=(0,u.op)({reciprocal_:function(e){const t={x:(0,i._1)(e,"x","reciprocal")};return s.BV.runKernel(o.$H,t)}});var sn=n(970),on=n(7680);const un=(0,u.op)({reverse_:function(e,t){const n={x:(0,i._1)(e,"x","reverse")},r={dims:t};return s.BV.runKernel(o.mK,n,r)}});const ln=(0,u.op)({reverse1d_:function(e){const t=(0,i._1)(e,"x","reverse");return p.hu(1===t.rank,(()=>`Error in reverse1D: x must be rank 1 but got rank ${t.rank}.`)),un(t,0)}});const cn=(0,u.op)({reverse2d_:function(e,t){const n=(0,i._1)(e,"x","reverse");return p.hu(2===n.rank,(()=>`Error in reverse2D: x must be rank 2 but got rank ${n.rank}.`)),un(n,t)}});const dn=(0,u.op)({reverse3d_:function(e,t){const n=(0,i._1)(e,"x","reverse");return p.hu(3===n.rank,(()=>`Error in reverse3D: x must be rank 3 but got rank ${n.rank}.`)),un(n,t)}});const pn=(0,u.op)({reverse4d_:function(e,t){const n=(0,i._1)(e,"x","reverse");return p.hu(4===n.rank,(()=>`Error in reverse4D: x must be rank 4 but got rank ${n.rank}.`)),un(n,t)}});const hn=(0,u.op)({round_:function(e){const t={x:(0,i._1)(e,"x","round")};return s.BV.runKernel(o.e0,t)}});const fn=(0,u.op)({rsqrt_:function(e){const t={x:(0,i._1)(e,"x","rsqrt","float32")};return s.BV.runKernel(o.bV,t)}});const mn=(0,u.op)({selu_:function(e){const t={x:(0,i._1)(e,"x","selu")};return s.BV.runKernel(o.oF,t)}});const gn=(0,u.op)({separableConv2d_:function(e,t,n,r,a){let s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],o=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"NHWC";const u=(0,i._1)(e,"x","separableConv2d"),l=(0,i._1)(t,"depthwiseFilter","separableConv2d"),c=(0,i._1)(n,"pointwiseFilter","separableConv2d");let d=u,h=!1;if(3===u.rank&&(h=!0,d=(0,I.X)(u,[1,u.shape[0],u.shape[1],u.shape[2]])),"NCHW"===o)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");p.hu(4===d.rank,(()=>`Error in separableConv2d: input must be rank 4, but got rank ${d.rank}.`)),p.hu(4===l.rank,(()=>`Error in separableConv2d: depthwise filter must be rank 4, but got rank ${l.rank}.`)),p.hu(4===c.rank,(()=>`Error in separableConv2d: pointwise filter must be rank 4, but got rank ${l.rank}.`)),p.hu(1===c.shape[0],(()=>`Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got ${c.shape[0]}.`)),p.hu(1===c.shape[1],(()=>`Error in separableConv2d: the second dimension of pointwise filter must be 1, but got ${c.shape[1]}.`));const f=l.shape[2],m=l.shape[3];p.hu(c.shape[2]===f*m,(()=>`Error in separableConv2d: the third dimension of pointwise filter must be ${f*m}, but got ${c.shape[2]}.`));const g=pe(d,l,r,a,o,s),y=1,x=J(g,c,y,"valid",o);return h?(0,I.X)(x,[x.shape[1],x.shape[2],x.shape[3]]):x}});const yn=async function(e,t){const n=(0,i._1)(e,"x","setdiff1d"),r=(0,i._1)(t,"y","setdiff1d");p.hu(n.dtype===r.dtype,(()=>`x and y should have the same dtype, but got x (${n.dtype}) and y (${r.dtype}).`)),p.hu(1===n.rank,(()=>`x should be 1D tensor, but got x (${n.shape}).`)),p.hu(1===r.rank,(()=>`y should be 1D tensor, but got y (${r.shape}).`));const a=await n.data(),s=await r.data(),o=new Set(s);let u=0;for(let i=0;i<a.length;i++)o.has(a[i])||u++;const l=new Tt.YD([u],n.dtype),c=new Tt.YD([u],"int32");for(let i=0,d=0;i<a.length;i++)o.has(a[i])||(l.values[d]=a[i],c.values[d]=i,d++);return[l.toTensor(),c.toTensor()]};const xn=(0,u.op)({sign_:function(e){const t={x:(0,i._1)(e,"x","sign")};return s.BV.runKernel(o.i5,t)}});const bn=(0,u.op)({sin_:function(e){const t={x:(0,i._1)(e,"x","sin","float32")};return s.BV.runKernel(o.RQ,t)}});const vn=(0,u.op)({sinh_:function(e){const t={x:(0,i._1)(e,"x","sinh")};return s.BV.runKernel(o.w3,t)}});const wn=(0,u.op)({slice1d_:function(e,t,n){const r=(0,i._1)(e,"x","slice1d");return p.hu(1===r.rank,(()=>`slice1d expects a rank-1 tensor, but got a rank-${r.rank} tensor`)),D(r,[t],[n])}});const kn=(0,u.op)({slice2d_:function(e,t,n){const r=(0,i._1)(e,"x","slice2d");return p.hu(2===r.rank,(()=>`slice2d expects a rank-2 tensor, but got a rank-${r.rank} tensor`)),D(r,t,n)}});const Sn=(0,u.op)({slice3d_:function(e,t,n){const r=(0,i._1)(e,"x","slice3d");return p.hu(3===r.rank,(()=>`slice3d expects a rank-3 tensor, but got a rank-${r.rank} tensor`)),D(r,t,n)}});const Nn=(0,u.op)({slice4d_:function(e,t,n){const r=(0,i._1)(e,"x","slice4d");return p.hu(4===r.rank,(()=>`slice4d expects a rank-4 tensor, but got a rank-${r.rank} tensor`)),D(r,t,n)}});const Tn=(0,u.op)({softmax_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:-1;const n=(0,i._1)(e,"logits","softmax","float32");if(-1===t&&(t=n.rank-1),t!==n.rank-1)throw Error(`Softmax along a non-last dimension is not yet supported. Logits was rank ${n.rank} and dim was ${t}`);const r={logits:n},a={dim:t};return s.BV.runKernel(o.Gc,r,a)}});const In=(0,u.op)({fft_:function(e){(0,p.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.fft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.BV.runKernel(o.vw,t)}});const $n=(0,u.op)({ifft_:function(e){(0,p.hu)("complex64"===e.dtype,(()=>`The dtype for tf.spectral.ifft() must be complex64 but got ${e.dtype}.`));const t={input:e};return s.BV.runKernel(o.Qg,t)}});const Cn=(0,u.op)({irfft_:function(e){const t=e.shape[e.shape.length-1],n=e.size/t;let r;if(t<=2){const a=(0,I.X)(e,[n,t]);r=$n(a)}else{const a=[n,2*(t-1)],s=(0,I.X)((0,rn.k)(e),[n,t]),o=(0,I.X)((0,Xe.a)(e),[n,t]),i=un(D(s,[0,1],[n,t-2]),1),u=(0,A.d)(un(D(o,[0,1],[n,t-2]),1),(0,Ee.i)(-1)),l=_([s,i],1),c=_([o,u],1),d=(0,I.X)((0,K.P)(l,c),[a[0],a[1]]);r=$n(d)}if(r=(0,rn.k)(r),3===e.rank&&0!==e.shape[0]){const t=r,n=e.shape[0];r=(0,I.X)(r,[n,r.shape[0]/n,r.shape[1]]),t.dispose()}return r}});const En=(0,u.op)({split_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0;const r=(0,i._1)(e,"x","split"),a={x:r},u={numOrSizeSplits:t,axis:n};return s.BV.runKernel(o.L8,a,u)}});const _n=(0,u.op)({rfft_:function(e,t){(0,p.hu)("float32"===e.dtype,(()=>`The dtype for rfft() must be real value but got ${e.dtype}`));let n=e.shape[e.shape.length-1];const r=e.size/n;let a;if(null!=t&&t<n){const r=e.shape.map((e=>0)),s=e.shape.map((e=>e));s[e.shape.length-1]=t,a=D(e,r,s),n=t}else if(null!=t&&t>n){const r=e.shape.map((e=>e));r[e.shape.length-1]=t-n,a=_([e,St(r)],e.shape.length-1),n=t}else a=e;const s=(0,be.P)(a),o=(0,I.X)((0,K.P)(a,s),[r,n]),i=In(o),u=Math.floor(n/2)+1,l=(0,rn.k)(i),c=(0,Xe.a)(i),d=En(l,[u,n-u],l.shape.length-1),h=En(c,[u,n-u],c.shape.length-1),f=a.shape.slice();return f[a.shape.length-1]=u,(0,I.X)((0,K.P)(d[0],h[0]),f)}});const Rn=(0,u.op)({squaredDifference_:function(e,t){let n=(0,i._1)(e,"a","squaredDifference"),r=(0,i._1)(t,"b","squaredDifference");[n,r]=(0,w.makeTypesMatch)(n,r),(0,ge.assertAndGetBroadcastShape)(n.shape,r.shape);const a={a:n,b:r};return s.BV.runKernel(o._t,a,{})}});const An=(0,u.op)({squeeze_:function(e,t){const n=(0,i._1)(e,"x","squeeze","string_or_numeric");return(0,I.X)(n,(0,p.bp)(n.shape,t).newShape)}});const On=(0,u.op)({stack_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=(0,i.sI)(e,"tensors","stack","string_or_numeric");p.hu(n.length>=1,(()=>"Pass at least one tensor to tf.stack")),n.length>0&&p.hu(t<=n[0].rank,(()=>"Axis must be <= rank of the tensor"));const r=n,a={axis:t};return s.BV.runKernel(o.Qi,r,a)}});var Dn=n(1448);const Fn=(0,u.op)({stridedSlice_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0,l=arguments.length>6&&void 0!==arguments[6]?arguments[6]:0,c=arguments.length>7&&void 0!==arguments[7]?arguments[7]:0,d=arguments.length>8&&void 0!==arguments[8]?arguments[8]:0;const p=(0,i._1)(e,"x","stridedSlice","string_or_numeric"),h={x:p},f={begin:t,end:n,strides:r,beginMask:a,endMask:u,ellipsisMask:l,newAxisMask:c,shrinkAxisMask:d};return s.BV.runKernel(o.m2,h,f)}});const Bn=(0,u.op)({tan_:function(e){const t={x:(0,i._1)(e,"x","tan","float32")};return s.BV.runKernel(o.sE,t)}});var Mn=n(1150),Pn=n(3258);function Ln(e,t){(0,p.Cq)(e);const n=(0,i.C)(e,t);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,Pn.H)(e,null,n,t)}function Vn(e,t,n){if((0,p.Cq)(e),null!=t&&2!==t.length)throw new Error("tensor2d() requires shape to have two numbers");const r=(0,i.C)(e,n);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,Pn.H)(e,t,r,n)}var zn=n(8970);function Un(e,t,n){if((0,p.Cq)(e),null!=t&&4!==t.length)throw new Error("tensor4d() requires shape to have four numbers");const r=(0,i.C)(e,n);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,Pn.H)(e,t,r,n)}function Wn(e,t,n){if((0,p.Cq)(e),null!=t&&5!==t.length)throw new Error("tensor5d() requires shape to have five numbers");const r=(0,i.C)(e,n);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,Pn.H)(e,t,r,n)}function Gn(e,t,n){if((0,p.Cq)(e),null!=t&&6!==t.length)throw new Error("tensor6d() requires shape to have six numbers");const r=(0,i.C)(e,n);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==t)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return t=t||r,(0,Pn.H)(e,t,r,n)}const Hn=(0,u.op)({topk_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const r=(0,i._1)(e,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=r.shape[r.shape.length-1];if(t<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${t}`);if(t>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${t}`);const u={x:r},l={k:t,sorted:n},[c,d]=s.BV.runKernel(o.cW,u,l);return{values:c,indices:d}}});const qn=(0,u.op)({truncatedNormal_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1,r=arguments.length>3?arguments[3]:void 0,a=arguments.length>4?arguments[4]:void 0;if(null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");const s=new jt(t,n,r,!0,a),o=(0,H.f)(e,r);for(let i=0;i<o.values.length;i++)o.values[i]=s.nextValue();return o.toTensor()}});const Xn=(0,u.op)({unique_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=(0,i._1)(e,"x","unique","string_or_numeric");(0,p.hu)(n.rank>0,(()=>"The input tensor must be at least 1D"));const r={x:n},a={axis:t},[u,l]=s.BV.runKernel(o.kp,r,a);return{values:u,indices:l}}});const Kn=(0,u.op)({unsortedSegmentSum_:function(e,t,n){const r=(0,i._1)(e,"x","unsortedSegmentSum"),a=(0,i._1)(t,"segmentIds","unsortedSegmentSum","int32");(0,p.hu)((0,p.GN)(n),(()=>"numSegments must be of dtype int"));const u={x:r,segmentIds:a},l={numSegments:n};return s.BV.runKernel(o.Qv,u,l)}});const jn=(0,u.op)({unstack_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=(0,i._1)(e,"x","unstack","string_or_numeric");p.hu(t>=-n.shape.length&&t<n.shape.length,(()=>`Axis = ${t} is not in [-${n.shape.length}, ${n.shape.length})`));const r={value:n},a={axis:t};return s.BV.runKernel(o.To,r,a)}});function Yn(e,t){return gt(e,t,"right")}function Qn(e){let t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;return s.BV.makeVariable(e,t,n,r)}var Zn=n(6791);const Jn=async function(e){const t=(0,i._1)(e,"condition","whereAsync","bool"),n=await t.data(),r=(0,Zn.Z)(t.shape,n);return e!==t&&t.dispose(),r};const er=async function(e,t,n){const r=(0,i._1)(e,"tensor","boolMask"),a=(0,i._1)(t,"mask","boolMask","bool"),s=null==n?0:n,o=a.rank,u=r.shape;p.hu(o>0,(()=>"mask cannot be scalar")),p.k5(u.slice(s,s+o),a.shape,"mask's shape must match the first K dimensions of tensor's shape,");let l=1;for(let i=s;i<s+o;i++)l*=u[i];const c=u.slice(0,s).concat([l],u.slice(s+o)),d=(0,I.X)(r,c),h=(0,I.X)(a,[-1]),f=await Jn(h),m=An(f,[1]),g=Ge(d,m,s);return e!==r&&r.dispose(),t!==a&&a.dispose(),m.dispose(),d.dispose(),h.dispose(),f.dispose(),g};var tr=n(9529);const nr=(0,u.op)({movingAverage_:function(e,t,n,r){let a=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];const s=(0,i._1)(e,"v","movingAverage"),o=(0,i._1)(t,"x","movingAverage"),u=(0,i._1)(n,"decay","movingAverage");(0,w.assertTypesMatch)(s,o),p.hu(p.cO(s.shape,o.shape),(()=>"Shape mismatch in v and x"));const l=(0,Ee.i)(1),c=(0,ut.l)(l,u);let h=(0,A.d)((0,ut.l)(o,s),c);if(a){p.hu(null!=r,(()=>"When using zeroDebias: true, step is required."));const e=(0,i._1)(r,"step","movingAverage");h=(0,me.h)(h,(0,ut.l)(l,(0,Ce.s)(u,e)))}return(0,d.I)(s,h)}});var rr=n(8257);const ar=(0,u.op)({scatterND_:function(e,t,n){const r=(0,i._1)(e,"indices","scatterND","int32"),a=(0,i._1)(t,"updates","scatterND");rr.validateInput(a,r,n);const u={indices:r,updates:a},l={shape:n};return s.BV.runKernel(o.xQ,u,l)}});function sr(e,t,n,r){if("int32"!==e.dtype)throw new Error(`tf.sparseToDense() expects the indices to be int32 type, but the dtype was ${e.dtype}.`);if(e.rank>2)throw new Error(`sparseIndices should be a scalar, vector, or matrix, but got shape ${e.shape}.`);const a=e.rank>0?e.shape[0]:1,s=e.rank>1?e.shape[1]:1;if(n.length!==s)throw new Error(`outputShape has incorrect number of elements:, ${n.length}, should be: ${s}.`);const o=t.size;if(0!==t.rank&&(1!==t.rank||o!==a))throw new Error(`sparseValues has incorrect shape ${t.shape}, should be [] or [${a}]`);if(t.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}const or=(0,u.op)({sparseToDense_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0;const a=(0,i._1)(e,"sparseIndices","sparseToDense","int32"),u=(0,i._1)(t,"sparseValues","sparseToDense","string_or_numeric"),l=(0,i._1)(r,"defaultValue","sparseToDense",u.dtype);sr(a,u,n,l);const c={sparseIndices:a,sparseValues:u,defaultValue:l},d={outputShape:n};return s.BV.runKernel(o.D2,c,d)}});const ir=(0,u.op)({gatherND_:function(e,t){const n=(0,i._1)(t,"indices","gatherND","int32"),r={params:(0,i._1)(e,"x","gatherND","string_or_numeric"),indices:n};return s.BV.runKernel(o.q1,r)}});const ur=(0,u.op)({dropout_:function(e,t,n,r){const a=(0,i._1)(e,"x","dropout");if(p.hu("float32"===a.dtype,(()=>`x has to be a floating point tensor since it's going to be scaled, but got a ${a.dtype} tensor instead.`)),p.hu(t>=0&&t<1,(()=>`rate must be a float in the range [0, 1), but got ${t}.`)),0===t)return e instanceof Tt.es?a.clone():a;const s=function(e,t){if(null==t)return e.shape.slice();if(p.cO(e.shape,t))return t;if(e.shape.length===t.length){const n=[];for(let r=0;r<e.shape.length;r++)null==t[r]&&null!=e.shape[r]?n.push(e.shape[r]):n.push(t[r]);return n}return t}(a,n),o=1-t,u=(0,me.h)(Ue((0,d.I)(tn(s,0,1,"float32",r),o)),o);return(0,A.d)(a,u)}});function lr(e){return Math.floor(Math.pow(2,Math.ceil(Math.log(e)/Math.log(2))))}function cr(e,t,n){const r=1-e%2,a=new Float32Array(e);for(let s=0;s<e;++s){const o=2*Math.PI*s/(e+r-1);a[s]=t-n*Math.cos(o)}return Ln(a,"float32")}const dr=async function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:1;const r=(0,i._1)(e,"predictions","inTopK"),a=(0,i._1)(t,"targets","inTopK");(0,p.hu)(r.rank>1,(()=>`inTopK() expects the predictions to be of rank 2 or higher, but got ${r.rank}`)),(0,p.hu)(r.rank-1===a.rank,(()=>`predictions rank should be 1 larger than targets rank, but got predictions rank ${r.rank} and targets rank ${a.rank}`)),(0,p.k5)(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension.");const s=r.shape[r.shape.length-1];(0,p.hu)(n>0&&n<=s,(()=>`'k' passed to inTopK() must be > 0 && <= the predictions last dimension (${s}), but got ${n}`));const o=await r.data(),u=await a.data(),[l,c]=[o.length/s,s],d=(0,p.WP)("bool",l);for(let i=0;i<l;i++){const e=i*c,t=o.subarray(e,e+c),r=[];for(let n=0;n<t.length;n++)r.push({value:t[n],index:n});r.sort(((e,t)=>t.value-e.value)),d[i]=0;for(let a=0;a<n;a++)if(r[a].index===u[i]){d[i]=1;break}}return e!==r&&r.dispose(),t!==a&&a.dispose(),(0,Mn.X)(d,a.shape,"bool")};const pr=(0,u.op)({conv2DBackpropFilter_:function(e,t,n,r,a){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"NHWC",u=arguments.length>6?arguments[6]:void 0,l=e;3===e.rank&&(l=(0,I.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let c=t;3===c.rank&&(c=(0,I.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]])),p.hu(4===l.rank,(()=>`Error in conv2dDerFilter: input must be rank 4, but got shape ${l.shape}.`)),p.hu(4===c.rank,(()=>`Error in conv2dDerFilter: dy must be rank 4, but got shape ${c.shape}.`)),p.hu(4===n.length,(()=>`Error in conv2dDerFilter: filterShape must be length 4, but got ${n}.`));const d="NHWC"===i?l.shape[3]:l.shape[1],h="NHWC"===i?c.shape[3]:c.shape[1];p.hu(d===n[2],(()=>`Error in conv2dDerFilter: depth of input ${d}) must match input depth in filter (${n[2]}.`)),p.hu(h===n[3],(()=>`Error in conv2dDerFilter: depth of dy (${h}) must match output depth for filter (${n[3]}).`)),T.m("conv2dDerFilter",a,u);const f={x:l,dy:c},m={strides:r,pad:a,dataFormat:i,dimRoundingMode:u,filterShape:n};return s.BV.runKernel(o.wU,f,m)}});var hr=n(9997);const fr=(0,u.op)({fusedConv2d_:function(e){let{x:t,filter:n,strides:r,pad:a,dataFormat:u="NHWC",dilations:l=[1,1],dimRoundingMode:c,bias:h,activation:f="linear",preluActivationWeights:m,leakyreluAlpha:g}=e;if(f=f||"linear",!1===(0,hr.uy)(s.BV.state.gradientDepth,f)){p.hu("NHWC"===u,(()=>`Error in fused conv2d: got dataFormat of ${u} but only NHWC is currently supported for the case of gradient depth is 0 and the activation is not linear.`));let e=J(t,n,r,a,u,l,c);return null!=h&&(e=(0,d.I)(e,h)),(0,hr.QH)(e,f,m,g)}const y=(0,i._1)(t,"x","conv2d","float32"),x=(0,i._1)(n,"filter","conv2d","float32");let b=y,v=!1;3===y.rank&&(v=!0,b=(0,I.X)(y,[1,y.shape[0],y.shape[1],y.shape[2]])),p.hu(4===b.rank,(()=>`Error in fused conv2d: input must be rank 4, but got rank ${b.rank}.`)),p.hu(4===x.rank,(()=>`Error in fused conv2d: filter must be rank 4, but got rank ${x.rank}.`)),T.m("fused conv2d",a,c);const k="NHWC"===u?b.shape[3]:b.shape[1];p.hu(x.shape[2]===k,(()=>`Error in conv2d: depth of input (${k}) must match input depth for filter ${x.shape[2]}.`)),p.hu(T.jT(r,l),(()=>`Error in conv2D: Either strides or dilations must be 1. Got strides ${r} and dilations '${l}'`));const S=T.Ix(b.shape,x.shape,r,l,a,c);let N,$;if(null!=h&&(N=(0,i._1)(h,"bias","fused conv2d"),[N]=(0,w.makeTypesMatch)(N,y),"NHWC"===u?ge.assertAndGetBroadcastShape(S.outShape,N.shape):(p.hu(N.shape.length<=1,(()=>`Error in fused conv2d: only supports scalar or 1-D Tensor bias for NCHW format but got the bias of rank-${N.shape.length}.`)),p.hu(0===N.shape.length||N.shape[0]===S.outChannels||1===N.shape[0],(()=>`Error in fused conv2d: bias shape (${N.shape}) is not compatible with the number of output channels (${S.outChannels})`)))),null!=m){const e=m.shape;if(p.hu(e.length<=1||3===e.length,(()=>`Error in fused conv2d: only supports scalar, 1-D Tensor or 3-D Tensor PReLU activation weights but got a tensor of rank-${e.length}.`)),1===e.length)p.hu(1===e[0]||e[0]===S.outChannels,(()=>`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the number of output channels (${S.outChannels}).`));else if(3===e.length)try{ge.assertAndGetBroadcastShape(e,S.outShape)}catch(R){const t=`Error in fused conv2d: PReLU activation weights (${e}) is not compatible with the output shape of the conv2d (${S.outShape}).`;throw Error(t)}$=(0,i._1)(m,"prelu weights","fused conv2d")}const C=(e,t)=>{p.hu("NHWC"===u,(()=>`Error in gradient of fused conv2D: got dataFormat of ${u} but only NHWC is currently supported.`));const[n,s,o,i]=t,c=(0,hr.Fr)(e,o,f);p.hu(T.I0(l),(()=>`Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '${l}'`));const d=[te(s.shape,c,n,r,a),pr(s,c,n.shape,r,a)];if(null!=i){const e=(0,hr.pf)(i,c);d.push(e)}return d},E={x:b,filter:x,bias:N,preluActivationWeights:$},_={strides:r,pad:a,dataFormat:u,dilations:l,dimRoundingMode:c,activation:f,leakyreluAlpha:g};if(null==h){const e=(0,at.cb)(((e,t,n)=>{let r=s.BV.runKernel(o._V,E,_);return n([t,e,r]),v&&(r=(0,I.X)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:C}}));return e(b,x)}{const e=(0,at.cb)(((e,t,n,r)=>{let a=s.BV.runKernel(o._V,E,_);return r([t,e,a,n]),v&&(a=(0,I.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:C}}));return e(b,x,N)}}});const mr=(0,u.op)({depthwiseConv2dNativeBackpropFilter_:function(e,t,n,r,a){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],u=arguments.length>6?arguments[6]:void 0,l=e;3===e.rank&&(l=(0,I.X)(e,[1,e.shape[0],e.shape[1],e.shape[2]]));let c=t;3===c.rank&&(c=(0,I.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d={x:l,dy:c},p={strides:r,pad:a,dimRoundingMode:u,dilations:i,filterShape:n};return s.BV.runKernel(o.sL,d,p)}});const gr=(0,u.op)({depthwiseConv2dNativeBackpropInput_:function(e,t,n,r,a){let i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:[1,1],u=arguments.length>6?arguments[6]:void 0,l=t,c=!1;3===t.rank&&(c=!0,l=(0,I.X)(t,[1,t.shape[0],t.shape[1],t.shape[2]]));const d={dy:l,filter:n},p={strides:r,pad:a,dimRoundingMode:u,dilations:i,inputShape:e},h=s.BV.runKernel(o.y7,d,p);return c?(0,I.X)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const yr=(0,u.op)({fusedDepthwiseConv2d_:function(e){let{x:t,filter:n,strides:r,pad:a,dataFormat:u="NHWC",dilations:l=[1,1],dimRoundingMode:c,bias:h,activation:f="linear",preluActivationWeights:m,leakyreluAlpha:g}=e;if(!1===(0,hr.uy)(s.BV.state.gradientDepth,f)){let e=pe(t,n,r,a,u,l,c);return null!=h&&(e=(0,d.I)(e,h)),(0,hr.QH)(e,f,m,g)}const y=(0,i._1)(t,"x","depthwiseConv2d","float32"),x=(0,i._1)(n,"filter","depthwiseConv2d","float32");let b=y,v=!1;3===y.rank&&(v=!0,b=(0,I.X)(y,[1,y.shape[0],y.shape[1],y.shape[2]])),p.hu(4===b.rank,(()=>`Error in fused depthwiseConv2d: input must be rank 4, but got rank ${b.rank}.`)),p.hu(4===x.rank,(()=>`Error in fused depthwiseConv2d: filter must be rank 4, but got rank ${x.rank}.`)),p.hu(b.shape[3]===x.shape[2],(()=>`Error in fused depthwiseConv2d: number of input channels (${b.shape[3]}) must match the inChannels dimension in filter ${x.shape[2]}.`)),null==l&&(l=[1,1]),p.hu(T.jT(r,l),(()=>`Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides ${r} and dilations '${l}'`)),T.m("fused depthwiseConv2d",a,c);const k=T.Ix(b.shape,x.shape,r,l,a,c,!0);let S,N;null!=h&&(S=(0,i._1)(h,"bias","fused conv2d"),[S]=(0,w.makeTypesMatch)(S,y),ge.assertAndGetBroadcastShape(k.outShape,S.shape)),null!=m&&(N=(0,i._1)(m,"prelu weights","fused depthwiseConv2d"));const $=(e,t)=>{p.hu(T.I0(l),(()=>`Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '${l}'`));const[n,s,o,i]=t,u=(0,hr.Fr)(e,o,f),d=gr(s.shape,u,n,r,a,l,c),h=mr(s,u,n.shape,r,a,l,c);if(null!=i){return[d,h,(0,hr.pf)(S,u)]}return[d,h]},C={x:b,filter:x,bias:S,preluActivationWeights:N},E={strides:r,pad:a,dataFormat:u,dilations:l,dimRoundingMode:c,activation:f,leakyreluAlpha:g};if(null==h){const e=(0,at.cb)(((e,t,n)=>{let r=s.BV.runKernel(o.lu,C,E);return n([t,e,r]),v&&(r=(0,I.X)(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:$}}));return e(b,x)}{const e=(0,at.cb)(((e,t,n,r)=>{let a=s.BV.runKernel(o.lu,C,E);return r([t,e,a,n]),v&&(a=(0,I.X)(a,[a.shape[1],a.shape[2],a.shape[3]])),{value:a,gradFunc:$}}));return e(b,x,S)}}});const xr=(0,u.op)({fusedMatMul_:function(e){let{a:t,b:n,transposeA:r=!1,transposeB:a=!1,bias:u,activation:l="linear",preluActivationWeights:c,leakyreluAlpha:h=.2}=e;if(!1===(0,hr.uy)(s.BV.state.gradientDepth,l)){let e=(0,R.O)(t,n,r,a);return null!=u&&(e=(0,d.I)(e,u)),(0,hr.QH)(e,l,c,h)}let f=(0,i._1)(t,"a","fused matMul"),m=(0,i._1)(n,"b","fused matMul");[f,m]=(0,w.makeTypesMatch)(f,m);const g=r?f.shape[f.rank-2]:f.shape[f.rank-1],y=a?m.shape[m.rank-1]:m.shape[m.rank-2],x=r?f.shape[f.rank-1]:f.shape[f.rank-2],b=a?m.shape[m.rank-2]:m.shape[m.rank-1],v=f.shape.slice(0,-2),k=m.shape.slice(0,-2),S=p.NA(v),N=p.NA(k);p.hu(g===y,(()=>`Error in fused matMul: inner shapes (${g}) and (${y}) of Tensors with shapes ${f.shape} and ${m.shape} and transposeA=${r} and transposeB=${a} must match.`));const T=ge.assertAndGetBroadcastShape(f.shape.slice(0,-2),m.shape.slice(0,-2)).concat([x,b]),$=r?(0,I.X)(f,[S,g,x]):(0,I.X)(f,[S,x,g]),C=a?(0,I.X)(m,[N,b,y]):(0,I.X)(m,[N,y,b]);let E,_;null!=u&&(E=(0,i._1)(u,"bias","fused matMul"),[E]=(0,w.makeTypesMatch)(E,f),ge.assertAndGetBroadcastShape(T,E.shape)),null!=c&&(_=(0,i._1)(c,"prelu weights","fused matMul"));const A=(e,t)=>{const[n,s,o,i]=t,c=(0,hr.Fr)((0,I.X)(e,o.shape),o,l);let d,p;if(r||a?!r&&a?(d=(0,R.O)(c,s,!1,!1),p=(0,R.O)(c,n,!0,!1)):r&&!a?(d=(0,R.O)(s,c,!1,!0),p=(0,R.O)(n,c,!1,!1)):(d=(0,R.O)(s,c,!0,!0),p=(0,R.O)(c,n,!0,!0)):(d=(0,R.O)(c,s,!1,!0),p=(0,R.O)(n,c,!0,!1)),null!=u){return[d,p,(0,hr.pf)(i,c)]}return[d,p]},O={a:$,b:C,bias:E,preluActivationWeights:_},D={transposeA:r,transposeB:a,activation:l,leakyreluAlpha:h};if(null==u){const e=(0,at.cb)(((e,t,n)=>{const r=s.BV.runKernel(o.us,O,D);return n([e,t,r]),{value:(0,I.X)(r,T),gradFunc:A}}));return e($,C)}{const e=(0,at.cb)(((e,t,n,r)=>{const a=s.BV.runKernel(o.us,O,D);return r([e,t,a,n]),{value:(0,I.X)(a,T),gradFunc:A}}));return e($,C,E)}}});const br=(0,u.op)({hammingWindow_:function(e){return cr(e,.54,.46)}});const vr=(0,u.op)({hannWindow_:function(e){return cr(e,.5,.5)}});const wr=(0,u.op)({frame_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3],a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,s=0;const o=[];for(;s+t<=e.size;)o.push(D(e,s,t)),s+=n;if(r)for(;s<e.size;){const r=s+t-e.size,i=_([D(e,s,t-r),(0,ze.h)([r],a)]);o.push(i),s+=n}return 0===o.length?Vn([],[0,t]):(0,I.X)(_(o),[o.length,t])}});const kr=(0,u.op)({stft_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:vr;null==r&&(r=lr(t));const s=wr(e,t,n),o=(0,A.d)(s,a(t));return _n(o,r)}});const Sr=(0,u.op)({cropAndResize_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"bilinear",u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const l=(0,i._1)(e,"image","cropAndResize"),c=(0,i._1)(t,"boxes","cropAndResize","float32"),d=(0,i._1)(n,"boxInd","cropAndResize","int32"),h=c.shape[0];p.hu(4===l.rank,(()=>`Error in cropAndResize: image must be rank 4,but got rank ${l.rank}.`)),p.hu(2===c.rank&&4===c.shape[1],(()=>`Error in cropAndResize: boxes must be have size [${h},4] but had shape ${c.shape}.`)),p.hu(1===d.rank&&d.shape[0]===h,(()=>`Error in cropAndResize: boxInd must be have size [${h}] but had shape ${c.shape}.`)),p.hu(2===r.length,(()=>`Error in cropAndResize: cropSize must be of length 2, but got length ${r.length}.`)),p.hu(r[0]>=1&&r[1]>=1,(()=>`cropSize must be atleast [1,1], but was ${r}`)),p.hu("bilinear"===a||"nearest"===a,(()=>`method must be bilinear or nearest, but was ${a}`));const f={image:l,boxes:c,boxInd:d},m={method:a,extrapolationValue:u,cropSize:r},g=s.BV.runKernel(o.Vc,f,m);return g}});const Nr=(0,u.op)({flipLeftRight_:function(e){const t=(0,i._1)(e,"image","flipLeftRight","float32");p.hu(4===t.rank,(()=>`Error in flipLeftRight: image must be rank 4,but got rank ${t.rank}.`));const n={image:t};return s.BV.runKernel(o.Uy,n,{})}});const Tr=(0,u.op)({grayscaleToRGB_:function(e){const t=(0,i._1)(e,"image","grayscaleToRGB"),n=t.rank-1,r=t.shape[n];p.hu(t.rank>=2,(()=>`Error in grayscaleToRGB: images must be at least rank 2, but got rank ${t.rank}.`)),p.hu(1===r,(()=>`Error in grayscaleToRGB: last dimension of a grayscale image should be size 1, but got size ${r}.`));const a=new Array(t.rank);return a.fill(1,0,n),a[n]=3,Le(t,a)}});const Ir=(0,u.op)({rotateWithOffset_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const a=(0,i._1)(e,"image","rotateWithOffset","float32");p.hu(4===a.rank,(()=>`Error in rotateWithOffset: image must be rank 4,but got rank ${a.rank}.`));const u={image:a},l={radians:t,fillValue:n,center:r},c=s.BV.runKernel(o.b9,u,l);return c}});function $r(e,t,n,r,a,s){null==r&&(r=.5),null==a&&(a=Number.NEGATIVE_INFINITY),null==s&&(s=0);const o=e.shape[0];return n=Math.min(n,o),p.hu(0<=r&&r<=1,(()=>`iouThreshold must be in [0, 1], but was '${r}'`)),p.hu(2===e.rank,(()=>`boxes must be a 2D tensor, but was of rank '${e.rank}'`)),p.hu(4===e.shape[1],(()=>`boxes must have 4 columns, but 2nd dimension was ${e.shape[1]}`)),p.hu(1===t.rank,(()=>"scores must be a 1D tensor")),p.hu(t.shape[0]===o,(()=>`scores has incompatible shape with boxes. Expected ${o}, but was ${t.shape[0]}`)),p.hu(0<=s&&s<=1,(()=>`softNmsSigma must be in [0, 1], but was '${s}'`)),{maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:s}}const Cr=(0,u.op)({nonMaxSuppression_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const u=(0,i._1)(e,"boxes","nonMaxSuppression","float32"),l=(0,i._1)(t,"scores","nonMaxSuppression","float32"),c=$r(u,l,n,r,a);n=c.maxOutputSize,r=c.iouThreshold,a=c.scoreThreshold;const d={maxOutputSize:n,iouThreshold:r,scoreThreshold:a};return s.BV.runKernel(o.uv,{boxes:u,scores:l},d)}});var Er=n(3036);const _r=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY;const s=(0,i._1)(e,"boxes","nonMaxSuppressionAsync"),o=(0,i._1)(t,"scores","nonMaxSuppressionAsync"),u=$r(s,o,n,r,a);n=u.maxOutputSize,r=u.iouThreshold,a=u.scoreThreshold;const l=await Promise.all([s.data(),o.data()]),c=l[0],d=l[1],{selectedIndices:p}=(0,Er.GP)(c,d,n,r,a);return s!==e&&s.dispose(),o!==t&&o.dispose(),Ln(p,"int32")};const Rr=(0,u.op)({nonMaxSuppressionWithScore_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const l=(0,i._1)(e,"boxes","nonMaxSuppression"),c=(0,i._1)(t,"scores","nonMaxSuppression"),d=$r(l,c,n,r,a,u);n=d.maxOutputSize,r=d.iouThreshold,a=d.scoreThreshold,u=d.softNmsSigma;const p={boxes:l,scores:c},h={maxOutputSize:n,iouThreshold:r,scoreThreshold:a,softNmsSigma:u},f=s.BV.runKernel(o.W0,p,h);return{selectedIndices:f[0],selectedScores:f[1]}}});const Ar=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,s=arguments.length>5&&void 0!==arguments[5]?arguments[5]:0;const o=(0,i._1)(e,"boxes","nonMaxSuppressionAsync"),u=(0,i._1)(t,"scores","nonMaxSuppressionAsync"),l=$r(o,u,n,r,a,s);n=l.maxOutputSize,r=l.iouThreshold,a=l.scoreThreshold,s=l.softNmsSigma;const c=await Promise.all([o.data(),u.data()]),d=c[0],p=c[1],{selectedIndices:h,selectedScores:f}=(0,Er.pA)(d,p,n,r,a,s);return o!==e&&o.dispose(),u!==t&&u.dispose(),{selectedIndices:Ln(h,"int32"),selectedScores:Ln(f)}};const Or=(0,u.op)({nonMaxSuppressionPadded_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,u=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const l=(0,i._1)(e,"boxes","nonMaxSuppression"),c=(0,i._1)(t,"scores","nonMaxSuppression"),d=$r(l,c,n,r,a,null),p=d.maxOutputSize,h=d.iouThreshold,f=d.scoreThreshold,m={boxes:l,scores:c},g={maxOutputSize:p,iouThreshold:h,scoreThreshold:f,padToMaxOutputSize:u},y=s.BV.runKernel(o.cy,m,g);return{selectedIndices:y[0],validOutputs:y[1]}}});const Dr=async function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Number.NEGATIVE_INFINITY,s=arguments.length>5&&void 0!==arguments[5]&&arguments[5];const o=(0,i._1)(e,"boxes","nonMaxSuppressionAsync"),u=(0,i._1)(t,"scores","nonMaxSuppressionAsync"),l=$r(o,u,n,r,a,null),c=l.maxOutputSize,d=l.iouThreshold,p=l.scoreThreshold,[h,f]=await Promise.all([o.data(),u.data()]),{selectedIndices:m,validOutputs:g}=(0,Er.qP)(h,f,c,d,p,s);return o!==e&&o.dispose(),u!==t&&u.dispose(),{selectedIndices:Ln(m,"int32"),validOutputs:(0,Ee.i)(g,"int32")}};const Fr=(0,u.op)({resizeBilinear_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=(0,i._1)(e,"images","resizeBilinear");p.hu(3===a.rank||4===a.rank,(()=>`Error in resizeBilinear: x must be rank 3 or 4, but got rank ${a.rank}.`)),p.hu(2===t.length,(()=>`Error in resizeBilinear: new shape must 2D, but got shape ${t}.`)),p.hu(!1===r||!1===n,(()=>"Error in resizeBilinear: If halfPixelCenters is true, alignCorners must be false."));let u=a,l=!1;3===a.rank&&(l=!0,u=(0,I.X)(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,c={images:u},d={alignCorners:n,halfPixelCenters:r,size:t},h=s.BV.runKernel(o._Y,c,d);return l?(0,I.X)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});const Br=(0,u.op)({resizeNearestNeighbor_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=(0,i._1)(e,"images","resizeNearestNeighbor");p.hu(3===a.rank||4===a.rank,(()=>`Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank ${a.rank}.`)),p.hu(2===t.length,(()=>`Error in resizeNearestNeighbor: new shape must 2D, but got shape ${t}.`)),p.hu("float32"===a.dtype||"int32"===a.dtype,(()=>"`images` must have `int32` or `float32` as dtype")),p.hu(!1===r||!1===n,(()=>"Error in resizeNearestNeighbor: If halfPixelCenters is true, alignCorners must be false."));let u=a,l=!1;3===a.rank&&(l=!0,u=(0,I.X)(a,[1,a.shape[0],a.shape[1],a.shape[2]]));const[]=t,c={images:u},d={alignCorners:n,halfPixelCenters:r,size:t},h=s.BV.runKernel(o.dp,c,d);return l?(0,I.X)(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});function Mr(e,t){let n,r,a,s,o,i,u=Ln([-1]),l=Ln([0]),c=Ln([0]);for(let p=0;p<e.size-1;p++){n=D(e,0,p+1),r=D(e,p+1),o=(0,me.h)((0,Ae.S)(n),t),i=(0,me.h)((0,Ae.S)(r),t);const h=(0,Ae.S)((0,A.d)(n,nn(0,n.size)));a=(0,me.h)(h,(0,Ae.S)(n));const f=(0,ze.h)(r.shape,n.size),m=(0,d.I)(nn(0,r.size),f),g=(0,A.d)(r,m);s=(0,me.h)((0,Ae.S)(g),(0,Ae.S)(r));const y=(0,ut.l)(a,s),x=(0,ut.l)(a,s),b=(0,A.d)(o,i);c=(0,A.d)((0,A.d)(b,y),x);const v=He(c,l);l=xe(v,c,l),u=xe(v,Ln([p]),u)}return u}const Pr=(0,u.op)({threshold_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"binary",n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:.5;const a=(0,i._1)(e,"image","threshold"),s=.2989,o=.587,u=.114,l=a.shape[0]*a.shape[1];let c,h,f,m,g=(0,A.d)(Ln([r]),255);if(p.hu(3===a.rank,(()=>`Error in threshold: image must be rank 3,but got rank ${a.rank}.`)),p.hu(3===a.shape[2]||1===a.shape[2],(()=>`Error in threshold: image color channel must be equal to 3 or 1but got ${a.shape[2]}.`)),p.hu("int32"===a.dtype||"float32"===a.dtype,(()=>`Error in dtype: image dtype must be int32 or float32,but got dtype ${a.dtype}.`)),p.hu("otsu"===t||"binary"===t,(()=>`Method must be binary or otsu, but was ${t}`)),3===a.shape[2]){[c,h,f]=En(a,[1,1,1],-1);const e=(0,A.d)(c,s),t=(0,A.d)(h,o),n=(0,A.d)(f,u);m=(0,d.I)((0,d.I)(e,t),n)}else m=e;if("otsu"===t){g=Mr(U((0,N.p)(hn(m),"int32"),(0,Mn.X)([]),256),l)}const y=n?Je(m,g):He(m,g),x=(0,N.p)((0,A.d)(y,255),"int32");return x}});const Lr=(0,u.op)({transform_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"nearest",r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"constant",a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,u=arguments.length>5?arguments[5]:void 0;const l=(0,i._1)(e,"image","transform","float32"),c=(0,i._1)(t,"transforms","transform","float32");p.hu(4===l.rank,(()=>`Error in transform: image must be rank 4,but got rank ${l.rank}.`)),p.hu(2===c.rank&&(c.shape[0]===l.shape[0]||1===c.shape[0])&&8===c.shape[1],(()=>"Error in transform: Input transform should be batch x 8 or 1 x 8")),p.hu(null==u||2===u.length,(()=>`Error in transform: outputShape must be [height, width] or null, but got ${u}.`));const d={image:l,transforms:c},h={interpolation:n,fillMode:r,fillValue:a,outputShape:u};return s.BV.runKernel(o.wx,d,h)}});const Vr=(0,u.op)({bandPart_:function(e,t,n){(0,p.hu)(t%1===0,(()=>`bandPart(): numLower must be an integer, got ${t}.`)),(0,p.hu)(n%1===0,(()=>`bandPart(): numUpper must be an integer, got ${n}.`));const r=(0,i._1)(e,"a","bandPart");(0,p.hu)(r.rank>=2,(()=>`bandPart(): Rank must be at least 2, got ${r.rank}.`));const a=r.shape,[s,o]=r.shape.slice(-2);if(!(t<=s))throw new Error(`bandPart(): numLower (${t}) must not be greater than the number of rows (${s}).`);if(!(n<=o))throw new Error(`bandPart(): numUpper (${n}) must not be greater than the number of columns (${o}).`);t<0&&(t=s),n<0&&(n=o);const u=(0,I.X)(nn(0,s,1,"int32"),[-1,1]),l=nn(0,o,1,"int32"),c=(0,ut.l)(u,l),d=dt(Je(c,(0,Ee.i)(+t,"int32")),qe(c,(0,Ee.i)(-n,"int32"))),h=St([s,o],r.dtype);return(0,I.X)(On(jn((0,I.X)(r,[-1,s,o])).map((e=>xe(d,e,h)))),a)}});const zr=(0,u.op)({gramSchmidt_:function(e){let t;if(Array.isArray(e)){t=!1,(0,p.hu)(null!=e&&e.length>0,(()=>"Gram-Schmidt process: input must not be null, undefined, or empty"));const n=e[0].shape[0];for(let t=1;t<e.length;++t)(0,p.hu)(e[t].shape[0]===n,(()=>`Gram-Schmidt: Non-unique lengths found in the input vectors: (${e[t].shape[0]} vs. ${n})`))}else t=!0,e=En(e,e.shape[0],0).map((e=>An(e,[0])));(0,p.hu)(e.length<=e[0].shape[0],(()=>`Gram-Schmidt: Number of vectors (${e.length}) exceeds number of dimensions (${e[0].shape[0]}).`));const n=[],r=e;for(let a=0;a<e.length;++a)n.push(s.BV.tidy((()=>{let e=r[a];if(a>0)for(let t=0;t<a;++t){const r=(0,A.d)((0,Ae.S)((0,A.d)(n[t],e)),n[t]);e=(0,ut.l)(e,r)}return(0,me.h)(e,De(e,"euclidean"))})));return t?On(n,0):n}});var Ur=n(5087);function Wr(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return s.BV.tidy((()=>{(0,p.hu)(2===e.shape.length,(()=>`qr2d() requires a 2D Tensor, but got a ${e.shape.length}D Tensor.`));const n=e.shape[0],r=e.shape[1];let a=Ve(n),o=(0,E.d)(e);const i=Vn([[1]],[1,1]);let u=(0,E.d)(i);const l=n>=r?r:n;for(let e=0;e<l;++e){const t=o,l=u,c=a;[u,o,a]=s.BV.tidy((()=>{const t=D(o,[e,e],[n-e,1]),s=De(t),l=D(o,[e,e],[1,1]),c=xe(He(l,0),Vn([[-1]]),Vn([[1]])),d=(0,ut.l)(l,(0,A.d)(c,s)),p=(0,me.h)(t,d);u=1===p.shape[0]?(0,E.d)(i):_([i,D(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);const h=(0,st.W)((0,me.h)((0,R.O)(c,d),s)),f=D(o,[e,0],[n-e,r]),m=(0,A.d)(h,u),g=(0,tr.p)(u);if(0===e)o=(0,ut.l)(f,(0,R.O)(m,(0,R.O)(g,f)));else{const t=(0,ut.l)(f,(0,R.O)(m,(0,R.O)(g,f)));o=_([D(o,[0,0],[e,r]),t],0)}const y=(0,tr.p)(m),x=D(a,[0,e],[n,a.shape[1]-e]);if(0===e)a=(0,ut.l)(x,(0,R.O)((0,R.O)(x,u),y));else{const t=(0,ut.l)(x,(0,R.O)((0,R.O)(x,u),y));a=_([D(a,[0,0],[n,e]),t],1)}return[u,o,a]})),(0,Ur.B9)([t,l,c])}return!t&&n>r&&(a=D(a,[0,0],[n,r]),o=D(o,[0,0],[r,r])),[a,o]}))}const Gr=(0,u.op)({qr_:function(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];if((0,p.hu)(e.rank>=2,(()=>`qr() requires input tensor to have a rank >= 2, but got rank ${e.rank}`)),2===e.rank)return Wr(e,t);{const n=e.shape.slice(0,e.shape.length-2).reduce(((e,t)=>e*t)),r=jn((0,I.X)(e,[n,e.shape[e.shape.length-2],e.shape[e.shape.length-1]]),0),a=[],s=[];r.forEach((e=>{const[n,r]=Wr(e,t);a.push(n),s.push(r)}));return[(0,I.X)(On(a,0),e.shape),(0,I.X)(On(s,0),e.shape)]}}});var Hr=n(9397);const qr=(0,u.op)({computeWeightedLoss_:function(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:Hr.I.SUM_BY_NONZERO_WEIGHTS;const r=(0,i._1)(e,"losses","computeWeightedLoss");let a=null;null!=t&&(a=(0,i._1)(t,"weights","computeWeightedLoss"));const s=null==a?r:(0,A.d)(r,a);if(n===Hr.I.NONE)return s;if(n===Hr.I.SUM)return(0,Ae.S)(s);if(n===Hr.I.MEAN){if(null==a)return kt(s);{const e=r.size/a.size,t=(0,me.h)((0,Ae.S)(s),(0,Ae.S)(a));return e>1?(0,me.h)(t,(0,Ee.i)(e)):t}}if(n===Hr.I.SUM_BY_NONZERO_WEIGHTS){if(null==a)return(0,me.h)((0,Ae.S)(s),(0,Ee.i)(r.size));{const e=(0,A.d)(a,Nt(r.shape)),t=(0,N.p)((0,Ae.S)(Ot(e,(0,Ee.i)(0))),"float32");return(0,me.h)((0,Ae.S)(s),t)}}throw Error(`Unknown reduction: ${n}`)}});const Xr=(0,u.op)({absoluteDifference_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Hr.I.SUM_BY_NONZERO_WEIGHTS;const s=(0,i._1)(e,"labels","absoluteDifference"),o=(0,i._1)(t,"predictions","absoluteDifference");let u=null;null!=n&&(u=(0,i._1)(n,"weights","absoluteDifference")),(0,p.k5)(s.shape,o.shape,"Error in absoluteDifference: ");const l=(0,a.W)((0,ut.l)(s,o));return qr(l,u,r)}});const Kr=(0,u.op)({cosineDistance_:function(e,t,n,r){let a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Hr.I.SUM_BY_NONZERO_WEIGHTS;const s=(0,i._1)(e,"labels","cosineDistance"),o=(0,i._1)(t,"predictions","cosineDistance");let u=null;null!=r&&(u=(0,i._1)(r,"weights","cosineDistance")),(0,p.k5)(s.shape,o.shape,"Error in cosineDistance: ");const l=(0,Ee.i)(1),c=(0,ut.l)(l,(0,Ae.S)((0,A.d)(s,o),n,!0));return qr(c,u,a)}});const jr=(0,u.op)({hingeLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Hr.I.SUM_BY_NONZERO_WEIGHTS,a=(0,i._1)(e,"labels","hingeLoss");const s=(0,i._1)(t,"predictions","hingeLoss");let o=null;null!=n&&(o=(0,i._1)(n,"weights","hingeLoss")),(0,p.k5)(a.shape,s.shape,"Error in hingeLoss: ");const u=(0,Ee.i)(1);a=(0,ut.l)((0,A.d)((0,Ee.i)(2),a),u);const l=(0,sn.U)((0,ut.l)(u,(0,A.d)(a,s)));return qr(l,o,r)}});const Yr=(0,u.op)({huberLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Hr.I.SUM_BY_NONZERO_WEIGHTS;const o=(0,i._1)(e,"labels","huberLoss"),u=(0,i._1)(t,"predictions","huberLoss");let l=null;null!=n&&(l=(0,i._1)(n,"weights","huberLoss")),(0,p.k5)(o.shape,u.shape,"Error in huberLoss: ");const c=(0,Ee.i)(r),h=(0,a.W)((0,ut.l)(u,o)),f=$t(h,c),m=(0,ut.l)(h,f),g=(0,d.I)((0,A.d)((0,Ee.i)(.5),(0,Re.h)(f)),(0,A.d)(c,m));return qr(g,l,s)}});const Qr=(0,u.op)({logLoss_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1e-7,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Hr.I.SUM_BY_NONZERO_WEIGHTS;const s=(0,i._1)(e,"labels","logLoss"),o=(0,i._1)(t,"predictions","logLoss");let u=null;null!=n&&(u=(0,i._1)(n,"weights","logLoss")),(0,p.k5)(s.shape,o.shape,"Error in logLoss: ");const l=(0,Ee.i)(1),c=(0,Ee.i)(r),h=(0,st.W)((0,A.d)(s,nt((0,d.I)(o,c)))),f=(0,A.d)((0,ut.l)(l,s),nt((0,d.I)((0,ut.l)(l,o),c))),m=(0,ut.l)(h,f);return qr(m,u,a)}});const Zr=(0,u.op)({meanSquaredError_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:Hr.I.SUM_BY_NONZERO_WEIGHTS;const a=(0,i._1)(e,"labels","meanSquaredError"),s=(0,i._1)(t,"predictions","meanSquaredError");let o=null;null!=n&&(o=(0,i._1)(n,"weights","meanSquaredError")),(0,p.k5)(a.shape,s.shape,"Error in meanSquaredError: ");const u=Rn(a,s);return qr(u,o,r)}});function Jr(e,t){const n=(0,i._1)(e,"labels","sigmoidCrossEntropyWithLogits"),r=(0,i._1)(t,"logits","sigmoidCrossEntropyWithLogits");(0,p.k5)(n.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");const s=(0,sn.U)(r),o=(0,A.d)(r,n),u=rt(Be((0,st.W)((0,a.W)(r))));return(0,d.I)((0,ut.l)(s,o),u)}const ea=(0,u.op)({sigmoidCrossEntropy_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Hr.I.SUM_BY_NONZERO_WEIGHTS,s=(0,i._1)(e,"multiClassLabels","sigmoidCrossEntropy");const o=(0,i._1)(t,"logits","sigmoidCrossEntropy");let u=null;if(null!=n&&(u=(0,i._1)(n,"weights","sigmoidCrossEntropy")),(0,p.k5)(s.shape,o.shape,"Error in sigmoidCrossEntropy: "),r>0){const e=(0,Ee.i)(r),t=(0,Ee.i)(1),n=(0,Ee.i)(.5);s=(0,d.I)((0,A.d)(s,(0,ut.l)(t,e)),(0,A.d)(n,e))}const l=Jr(s,o);return qr(l,u,a)}});function ta(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:-1;if(-1===n&&(n=t.rank-1),n!==t.rank-1)throw Error(`Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank ${t.rank} and dim was ${n}`);const r=(0,at.cb)(((e,t,r)=>{const a=ct(t,[n],!0),s=(0,ut.l)((0,N.p)(t,"float32"),a);r([e,s]);const o=(0,st.W)((0,A.d)(s,e));return{value:(0,Ae.S)(o,[n]),gradFunc:(e,t)=>{const[r,a]=t,s=(0,Te.rv)(e.shape,[n]);return[(0,A.d)((0,I.X)(e,s),(0,ut.l)((0,N.p)(r,"float32"),Be(a))),(0,A.d)((0,I.X)(e,s),(0,ut.l)(Be(a),(0,N.p)(r,"float32")))]}}}));return r(e,t)}const na=(0,u.op)({softmaxCrossEntropy_:function(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:Hr.I.SUM_BY_NONZERO_WEIGHTS,s=(0,i._1)(e,"onehotLabels","softmaxCrossEntropy");const o=(0,i._1)(t,"logits","softmaxCrossEntropy");let u=null;if(null!=n&&(u=(0,i._1)(n,"weights","softmaxCrossEntropy")),(0,p.k5)(s.shape,o.shape,"Error in softmaxCrossEntropy: "),r>0){const e=(0,Ee.i)(r),t=(0,Ee.i)(1),n=(0,Ee.i)(s.shape[1]);s=(0,d.I)((0,A.d)(s,(0,ut.l)(t,e)),(0,me.h)(e,n))}const l=ta(s,o);return qr(l,u,a)}});const ra=(0,u.op)({sparseFillEmptyRows_:function(e,t,n,r){const a=(0,i._1)(e,"indices","sparseFillEmptyRows","int32"),u=(0,i._1)(t,"values","sparseFillEmptyRows"),l=(0,i._1)(n,"denseShape","sparseFillEmptyRows","int32"),c=(0,i._1)(r,"defaultValue","sparseFillEmptyRows",u.dtype);if(2!==a.rank)throw new Error(`Indices should be Tensor2D but received shape\n        ${a.shape}`);if(1!==u.rank)throw new Error(`Values should be Tensor1D but received shape ${u.shape}`);if(1!==l.rank)throw new Error(`Dense shape should be Tensor1D but received shape ${l.shape}`);if(0!==c.rank)throw new Error(`Default value should be a scalar but received shape ${c.shape}`);const d={indices:a,values:u,denseShape:l,defaultValue:c},p=s.BV.runKernel(o.O3,d);return{outputIndices:p[0],outputValues:p[1],emptyRowIndicator:p[2],reverseIndexMap:p[3]}}});const aa=(0,u.op)({sparseReshape_:function(e,t,n){const r=(0,i._1)(e,"inputIndices","sparseReshape","int32"),a=(0,i._1)(t,"inputShape","sparseReshape","int32"),u=(0,i._1)(n,"newShape","sparseReshape","int32");if(2!==r.rank)throw new Error(`Input indices should be Tensor2D but received shape\n        ${r.shape}`);if(1!==a.rank)throw new Error(`Input shape should be Tensor1D but received shape ${a.shape}`);if(1!==u.rank)throw new Error(`New shape should be Tensor1D but received shape ${u.shape}`);const l={inputIndices:r,inputShape:a,newShape:u},c=s.BV.runKernel(o.nh,l);return{outputIndices:c[0],outputShape:c[1]}}});const sa=(0,u.op)({sparseSegmentMean_:function(e,t,n){const r=(0,i._1)(e,"data","sparseSegmentMean"),a=(0,i._1)(t,"indices","sparseSegmentMean","int32"),u=(0,i._1)(n,"segmentIds","sparseSegmentMean","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n          ${a.shape}`);if(1!==u.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n          ${u.shape}`);const l={data:r,indices:a,segmentIds:u};return s.BV.runKernel(o.YW,l)}});const oa=(0,u.op)({sparseSegmentSum_:function(e,t,n){const r=(0,i._1)(e,"data","sparseSegmentSum"),a=(0,i._1)(t,"indices","sparseSegmentSum","int32"),u=(0,i._1)(n,"segmentIds","sparseSegmentSum","int32");if(r.rank<1)throw new Error("Data should be at least 1 dimensional but received scalar");if(1!==a.rank)throw new Error(`Indices should be Tensor1D but received shape\n         ${a.shape}`);if(1!==u.rank)throw new Error(`Segment ids should be Tensor1D but received shape\n         ${u.shape}`);const l={data:r,indices:a,segmentIds:u};return s.BV.runKernel(o.Zj,l)}});const ia=(0,u.op)({stringNGrams_:function(e,t,n,r,a,u,l,c){const d=(0,i._1)(e,"data","stringNGrams","string");if("string"!==d.dtype)throw new Error("Data must be of datatype string");if(1!==d.shape.length)throw new Error(`Data must be a vector, saw: ${d.shape}`);const p=(0,i._1)(t,"dataSplits","stringNGrams");if("int32"!==p.dtype)throw new Error("Data splits must be of datatype int32");const h={separator:n,nGramWidths:r,leftPad:a,rightPad:u,padWidth:l,preserveShortSequences:c},f={data:d,dataSplits:p},m=s.BV.runKernel(o._J,f,h);return{nGrams:m[0],nGramsSplits:m[1]}}});const ua=(0,u.op)({stringSplit_:function(e,t){let n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2];const r=(0,i._1)(e,"input","stringSplit","string"),a=(0,i._1)(t,"delimiter","stringSplit","string");if(1!==r.rank)throw new Error(`Input should be Tensor1D but received shape ${r.shape}`);if(0!==a.rank)throw new Error(`Delimiter should be a scalar but received shape ${a.shape}`);const u={skipEmpty:n},l={input:r,delimiter:a},c=s.BV.runKernel(o.s1,l,u);return{indices:c[0],values:c[1],shape:c[2]}}});const la=(0,u.op)({stringToHashBucketFast_:function(e,t){const n=(0,i._1)(e,"input","stringToHashBucketFast","string"),r={numBuckets:t};if(t<=0)throw new Error("Number of buckets must be at least 1");const a={input:n};return s.BV.runKernel(o.Xk,a,r)}}),ca={fft:In,ifft:$n,rfft:_n,irfft:Cn},da={hammingWindow:br,hannWindow:vr,frame:wr,stft:kr},pa={flipLeftRight:Nr,grayscaleToRGB:Tr,resizeNearestNeighbor:Br,resizeBilinear:Fr,rotateWithOffset:Ir,cropAndResize:Sr,nonMaxSuppression:Cr,nonMaxSuppressionAsync:_r,nonMaxSuppressionWithScore:Rr,nonMaxSuppressionWithScoreAsync:Ar,nonMaxSuppressionPadded:Or,nonMaxSuppressionPaddedAsync:Dr,threshold:Pr,transform:Lr},ha={bandPart:Vr,gramSchmidt:zr,qr:Gr},fa={absoluteDifference:Xr,computeWeightedLoss:qr,cosineDistance:Kr,hingeLoss:jr,huberLoss:Yr,logLoss:Qr,meanSquaredError:Zr,sigmoidCrossEntropy:ea,softmaxCrossEntropy:na},ma={sparseFillEmptyRows:ra,sparseReshape:aa,sparseSegmentMean:sa,sparseSegmentSum:oa},ga={stringNGrams:ia,stringSplit:ua,stringToHashBucketFast:la}},7121:(e,t,n)=>{"use strict";n.d(t,{s:()=>i});var r=n(16),a=n(8994),s=n(9337),o=n(3994);const i=(0,n(4894).op)({pow_:function(e,t){let n=(0,o._1)(e,"base","pow"),i=(0,o._1)(t,"exp","pow");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.pe,u)}})},8650:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({prelu_:function(e,t){const n={x:(0,s._1)(e,"x","prelu"),alpha:(0,s._1)(t,"alpha","prelu")};return r.BV.runKernel(a.o0,n)}})},4502:(e,t,n)=>{"use strict";function r(e){let t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];console.log(e.toString(t))}n.d(t,{S:()=>r})},286:(e,t,n)=>{"use strict";n.d(t,{k:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({real_:function(e){const t={input:(0,s._1)(e,"input","real")};return r.BV.runKernel(a.xJ,t)}})},970:(e,t,n)=>{"use strict";n.d(t,{U:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({relu_:function(e){const t={x:(0,s._1)(e,"x","relu")};return r.BV.runKernel(a.qk,t)}})},7680:(e,t,n)=>{"use strict";n.d(t,{b:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({relu6_:function(e){const t={x:(0,s._1)(e,"x","relu6")};return r.BV.runKernel(a.Sb,t)}})},8551:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({reshape_:function(e,t){const n={x:(0,s._1)(e,"x","reshape","string_or_numeric")},o={shape:t};return r.BV.runKernel(a.HZ,n,o)}})},1480:(e,t,n)=>{"use strict";n.d(t,{i:()=>s});var r=n(7258),a=n(3258);function s(e,t){if(((0,r.fU)(e)&&"string"!==t||Array.isArray(e))&&"complex64"!==t)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===t&&(0,r.fU)(e)&&!(e instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return(0,a.H)(e,[],[],t)}},8257:(e,t,n)=>{"use strict";n.r(t),n.d(t,{calculateShapes:()=>o,validateInput:()=>s,validateUpdateShape:()=>a});var r=n(7258);function a(e,t,n){const r=t.rank>1?t.shape[t.rank-1]:1,a=t.rank>1?t.rank-1:1,s=`Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: ${n.shape}, indices.shape: ${t.shape}, shape: ${e}, sliceDim: ${r}, and batchDim: ${a}.`;if(n.rank<a)throw new Error(s+` update.rank < ${a}. `);if(e.length<r+(n.rank-a))throw new Error(s+` Output shape length < ${r+(n.rank-a)}`);if(n.rank!==a+e.length-r)throw new Error(s+" update.rank != "+(a+e.length-r));for(let o=0;o<a;++o)if(n.shape[o]!==t.shape[o])throw new Error(s+` updates.shape[${o}] (${n.shape[o]}) != indices.shape[${o}] (${t.shape[o]}).`);for(let o=0;o<n.rank-a;++o)if(n.shape[o+a]!==e[o+r])throw new Error(s+` updates.shape[${o+a}] (${n.shape[o+a]}) != shape[${o+a}] (${e[o+a]})`)}function s(e,t,n){if(t.rank<1)throw new Error(`tf.scatterND() expects the indices to be rank 1 or higher, but the rank was ${t.rank}.`);if(e.rank<1)throw new Error(`tf.scatterND() expects the updates to be rank 1 or higher, but the rank was ${e.rank}.`);if("int32"!==t.dtype)throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${t.dtype}`);if(n.length<1)throw new Error(`Output rank must be greater or equal to 1, but got shape: ${n}`);if(0===n.length){if(0===t.size)throw new Error(`Indices specified for empty output. indices shape: ${t.shape}`);if(0===e.size)throw new Error(`Updates specified for empty output. updates shape: ${e.shape}`)}a(n,t,e)}function o(e,t,n){const a=t.shape.length,s=a>1?t.shape[a-1]:1,o=n.length;let i=1;for(let r=s;r<o;++r)i*=n[r];const u=s<1?1:s;return{sliceRank:s,numUpdates:(0,r.NA)(t.shape)/u,sliceSize:i,strides:[...(0,r.e3)(n.slice(0,s)),1],outputSize:(0,r.NA)(n)}}},8954:(e,t,n)=>{"use strict";n.d(t,{X:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({sigmoid_:function(e){const t={x:(0,s._1)(e,"x","sigmoid","float32")};return r.BV.runKernel(a.a5,t)}})},2759:(e,t,n)=>{"use strict";n.d(t,{_:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({sqrt_:function(e){const t={x:(0,s._1)(e,"x","sqrt","float32")};return r.BV.runKernel(a.FK,t)}})},5191:(e,t,n)=>{"use strict";n.d(t,{h:()=>s});var r=n(16),a=n(3994);const s=(0,n(4894).op)({square_:function(e){const t=(0,a._1)(e,"x","square");return r.BV.runKernel("Square",{x:t},{})}})},1448:(e,t,n)=>{"use strict";n.d(t,{N:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({step_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0;const n=(0,s._1)(e,"x","step"),o={x:n},i={alpha:t};return r.BV.runKernel(a.h8,o,i)}})},2454:(e,t,n)=>{"use strict";n.d(t,{l:()=>i});var r=n(16),a=n(8994),s=n(9337),o=n(3994);const i=(0,n(4894).op)({sub_:function(e,t){let n=(0,o._1)(e,"a","sub"),i=(0,o._1)(t,"b","sub");[n,i]=(0,s.makeTypesMatch)(n,i);const u={a:n,b:i};return r.BV.runKernel(a.Tr,u)}})},3619:(e,t,n)=>{"use strict";n.d(t,{S:()=>i});var r=n(16),a=n(8994),s=n(3994),o=n(8857);const i=(0,n(4894).op)({sum_:function(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=(0,s._1)(e,"x","sum");"bool"===i.dtype&&(i=(0,o.p)(i,"int32"));const u={x:i},l={axis:t,keepDims:n};return r.BV.runKernel(a.GB,u,l)}})},1150:(e,t,n)=>{"use strict";n.d(t,{X:()=>s});var r=n(3994),a=n(3258);function s(e,t,n){const s=(0,r.C)(e,n);return(0,a.H)(e,t,s,n)}},8970:(e,t,n)=>{"use strict";n.d(t,{w:()=>o});var r=n(3994),a=n(7258),s=n(3258);function o(e,t,n){if((0,a.Cq)(e),null!=t&&3!==t.length)throw new Error("tensor3d() requires shape to have three numbers");const o=(0,r.C)(e,n);if(3!==o.length&&1!==o.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===o.length&&null==t)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,s.H)(e,t,o,n)}},3258:(e,t,n)=>{"use strict";n.d(t,{H:()=>o});var r=n(16),a=n(7258),s=n(7240);function o(e,t,n,o){if(null==o&&(o=(0,a.D2)(e)),"complex64"===o)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!(0,a.fU)(e)&&!Array.isArray(e)&&"number"!==typeof e&&"boolean"!==typeof e&&"string"!==typeof e)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=t){(0,a.Mu)(t);const e=(0,a.NA)(t),r=(0,a.NA)(n);(0,a.hu)(e===r,(()=>`Based on the provided shape, [${t}], the tensor should have ${e} values but has ${r}`));for(let s=0;s<n.length;++s){const e=n[s],r=s!==n.length-1||e!==(0,a.NA)(t.slice(s));(0,a.hu)(n[s]===t[s]||!r,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${t}). `))}}return(0,a.fU)(e)||Array.isArray(e)||(e=[e]),t=t||n,e="string"!==o?(0,s.toTypedArray)(e,o):(0,a.xH)(e,[],!0),r.BV.makeTensor(e,t,o)}},9529:(e,t,n)=>{"use strict";n.d(t,{p:()=>h});var r=n(16),a=n(5087),s=n(8994),o=n(3994),i=n(7258),u=n(2195),l=n(2176),c=n(1587),d=n(4894),p=n(286);const h=(0,d.op)({transpose_:function(e,t,n){const d=(0,o._1)(e,"x","transpose");if(null==t&&(t=d.shape.map(((e,t)=>t)).reverse()),i.hu(d.rank===t.length,(()=>`Error in transpose: rank of input ${d.rank} must match length of perm ${t}.`)),t.forEach((e=>{i.hu(e>=0&&e<d.rank,(()=>"All entries in 'perm' must be between 0 and "+(d.rank-1)+` but got ${t}`))})),d.rank<=1)return d.clone();const h={x:d},f={perm:t};return"complex64"===d.dtype?(0,a.lu)((()=>{let e=(0,p.k)(d),t=(0,l.a)(d);return e=r.BV.runKernel(s.G3,{x:e},f),t=r.BV.runKernel(s.G3,{x:t},f),n&&(t=(0,c.W)(t)),(0,u.P)(e,t)})):r.BV.runKernel(s.G3,h,f)}})},5552:(e,t,n)=>{"use strict";n.d(t,{P:()=>o});var r=n(16),a=n(8994),s=n(3994);const o=(0,n(4894).op)({zerosLike_:function(e){const t={x:(0,s._1)(e,"x","zerosLike")};return r.BV.runKernel(a.Ru,t)}})},5426:(e,t,n)=>{"use strict";n.d(t,{es:()=>x,YD:()=>d,_w:()=>b,FZ:()=>y,Vp:()=>g,Vi:()=>m});var r=n(1903),a=n(7258);function s(e,t,n,r){const s=(0,a.e3)(t),i=function(e,t,n,r){const s=(0,a.NA)(t),i=r[r.length-1],u=new Array(i).fill(0),c=t.length,d="complex64"===n?l(e):e;if(c>1)for(let a=0;a<s/i;a++){const e=a*i;for(let t=0;t<i;t++)u[t]=Math.max(u[t],o(d[e+t],0,n).length)}return u}(e,t,n,s),c=t.length,d=u(e,t,n,s,i),p=["Tensor"];return r&&(p.push(`  dtype: ${n}`),p.push(`  rank: ${c}`),p.push(`  shape: [${t}]`),p.push("  values:")),p.push(d.map((e=>"    "+e)).join("\n")),p.join("\n")}function o(e,t,n){let r;return r=Array.isArray(e)?`${parseFloat(e[0].toFixed(7))} + ${parseFloat(e[1].toFixed(7))}j`:(0,a.HD)(e)?`'${e}'`:"bool"===n?i(e):parseFloat(e.toFixed(7)).toString(),(0,a.oj)(r,t)}function i(e){return 0===e?"false":"true"}function u(e,t,n,r,a){let s=!(arguments.length>5&&void 0!==arguments[5])||arguments[5];const c="complex64"===n?2:1,d=t[0],p=t.length;if(0===p){if("complex64"===n){return[o(l(e)[0],0,n)]}return"bool"===n?[i(e[0])]:[e[0].toString()]}if(1===p){if(d>20){const t=3*c;let r=Array.from(e.slice(0,t)),s=Array.from(e.slice((d-3)*c,d*c));return"complex64"===n&&(r=l(r),s=l(s)),["["+r.map(((e,t)=>o(e,a[t],n))).join(", ")+", ..., "+s.map(((e,t)=>o(e,a[d-3+t],n))).join(", ")+"]"]}return["["+("complex64"===n?l(e):Array.from(e)).map(((e,t)=>o(e,a[t],n))).join(", ")+"]"]}const h=t.slice(1),f=r.slice(1),m=r[0]*c,g=[];if(d>20){for(let t=0;t<3;t++){const r=t*m,s=r+m;g.push(...u(e.slice(r,s),h,n,f,a,!1))}g.push("...");for(let t=d-3;t<d;t++){const r=t*m,s=r+m;g.push(...u(e.slice(r,s),h,n,f,a,t===d-1))}}else for(let o=0;o<d;o++){const t=o*m,r=t+m;g.push(...u(e.slice(t,r),h,n,f,a,o===d-1))}const y=2===p?",":"";g[0]="["+g[0]+y;for(let o=1;o<g.length-1;o++)g[o]=" "+g[o]+y;let x=",\n";for(let o=2;o<p;o++)x+="\n";return g[g.length-1]=" "+g[g.length-1]+"]"+(s?"":x),g}function l(e){const t=[];for(let n=0;n<e.length;n+=2)t.push([e[n],e[n+1]]);return t}var c=n(7240);class d{constructor(e,t,n){if(this.dtype=t,this.shape=e.slice(),this.size=a.NA(e),null!=n){const e=n.length;a.hu(e===this.size,(()=>`Length of values '${e}' does not match the size inferred by the shape '${this.size}'.`))}if("complex64"===t)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=n||a.rQ(t,this.size),this.strides=(0,a.e3)(e)}set(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];0===n.length&&(n=[0]),a.hu(n.length===this.rank,(()=>`The number of provided coordinates (${n.length}) must match the rank (${this.rank})`));const s=this.locToIndex(n);this.values[s]=e}get(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];0===t.length&&(t=[0]);let r=0;for(const s of t){if(s<0||s>=this.shape[r]){const e=`Requested out of range element at ${t}.   Buffer shape=${this.shape}`;throw new Error(e)}r++}let a=t[t.length-1];for(let s=0;s<t.length-1;++s)a+=this.strides[s]*t[s];return this.values[a]}locToIndex(e){if(0===this.rank)return 0;if(1===this.rank)return e[0];let t=e[e.length-1];for(let n=0;n<e.length-1;++n)t+=this.strides[n]*e[n];return t}indexToLoc(e){if(0===this.rank)return[];if(1===this.rank)return[e];const t=new Array(this.shape.length);for(let n=0;n<t.length-1;++n)t[n]=Math.floor(e/this.strides[n]),e-=t[n]*this.strides[n];return t[t.length-1]=e,t}get rank(){return this.shape.length}toTensor(){return p().makeTensor(this.values,this.shape,this.dtype)}}let p=null,h=null,f=null;function m(e){p=e}function g(e){h=e}function y(e){f=e}class x{constructor(e,t,n,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=e.slice(),this.dtype=t||"float32",this.size=a.NA(e),this.strides=(0,a.e3)(e),this.dataId=n,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}get rank(){return this.shape.length}async buffer(){const e=await this.data();return h.buffer(this.shape,this.dtype,e)}bufferSync(){return h.buffer(this.shape,this.dtype,this.dataSync())}async array(){const e=await this.data();return(0,a.GX)(this.shape,e,"complex64"===this.dtype)}arraySync(){return(0,a.GX)(this.shape,this.dataSync(),"complex64"===this.dtype)}async data(){this.throwIfDisposed();const e=p().read(this.dataId);if("string"===this.dtype){const n=await e;try{return n.map((e=>c.decodeString(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}}return e}dataToGPU(e){return this.throwIfDisposed(),p().readToGPU(this.dataId,e)}dataSync(){this.throwIfDisposed();const e=p().readSync(this.dataId);if("string"===this.dtype)try{return e.map((e=>c.decodeString(e)))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return e}async bytes(){this.throwIfDisposed();const e=await p().read(this.dataId);return"string"===this.dtype?e:new Uint8Array(e.buffer)}dispose(){this.isDisposed||(p().disposeTensor(this),this.isDisposedInternal=!0)}get isDisposed(){return this.isDisposedInternal}throwIfDisposed(){if(this.isDisposed)throw new Error("Tensor is disposed.")}print(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return h.print(this,e)}clone(){return this.throwIfDisposed(),h.clone(this)}toString(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return s(this.dataSync(),this.shape,this.dtype,e)}cast(e){return this.throwIfDisposed(),h.cast(this,e)}variable(){let e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=arguments.length>1?arguments[1]:void 0,n=arguments.length>2?arguments[2]:void 0;return this.throwIfDisposed(),p().makeVariable(this,e,t,n)}}Object.defineProperty(x,Symbol.hasInstance,{value:e=>!!e&&null!=e.data&&null!=e.dataSync&&null!=e.throwIfDisposed}),(0,r.R)("Tensor",(()=>x));class b extends x{constructor(e,t,n,r){super(e.shape,e.dtype,e.dataId,r),this.trainable=t,this.name=n}assign(e){if(e.dtype!==this.dtype)throw new Error(`dtype of the new value (${e.dtype}) and previous value (${this.dtype}) must match`);if(!a.cO(e.shape,this.shape))throw new Error(`shape of the new value (${e.shape}) and previous value (${this.shape}) must match`);p().disposeTensor(this),this.dataId=e.dataId,p().incRef(this,null)}dispose(){p().disposeVariable(this),this.isDisposedInternal=!0}}Object.defineProperty(b,Symbol.hasInstance,{value:e=>e instanceof x&&null!=e.assign&&e.assign instanceof Function})},9337:(e,t,n)=>{"use strict";n.r(t),n.d(t,{assertTypesMatch:()=>i,getTensorsInContainer:()=>l,isTensorInList:()=>u,makeTypesMatch:()=>o});var r=n(5426),a=n(6846),s=n(7258);function o(e,t){if(e.dtype===t.dtype)return[e,t];const n=(0,a.x8)(e.dtype,t.dtype);return[e.cast(n),t.cast(n)]}function i(e,t){(0,s.hu)(e.dtype===t.dtype,(()=>`The dtypes of the first(${e.dtype}) and second(${t.dtype}) input must match`))}function u(e,t){return t.some((t=>t.id===e.id))}function l(e){const t=[];return c(e,t,new Set),t}function c(e,t,n){if(null==e)return;if(e instanceof r.es)return void t.push(e);if(a=e,!Array.isArray(a)&&"object"!==typeof a)return;var a;const s=e;for(const r in s){const e=s[r];n.has(e)||(n.add(e),c(e,t,n))}}},3994:(e,t,n)=>{"use strict";n.d(t,{C:()=>u,_1:()=>d,sI:()=>p});var r=n(16),a=n(1283),s=n(5426),o=n(7258),i=n(7240);function u(e,t){let n=e;if((0,o.fU)(e))return"string"===t?[]:[e.length];if(!Array.isArray(e))return[];const r=[];for(;Array.isArray(n)||(0,o.fU)(n)&&"string"!==t;)r.push(n.length),n=n[0];return Array.isArray(e)&&(0,a.OB)().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&l(e,r,[]),r}function l(e,t,n){if(n=n||[],!Array.isArray(e)&&!(0,o.fU)(e))return void(0,o.hu)(0===t.length,(()=>`Element arr[${n.join("][")}] is a primitive, but should be an array/TypedArray of ${t[0]} elements`));(0,o.hu)(t.length>0,(()=>`Element arr[${n.join("][")}] should be a primitive, but is an array of ${e.length} elements`)),(0,o.hu)(e.length===t[0],(()=>`Element arr[${n.join("][")}] should have ${t[0]} elements, but has ${e.length} elements`));const r=t.slice(1);for(let a=0;a<e.length;++a)l(e[a],r,n.concat(a))}function c(e,t,n,r){if("string_or_numeric"!==e){if(null==e)throw new Error("Expected dtype cannot be null.");if("numeric"!==e&&e!==t||"numeric"===e&&"string"===t)throw new Error(`Argument '${n}' passed to '${r}' must be ${e} tensor, but got ${t} tensor`)}}function d(e,t,n){let a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(e instanceof s.es)return c(a,e.dtype,t,n),e;let l=(0,o.D2)(e);if("string"!==l&&["bool","int32","float32"].indexOf(a)>=0&&(l=a),c(a,l,t,n),null==e||!(0,o.fU)(e)&&!Array.isArray(e)&&"number"!==typeof e&&"boolean"!==typeof e&&"string"!==typeof e){const r=null==e?"null":e.constructor.name;throw new Error(`Argument '${t}' passed to '${n}' must be a Tensor or TensorLike, but got '${r}'`)}const d=u(e,l);(0,o.fU)(e)||Array.isArray(e)||(e=[e]);const p=!0,h="string"!==l?(0,i.toTypedArray)(e,l):(0,o.xH)(e,[],p);return r.BV.makeTensor(h,d,l)}function p(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"numeric";if(!Array.isArray(e))throw new Error(`Argument ${t} passed to ${n} must be a \`Tensor[]\` or \`TensorLike[]\``);const a=e;return a.map(((e,a)=>d(e,`${t}[${a}]`,n,r)))}},6846:(e,t,n)=>{"use strict";var r,a,s,o,i;n.d(t,{x8:()=>l,yw:()=>r,z4:()=>c}),function(e){e.R0="R0",e.R1="R1",e.R2="R2",e.R3="R3",e.R4="R4",e.R5="R5",e.R6="R6"}(r||(r={})),function(e){e.float32="float32",e.int32="int32",e.bool="int32",e.complex64="complex64"}(a||(a={})),function(e){e.float32="float32",e.int32="int32",e.bool="bool",e.complex64="complex64"}(s||(s={})),function(e){e.float32="float32",e.int32="float32",e.bool="float32",e.complex64="complex64"}(o||(o={})),function(e){e.float32="complex64",e.int32="complex64",e.bool="complex64",e.complex64="complex64"}(i||(i={}));const u={float32:o,int32:a,bool:s,complex64:i};function l(e,t){if("string"===e||"string"===t){if("string"===e&&"string"===t)return"string";throw new Error(`Can not upcast ${e} with ${t}`)}return u[e][t]}function c(e){return l(e,"int32")}},7240:(e,t,n)=>{"use strict";n.r(t),n.d(t,{arraysEqual:()=>a.cO,assert:()=>a.hu,assertNonNegativeIntegerDimensions:()=>a.Mu,assertNonNull:()=>a.Cq,assertShapesMatch:()=>a.k5,bytesFromStringArray:()=>a.Ub,bytesPerElement:()=>a.bT,checkConversionForErrors:()=>a.D5,clamp:()=>a.uZ,computeStrides:()=>a.e3,createScalarValue:()=>k,createShuffledIndices:()=>a.U$,decodeString:()=>$,distSquared:()=>a.E7,encodeString:()=>I,fetch:()=>T,fingerPrint64:()=>w,flatten:()=>a.xH,getArrayFromDType:()=>a.rQ,getTypedArrayFromDType:()=>a.WP,hasEncodingLoss:()=>a.QB,hexToLong:()=>i,indexToLoc:()=>a.NE,inferDtype:()=>a.D2,inferFromImplicitShape:()=>a.JZ,isBoolean:()=>a.jn,isFunction:()=>a.mf,isInt:()=>a.GN,isNumber:()=>a.hj,isPromise:()=>a.tI,isScalarShape:()=>a.N9,isString:()=>a.HD,isTypedArray:()=>a.fU,isValidDtype:()=>a.LP,locToIndex:()=>a.qy,makeOnesTypedArray:()=>a.p8,makeZerosNestedTypedArray:()=>a.l6,makeZerosTypedArray:()=>a.wT,nearestDivisor:()=>a.jP,nearestLargerEven:()=>a.nY,now:()=>N,parseAxisParam:()=>a.EC,randUniform:()=>a.bj,repeatedTry:()=>a.WD,rightPad:()=>a.oj,shuffle:()=>a.TV,shuffleCombo:()=>a.d7,sizeFromShape:()=>a.NA,sizeToSquarishShape:()=>a.YP,squeezeShape:()=>a.bp,sum:()=>a.Sm,swap:()=>a.LF,tanh:()=>a.AE,toNestedArray:()=>a.GX,toTypedArray:()=>S});var r=n(1283),a=n(7258),s=n(1756);const o=n.n(s)()||s;function i(e){return o.fromString(e,!0,16)}const u=i("c3a5c85c97cb3127"),l=i("b492b66fbe98f273"),c=i("9ae16a3b2f90404f");function d(e){return e.xor(e.shru(47))}function p(e,t,n){const r=e.slice(t,t+n);return o.fromBytes(Array.from(r),!0,!0)}function h(e,t){return p(e,t,8)}function f(e,t){return p(e,t,4)}function m(e,t){return 0===t?e:e.shru(t).or(e.shl(64-t))}function g(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i("9ddfea08eb382d69"),r=e.xor(t).mul(n);r=r.xor(r.shru(47));let a=t.xor(r).mul(n);return a=a.xor(a.shru(47)),a=a.mul(n),a}function y(e,t,n,r){return function(e,t,n,r,a,s){a=a.add(e),s=m(s.add(a).add(r),21);const o=a;return a=(a=a.add(t)).add(n),s=s.add(m(a,44)),[a.add(r),s.add(o)]}(h(e,t),h(e,t+8),h(e,t+16),h(e,t+24),n,r)}function x(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;if(t>=8){const n=c.add(2*t),r=h(e,0).add(c),a=h(e,t-8);return g(m(a,37).mul(n).add(r),m(r,25).add(a).mul(n),n)}if(t>=4){const n=c.add(2*t);return g(f(e,0).shl(3).add(t),f(e,t-4),n)}if(t>0){const n=e[0]+(e[t>>1]<<8),r=t+(e[t-1]<<2);return d(c.mul(n).xor(u.mul(r))).mul(c)}return c}function b(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=c.add(2*t),r=h(e,0).mul(l),a=h(e,8),s=h(e,t-8).mul(n),o=h(e,t-16).mul(c);return g(m(r.add(a),43).add(m(s,30)).add(o),r.add(m(a.add(c),18)).add(s),n)}function v(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=c.add(2*t),r=h(e,0).mul(c),a=h(e,8),s=h(e,t-8).mul(n),o=h(e,t-16).mul(c),i=m(r.add(a),43).add(m(s,30)).add(o),u=g(i,r.add(m(a.add(c),18)).add(s),n),l=h(e,16).mul(n),d=h(e,24),p=i.add(h(e,t-32)).mul(n),f=u.add(h(e,t-24)).mul(n);return g(m(l.add(d),43).add(m(p,30)).add(f),l.add(m(d.add(r),18)).add(p),n)}function w(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e.length;const n=o.fromNumber(81,!0);if(t<=32)return t<=16?x(e,t):b(e,t);if(t<=64)return v(e,t);let r=n,a=n.mul(l).add(113),s=d(a.mul(c).add(113)).mul(c),i=[o.UZERO,o.UZERO],p=[o.UZERO,o.UZERO];r=r.mul(c).add(h(e,0));let f=0;const w=64*(t-1>>6),k=w+(t-1&63)-63;do{r=m(r.add(a).add(i[0]).add(h(e,f+8)),37).mul(l),a=m(a.add(i[1]).add(h(e,f+48)),42).mul(l),r=r.xor(p[1]),a=a.add(i[0]).add(h(e,f+40)),s=m(s.add(p[0]),33).mul(l),i=y(e,f,i[1].mul(l),r.add(p[0])),p=y(e,f+32,s.add(p[1]),a.add(h(e,f+16))),[s,r]=[r,s],f+=64}while(f!==w);const S=l.add(s.and(255).shl(1));return f=k,p[0]=p[0].add(t-1&63),i[0]=i[0].add(p[0]),p[0]=p[0].add(i[0]),r=m(r.add(a).add(i[0]).add(h(e,f+8)),37).mul(S),a=m(a.add(i[1]).add(h(e,f+48)),42).mul(S),r=r.xor(p[1].mul(9)),a=a.add(i[0].mul(9).add(h(e,f+40))),s=m(s.add(p[0]),33).mul(S),i=y(e,f,i[1].mul(S),r.add(p[0])),p=y(e,f+32,s.add(p[1]),a.add(h(e,f+16))),[s,r]=[r,s],g(g(i[0],p[0],S).add(d(a).mul(u)).add(s),g(i[1],p[1],S).add(r),S)}function k(e,t){return"string"===t?I(e):S([e],t)}function S(e,t){if("string"===t)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(e)&&(e=a.xH(e)),(0,r.OB)().getBool("DEBUG")&&a.D5(e,t),function(e,t){return e instanceof Float32Array&&"float32"===t||e instanceof Int32Array&&"int32"===t||e instanceof Uint8Array&&"bool"===t}(e,t))return e;if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t){const t=new Uint8Array(e.length);for(let n=0;n<t.length;++n)0!==Math.round(e[n])&&(t[n]=1);return t}throw new Error(`Unknown data type ${t}`)}function N(){return(0,r.OB)().platform.now()}function T(e,t){return(0,r.OB)().platform.fetch(e,t)}function I(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",(0,r.OB)().platform.encode(e,t)}function $(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"utf-8";return t=t||"utf-8",(0,r.OB)().platform.decode(e,t)}},7258:(e,t,n)=>{"use strict";function r(e){let t=e.length,n=0;for(;t>0;)n=Math.random()*t|0,t--,i(e,t,n)}function a(e,t){if(e.length!==t.length)throw new Error(`Array sizes must match to be shuffled together First array length was ${e.length}Second array length was ${t.length}`);let n=e.length,r=0;for(;n>0;)r=Math.random()*n|0,n--,i(e,n,r),i(t,n,r)}function s(e,t,n){return Math.max(e,Math.min(t,n))}function o(e){return e%2===0?e:e+1}function i(e,t,n){const r=e[t];e[t]=e[n],e[n]=r}function u(e){let t=0;for(let n=0;n<e.length;n++)t+=e[n];return t}function l(e,t){const n=Math.random();return t*n+(1-n)*e}function c(e,t){let n=0;for(let r=0;r<e.length;r++){const a=Number(e[r])-Number(t[r]);n+=a*a}return n}function d(e,t){if(!e)throw new Error("string"===typeof t?t:t())}function p(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";d(y(e,t),(()=>n+` Shapes ${e} and ${t} must match`))}function h(e){d(null!=e,(()=>"The input to the tensor constructor must be a non-null value."))}function f(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(null==t&&(t=[]),Array.isArray(e)||A(e)&&!n)for(let r=0;r<e.length;++r)f(e[r],t,n);else t.push(e);return t}function m(e){if(0===e.length)return 1;let t=e[0];for(let n=1;n<e.length;n++)t*=e[n];return t}function g(e){return 0===e.length}function y(e,t){if(e===t)return!0;if(null==e||null==t)return!1;if(e.length!==t.length)return!1;for(let n=0;n<e.length;n++)if(e[n]!==t[n])return!1;return!0}function x(e){return e%1===0}function b(e){if(null!=Math.tanh)return Math.tanh(e);if(e===1/0)return 1;if(e===-1/0)return-1;{const t=Math.exp(2*e);return(t-1)/(t+1)}}function v(e){const t=Math.ceil(Math.sqrt(e));return[t,Math.ceil(e/t)]}function w(e){const t=new Uint32Array(e);for(let n=0;n<e;++n)t[n]=n;return r(t),t}function k(e,t){return t<=e.length?e:e+" ".repeat(t-e.length)}function S(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:e=>0,n=arguments.length>2?arguments[2]:void 0;return new Promise(((r,a)=>{let s=0;const o=()=>{if(e())return void r();s++;const i=t(s);null!=n&&s>=n?a():setTimeout(o,i)};o()}))}function N(e,t){let n=1,r=-1;for(let s=0;s<e.length;++s)if(e[s]>=0)n*=e[s];else if(-1===e[s]){if(-1!==r)throw Error(`Shapes can only have 1 implicit size. Found -1 at dim ${r} and dim ${s}`);r=s}else if(e[s]<0)throw Error(`Shapes can not be < 0. Found ${e[s]} at dim ${s}`);if(-1===r){if(t>0&&t!==n)throw Error(`Size(${t}) must match the product of shape ${e}`);return e}if(0===n)throw Error(`Cannot infer the missing size in [${e}] when there are 0 elements`);if(t%n!==0)throw Error(`The implicit shape can't be a fractional number. Got ${t} / ${n}`);const a=e.slice();return a[r]=t/n,a}function T(e,t){const n=t.length;return d((e=null==e?t.map(((e,t)=>t)):[].concat(e)).every((e=>e>=-n&&e<n)),(()=>`All values in axis param must be in range [-${n}, ${n}) but got axis ${e}`)),d(e.every((e=>x(e))),(()=>`All values in axis param must be integers but got axis ${e}`)),e.map((e=>e<0?n+e:e))}function I(e,t){const n=[],r=[],a=null!=t&&Array.isArray(t)&&0===t.length,s=null==t||a?null:T(t,e).sort();let o=0;for(let i=0;i<e.length;++i){if(null!=s){if(s[o]===i&&1!==e[i])throw new Error(`Can't squeeze axis ${i} since its dim '${e[i]}' is not 1`);(null==s[o]||s[o]>i)&&1===e[i]&&(n.push(e[i]),r.push(i)),s[o]<=i&&o++}1!==e[i]&&(n.push(e[i]),r.push(i))}return{newShape:n,keptDims:r}}function $(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else{if("bool"!==e)throw new Error(`Unknown data type ${e}`);n=new Uint8Array(t)}return n}function C(e,t){let n=null;if(null==e||"float32"===e)n=new Float32Array(t);else if("int32"===e)n=new Int32Array(t);else if("bool"===e)n=new Uint8Array(t);else{if("string"!==e)throw new Error(`Unknown data type ${e}`);n=new Array(t)}return n}function E(e,t){for(let n=0;n<e.length;n++){const r=e[n];if(isNaN(r)||!isFinite(r))throw Error(`A tensor of type ${t} being uploaded contains ${r}.`)}}function _(e){return"bool"===e||"complex64"===e||"float32"===e||"int32"===e||"string"===e}function R(e,t){return"complex64"!==t&&(("float32"!==t||"complex64"===e)&&(("int32"!==t||"float32"===e||"complex64"===e)&&("bool"!==t||"bool"!==e)))}function A(e){return e instanceof Float32Array||e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray}function O(e){if("float32"===e||"int32"===e)return 4;if("complex64"===e)return 8;if("bool"===e)return 1;throw new Error(`Unknown dtype ${e}`)}function D(e){if(null==e)return 0;let t=0;return e.forEach((e=>t+=e.length)),t}function F(e){return"string"===typeof e||e instanceof String}function B(e){return"boolean"===typeof e}function M(e){return"number"===typeof e}function P(e){return Array.isArray(e)?P(e[0]):e instanceof Float32Array?"float32":e instanceof Int32Array||e instanceof Uint8Array||e instanceof Uint8ClampedArray?"int32":M(e)?"float32":F(e)?"string":B(e)?"bool":"float32"}function L(e){return!!(e&&e.constructor&&e.call&&e.apply)}function V(e,t){for(let n=t;n<e;++n)if(e%n===0)return n;return e}function z(e){const t=e.length;if(t<2)return[];const n=new Array(t-1);n[t-2]=e[t-1];for(let r=t-3;r>=0;--r)n[r]=n[r+1]*e[r+1];return n}function U(e,t,n){let r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];const a=new Array;if(1===t.length){const s=t[0]*(r?2:1);for(let t=0;t<s;t++)a[t]=n[e+t]}else{const s=t[0],o=t.slice(1),i=o.reduce(((e,t)=>e*t))*(r?2:1);for(let t=0;t<s;t++)a[t]=U(e+t*i,o,n,r)}return a}function W(e,t){let n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if(0===e.length)return t[0];const r=e.reduce(((e,t)=>e*t))*(n?2:1);if(0===r)return[];if(r!==t.length)throw new Error(`[${e}] does not match the input size ${t.length}${n?" for a complex tensor":""}.`);return U(0,e,t,n)}function G(e,t){const n=H(e,t);for(let r=0;r<n.length;r++)n[r]=1;return n}function H(e,t){if(null==t||"float32"===t||"complex64"===t)return new Float32Array(e);if("int32"===t)return new Int32Array(e);if("bool"===t)return new Uint8Array(e);throw new Error(`Unknown data type ${t}`)}function q(e,t){const n=e.reduce(((e,t)=>e*t),1);if(null==t||"float32"===t)return W(e,new Float32Array(n));if("int32"===t)return W(e,new Int32Array(n));if("bool"===t)return W(e,new Uint8Array(n));throw new Error(`Unknown data type ${t}`)}function X(e){e.forEach((t=>{d(Number.isInteger(t)&&t>=0,(()=>`Tensor must have a shape comprised of positive integers but got shape [${e}].`))}))}function K(e,t,n){if(0===t)return 0;if(1===t)return e[0];let r=e[e.length-1];for(let a=0;a<e.length-1;++a)r+=n[a]*e[a];return r}function j(e,t,n){if(0===t)return[];if(1===t)return[e];const r=new Array(t);for(let a=0;a<r.length-1;++a)r[a]=Math.floor(e/n[a]),e-=r[a]*n[a];return r[r.length-1]=e,r}function Y(e){return e&&e.then&&"function"===typeof e.then}n.d(t,{AE:()=>b,Cq:()=>h,D2:()=>P,D5:()=>E,E7:()=>c,EC:()=>T,GN:()=>x,GX:()=>W,HD:()=>F,JZ:()=>N,LF:()=>i,LP:()=>_,Mu:()=>X,N9:()=>g,NA:()=>m,NE:()=>j,QB:()=>R,Sm:()=>u,TV:()=>r,U$:()=>w,Ub:()=>D,WD:()=>S,WP:()=>$,YP:()=>v,bT:()=>O,bj:()=>l,bp:()=>I,cO:()=>y,d7:()=>a,e3:()=>z,fU:()=>A,hj:()=>M,hu:()=>d,jP:()=>V,jn:()=>B,k5:()=>p,l6:()=>q,mf:()=>L,nY:()=>o,oj:()=>k,p8:()=>G,qy:()=>K,rQ:()=>C,tI:()=>Y,uZ:()=>s,wT:()=>H,xH:()=>f})},1756:e=>{e.exports=n;var t=null;try{t=new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([0,97,115,109,1,0,0,0,1,13,2,96,0,1,127,96,4,127,127,127,127,1,127,3,7,6,0,1,1,1,1,1,6,6,1,127,1,65,0,11,7,50,6,3,109,117,108,0,1,5,100,105,118,95,115,0,2,5,100,105,118,95,117,0,3,5,114,101,109,95,115,0,4,5,114,101,109,95,117,0,5,8,103,101,116,95,104,105,103,104,0,0,10,191,1,6,4,0,35,0,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,126,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,127,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,128,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,129,34,4,66,32,135,167,36,0,32,4,167,11,36,1,1,126,32,0,173,32,1,173,66,32,134,132,32,2,173,32,3,173,66,32,134,132,130,34,4,66,32,135,167,36,0,32,4,167,11])),{}).exports}catch(T){}function n(e,t,n){this.low=0|e,this.high=0|t,this.unsigned=!!n}function r(e){return!0===(e&&e.__isLong__)}n.prototype.__isLong__,Object.defineProperty(n.prototype,"__isLong__",{value:!0}),n.isLong=r;var a={},s={};function o(e,t){var n,r,o;return t?(o=0<=(e>>>=0)&&e<256)&&(r=s[e])?r:(n=u(e,(0|e)<0?-1:0,!0),o&&(s[e]=n),n):(o=-128<=(e|=0)&&e<128)&&(r=a[e])?r:(n=u(e,e<0?-1:0,!1),o&&(a[e]=n),n)}function i(e,t){if(isNaN(e))return t?y:g;if(t){if(e<0)return y;if(e>=h)return k}else{if(e<=-f)return S;if(e+1>=f)return w}return e<0?i(-e,t).neg():u(e%p|0,e/p|0,t)}function u(e,t,r){return new n(e,t,r)}n.fromInt=o,n.fromNumber=i,n.fromBits=u;var l=Math.pow;function c(e,t,n){if(0===e.length)throw Error("empty string");if("NaN"===e||"Infinity"===e||"+Infinity"===e||"-Infinity"===e)return g;if("number"===typeof t?(n=t,t=!1):t=!!t,(n=n||10)<2||36<n)throw RangeError("radix");var r;if((r=e.indexOf("-"))>0)throw Error("interior hyphen");if(0===r)return c(e.substring(1),t,n).neg();for(var a=i(l(n,8)),s=g,o=0;o<e.length;o+=8){var u=Math.min(8,e.length-o),d=parseInt(e.substring(o,o+u),n);if(u<8){var p=i(l(n,u));s=s.mul(p).add(i(d))}else s=(s=s.mul(a)).add(i(d))}return s.unsigned=t,s}function d(e,t){return"number"===typeof e?i(e,t):"string"===typeof e?c(e,t):u(e.low,e.high,"boolean"===typeof t?t:e.unsigned)}n.fromString=c,n.fromValue=d;var p=4294967296,h=p*p,f=h/2,m=o(1<<24),g=o(0);n.ZERO=g;var y=o(0,!0);n.UZERO=y;var x=o(1);n.ONE=x;var b=o(1,!0);n.UONE=b;var v=o(-1);n.NEG_ONE=v;var w=u(-1,2147483647,!1);n.MAX_VALUE=w;var k=u(-1,-1,!0);n.MAX_UNSIGNED_VALUE=k;var S=u(0,-2147483648,!1);n.MIN_VALUE=S;var N=n.prototype;N.toInt=function(){return this.unsigned?this.low>>>0:this.low},N.toNumber=function(){return this.unsigned?(this.high>>>0)*p+(this.low>>>0):this.high*p+(this.low>>>0)},N.toString=function(e){if((e=e||10)<2||36<e)throw RangeError("radix");if(this.isZero())return"0";if(this.isNegative()){if(this.eq(S)){var t=i(e),n=this.div(t),r=n.mul(t).sub(this);return n.toString(e)+r.toInt().toString(e)}return"-"+this.neg().toString(e)}for(var a=i(l(e,6),this.unsigned),s=this,o="";;){var u=s.div(a),c=(s.sub(u.mul(a)).toInt()>>>0).toString(e);if((s=u).isZero())return c+o;for(;c.length<6;)c="0"+c;o=""+c+o}},N.getHighBits=function(){return this.high},N.getHighBitsUnsigned=function(){return this.high>>>0},N.getLowBits=function(){return this.low},N.getLowBitsUnsigned=function(){return this.low>>>0},N.getNumBitsAbs=function(){if(this.isNegative())return this.eq(S)?64:this.neg().getNumBitsAbs();for(var e=0!=this.high?this.high:this.low,t=31;t>0&&0==(e&1<<t);t--);return 0!=this.high?t+33:t+1},N.isZero=function(){return 0===this.high&&0===this.low},N.eqz=N.isZero,N.isNegative=function(){return!this.unsigned&&this.high<0},N.isPositive=function(){return this.unsigned||this.high>=0},N.isOdd=function(){return 1===(1&this.low)},N.isEven=function(){return 0===(1&this.low)},N.equals=function(e){return r(e)||(e=d(e)),(this.unsigned===e.unsigned||this.high>>>31!==1||e.high>>>31!==1)&&(this.high===e.high&&this.low===e.low)},N.eq=N.equals,N.notEquals=function(e){return!this.eq(e)},N.neq=N.notEquals,N.ne=N.notEquals,N.lessThan=function(e){return this.comp(e)<0},N.lt=N.lessThan,N.lessThanOrEqual=function(e){return this.comp(e)<=0},N.lte=N.lessThanOrEqual,N.le=N.lessThanOrEqual,N.greaterThan=function(e){return this.comp(e)>0},N.gt=N.greaterThan,N.greaterThanOrEqual=function(e){return this.comp(e)>=0},N.gte=N.greaterThanOrEqual,N.ge=N.greaterThanOrEqual,N.compare=function(e){if(r(e)||(e=d(e)),this.eq(e))return 0;var t=this.isNegative(),n=e.isNegative();return t&&!n?-1:!t&&n?1:this.unsigned?e.high>>>0>this.high>>>0||e.high===this.high&&e.low>>>0>this.low>>>0?-1:1:this.sub(e).isNegative()?-1:1},N.comp=N.compare,N.negate=function(){return!this.unsigned&&this.eq(S)?S:this.not().add(x)},N.neg=N.negate,N.add=function(e){r(e)||(e=d(e));var t=this.high>>>16,n=65535&this.high,a=this.low>>>16,s=65535&this.low,o=e.high>>>16,i=65535&e.high,l=e.low>>>16,c=0,p=0,h=0,f=0;return h+=(f+=s+(65535&e.low))>>>16,p+=(h+=a+l)>>>16,c+=(p+=n+i)>>>16,c+=t+o,u((h&=65535)<<16|(f&=65535),(c&=65535)<<16|(p&=65535),this.unsigned)},N.subtract=function(e){return r(e)||(e=d(e)),this.add(e.neg())},N.sub=N.subtract,N.multiply=function(e){if(this.isZero())return g;if(r(e)||(e=d(e)),t)return u(t.mul(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned);if(e.isZero())return g;if(this.eq(S))return e.isOdd()?S:g;if(e.eq(S))return this.isOdd()?S:g;if(this.isNegative())return e.isNegative()?this.neg().mul(e.neg()):this.neg().mul(e).neg();if(e.isNegative())return this.mul(e.neg()).neg();if(this.lt(m)&&e.lt(m))return i(this.toNumber()*e.toNumber(),this.unsigned);var n=this.high>>>16,a=65535&this.high,s=this.low>>>16,o=65535&this.low,l=e.high>>>16,c=65535&e.high,p=e.low>>>16,h=65535&e.low,f=0,y=0,x=0,b=0;return x+=(b+=o*h)>>>16,y+=(x+=s*h)>>>16,x&=65535,y+=(x+=o*p)>>>16,f+=(y+=a*h)>>>16,y&=65535,f+=(y+=s*p)>>>16,y&=65535,f+=(y+=o*c)>>>16,f+=n*h+a*p+s*c+o*l,u((x&=65535)<<16|(b&=65535),(f&=65535)<<16|(y&=65535),this.unsigned)},N.mul=N.multiply,N.divide=function(e){if(r(e)||(e=d(e)),e.isZero())throw Error("division by zero");var n,a,s;if(t)return this.unsigned||-2147483648!==this.high||-1!==e.low||-1!==e.high?u((this.unsigned?t.div_u:t.div_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this;if(this.isZero())return this.unsigned?y:g;if(this.unsigned){if(e.unsigned||(e=e.toUnsigned()),e.gt(this))return y;if(e.gt(this.shru(1)))return b;s=y}else{if(this.eq(S))return e.eq(x)||e.eq(v)?S:e.eq(S)?x:(n=this.shr(1).div(e).shl(1)).eq(g)?e.isNegative()?x:v:(a=this.sub(e.mul(n)),s=n.add(a.div(e)));if(e.eq(S))return this.unsigned?y:g;if(this.isNegative())return e.isNegative()?this.neg().div(e.neg()):this.neg().div(e).neg();if(e.isNegative())return this.div(e.neg()).neg();s=g}for(a=this;a.gte(e);){n=Math.max(1,Math.floor(a.toNumber()/e.toNumber()));for(var o=Math.ceil(Math.log(n)/Math.LN2),c=o<=48?1:l(2,o-48),p=i(n),h=p.mul(e);h.isNegative()||h.gt(a);)h=(p=i(n-=c,this.unsigned)).mul(e);p.isZero()&&(p=x),s=s.add(p),a=a.sub(h)}return s},N.div=N.divide,N.modulo=function(e){return r(e)||(e=d(e)),t?u((this.unsigned?t.rem_u:t.rem_s)(this.low,this.high,e.low,e.high),t.get_high(),this.unsigned):this.sub(this.div(e).mul(e))},N.mod=N.modulo,N.rem=N.modulo,N.not=function(){return u(~this.low,~this.high,this.unsigned)},N.and=function(e){return r(e)||(e=d(e)),u(this.low&e.low,this.high&e.high,this.unsigned)},N.or=function(e){return r(e)||(e=d(e)),u(this.low|e.low,this.high|e.high,this.unsigned)},N.xor=function(e){return r(e)||(e=d(e)),u(this.low^e.low,this.high^e.high,this.unsigned)},N.shiftLeft=function(e){return r(e)&&(e=e.toInt()),0===(e&=63)?this:e<32?u(this.low<<e,this.high<<e|this.low>>>32-e,this.unsigned):u(0,this.low<<e-32,this.unsigned)},N.shl=N.shiftLeft,N.shiftRight=function(e){return r(e)&&(e=e.toInt()),0===(e&=63)?this:e<32?u(this.low>>>e|this.high<<32-e,this.high>>e,this.unsigned):u(this.high>>e-32,this.high>=0?0:-1,this.unsigned)},N.shr=N.shiftRight,N.shiftRightUnsigned=function(e){if(r(e)&&(e=e.toInt()),0===(e&=63))return this;var t=this.high;return e<32?u(this.low>>>e|t<<32-e,t>>>e,this.unsigned):u(32===e?t:t>>>e-32,0,this.unsigned)},N.shru=N.shiftRightUnsigned,N.shr_u=N.shiftRightUnsigned,N.toSigned=function(){return this.unsigned?u(this.low,this.high,!1):this},N.toUnsigned=function(){return this.unsigned?this:u(this.low,this.high,!0)},N.toBytes=function(e){return e?this.toBytesLE():this.toBytesBE()},N.toBytesLE=function(){var e=this.high,t=this.low;return[255&t,t>>>8&255,t>>>16&255,t>>>24,255&e,e>>>8&255,e>>>16&255,e>>>24]},N.toBytesBE=function(){var e=this.high,t=this.low;return[e>>>24,e>>>16&255,e>>>8&255,255&e,t>>>24,t>>>16&255,t>>>8&255,255&t]},n.fromBytes=function(e,t,r){return r?n.fromBytesLE(e,t):n.fromBytesBE(e,t)},n.fromBytesLE=function(e,t){return new n(e[0]|e[1]<<8|e[2]<<16|e[3]<<24,e[4]|e[5]<<8|e[6]<<16|e[7]<<24,t)},n.fromBytesBE=function(e,t){return new n(e[4]<<24|e[5]<<16|e[6]<<8|e[7],e[0]<<24|e[1]<<16|e[2]<<8|e[3],t)}},3849:(e,t,n)=>{var r=n(9e3),a=n(3760),s=n(9191),o=n(5976),i=n(3105),u=n(1380),l=n(5262);l.alea=r,l.xor128=a,l.xorwow=s,l.xorshift7=o,l.xor4096=i,l.tychei=u,e.exports=l},9e3:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n=function(){var e=4022871197;return function(t){t=String(t);for(var n=0;n<t.length;n++){var r=.02519603282416938*(e+=t.charCodeAt(n));r-=e=r>>>0,e=(r*=e)>>>0,e+=4294967296*(r-=e)}return 2.3283064365386963e-10*(e>>>0)}}();t.next=function(){var e=2091639*t.s0+2.3283064365386963e-10*t.c;return t.s0=t.s1,t.s1=t.s2,t.s2=e-(t.c=0|e)},t.c=1,t.s0=n(" "),t.s1=n(" "),t.s2=n(" "),t.s0-=n(e),t.s0<0&&(t.s0+=1),t.s1-=n(e),t.s1<0&&(t.s1+=1),t.s2-=n(e),t.s2<0&&(t.s2+=1),n=null}function i(e,t){return t.c=e.c,t.s0=e.s0,t.s1=e.s1,t.s2=e.s2,t}function u(e,t){var n=new o(e),r=t&&t.state,a=n.next;return a.int32=function(){return 4294967296*n.next()|0},a.double=function(){return a()+11102230246251565e-32*(2097152*a()|0)},a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.alea=u}(0,e=n.nmd(e),n.amdD)},1380:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.next=function(){var e=t.b,n=t.c,r=t.d,a=t.a;return e=e<<25^e>>>7^n,n=n-r|0,r=r<<24^r>>>8^a,a=a-e|0,t.b=e=e<<20^e>>>12^n,t.c=n=n-r|0,t.d=r<<16^n>>>16^a,t.a=a-e|0},t.a=0,t.b=0,t.c=-1640531527,t.d=1367130551,e===Math.floor(e)?(t.a=e/4294967296|0,t.b=0|e):n+=e;for(var r=0;r<n.length+20;r++)t.b^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.a=e.a,t.b=e.b,t.c=e.c,t.d=e.d,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.tychei=u}(0,e=n.nmd(e),n.amdD)},3760:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.x=0,t.y=0,t.z=0,t.w=0,t.next=function(){var e=t.x^t.x<<11;return t.x=t.y,t.y=t.z,t.z=t.w,t.w^=t.w>>>19^e^e>>>8},e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xor128=u}(0,e=n.nmd(e),n.amdD)},3105:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this;t.next=function(){var e,n,r=t.w,a=t.X,s=t.i;return t.w=r=r+1640531527|0,n=a[s+34&127],e=a[s=s+1&127],n^=n<<13,e^=e<<17,n^=n>>>15,e^=e>>>12,n=a[s]=n^e,t.i=s,n+(r^r>>>16)|0},function(e,t){var n,r,a,s,o,i=[],u=128;for(t===(0|t)?(r=t,t=null):(t+="\0",r=0,u=Math.max(u,t.length)),a=0,s=-32;s<u;++s)t&&(r^=t.charCodeAt((s+32)%t.length)),0===s&&(o=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,s>=0&&(o=o+1640531527|0,a=0==(n=i[127&s]^=r+o)?a+1:0);for(a>=128&&(i[127&(t&&t.length||0)]=-1),a=127,s=512;s>0;--s)r=i[a+34&127],n=i[a=a+1&127],r^=r<<13,n^=n<<17,r^=r>>>15,n^=n>>>12,i[a]=r^n;e.w=o,e.X=i,e.i=a}(t,e)}function i(e,t){return t.i=e.i,t.w=e.w,t.X=e.X.slice(),t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.X&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xor4096=u}(0,e=n.nmd(e),n.amdD)},5976:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this;t.next=function(){var e,n,r=t.x,a=t.i;return e=r[a],n=(e^=e>>>7)^e<<24,n^=(e=r[a+1&7])^e>>>10,n^=(e=r[a+3&7])^e>>>3,n^=(e=r[a+4&7])^e<<7,e=r[a+7&7],n^=(e^=e<<13)^e<<9,r[a]=n,t.i=a+1&7,n},function(e,t){var n,r=[];if(t===(0|t))r[0]=t;else for(t=""+t,n=0;n<t.length;++n)r[7&n]=r[7&n]<<15^t.charCodeAt(n)+r[n+1&7]<<13;for(;r.length<8;)r.push(0);for(n=0;n<8&&0===r[n];++n);for(8==n?r[7]=-1:r[n],e.x=r,e.i=0,n=256;n>0;--n)e.next()}(t,e)}function i(e,t){return t.x=e.x.slice(),t.i=e.i,t}function u(e,t){null==e&&(e=+new Date);var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&(r.x&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xorshift7=u}(0,e=n.nmd(e),n.amdD)},9191:function(e,t,n){var r;!function(e,a,s){function o(e){var t=this,n="";t.next=function(){var e=t.x^t.x>>>2;return t.x=t.y,t.y=t.z,t.z=t.w,t.w=t.v,(t.d=t.d+362437|0)+(t.v=t.v^t.v<<4^e^e<<1)|0},t.x=0,t.y=0,t.z=0,t.w=0,t.v=0,e===(0|e)?t.x=e:n+=e;for(var r=0;r<n.length+64;r++)t.x^=0|n.charCodeAt(r),r==n.length&&(t.d=t.x<<10^t.x>>>4),t.next()}function i(e,t){return t.x=e.x,t.y=e.y,t.z=e.z,t.w=e.w,t.v=e.v,t.d=e.d,t}function u(e,t){var n=new o(e),r=t&&t.state,a=function(){return(n.next()>>>0)/4294967296};return a.double=function(){do{var e=((n.next()>>>11)+(n.next()>>>0)/4294967296)/(1<<21)}while(0===e);return e},a.int32=n.next,a.quick=a,r&&("object"==typeof r&&i(r,n),a.state=function(){return i(n,{})}),a}a&&a.exports?a.exports=u:n.amdD&&n.amdO?void 0===(r=function(){return u}.call(t,n,t,a))||(a.exports=r):this.xorwow=u}(0,e=n.nmd(e),n.amdD)},5262:function(e,t,n){var r;!function(a,s,o){var i,u=256,l=o.pow(u,6),c=o.pow(2,52),d=2*c,p=255;function h(e,t,n){var r=[],p=y(g((t=1==t?{entropy:!0}:t||{}).entropy?[e,x(s)]:null==e?function(){try{var e;return i&&(e=i.randomBytes)?e=e(u):(e=new Uint8Array(u),(a.crypto||a.msCrypto).getRandomValues(e)),x(e)}catch(r){var t=a.navigator,n=t&&t.plugins;return[+new Date,a,n,a.screen,x(s)]}}():e,3),r),h=new f(r),b=function(){for(var e=h.g(6),t=l,n=0;e<c;)e=(e+n)*u,t*=u,n=h.g(1);for(;e>=d;)e/=2,t/=2,n>>>=1;return(e+n)/t};return b.int32=function(){return 0|h.g(4)},b.quick=function(){return h.g(4)/4294967296},b.double=b,y(x(h.S),s),(t.pass||n||function(e,t,n,r){return r&&(r.S&&m(r,h),e.state=function(){return m(h,{})}),n?(o.random=e,t):e})(b,p,"global"in t?t.global:this==o,t.state)}function f(e){var t,n=e.length,r=this,a=0,s=r.i=r.j=0,o=r.S=[];for(n||(e=[n++]);a<u;)o[a]=a++;for(a=0;a<u;a++)o[a]=o[s=p&s+e[a%n]+(t=o[a])],o[s]=t;(r.g=function(e){for(var t,n=0,a=r.i,s=r.j,o=r.S;e--;)t=o[a=p&a+1],n=n*u+o[p&(o[a]=o[s=p&s+t])+(o[s]=t)];return r.i=a,r.j=s,n})(u)}function m(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function g(e,t){var n,r=[],a=typeof e;if(t&&"object"==a)for(n in e)try{r.push(g(e[n],t-1))}catch(s){}return r.length?r:"string"==a?e:e+"\0"}function y(e,t){for(var n,r=e+"",a=0;a<r.length;)t[p&a]=p&(n^=19*t[p&a])+r.charCodeAt(a++);return x(t)}function x(e){return String.fromCharCode.apply(0,e)}if(y(o.random(),s),e.exports){e.exports=h;try{i=n(9797)}catch(b){}}else void 0===(r=function(){return h}.call(t,n,t,e))||(e.exports=r)}("undefined"!==typeof self?self:this,[],Math)}}]);
//# sourceMappingURL=434.38913a0b.chunk.js.map